{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/spa-app/lib/core.js","webpack:///./node_modules/stb-app/index.js","webpack:///./src/js/config.js","webpack:///./node_modules/stb-app/lib/css.js","webpack:///./src/js/modules/tools.js","webpack:///../plugin-browser/src/js/messages.js","webpack:///./node_modules/cjs-uri/index.js","webpack:///./node_modules/stb-keys/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./node_modules/cjs-query/index.js","webpack:///./node_modules/spa-app/lib/events.js","webpack:///./node_modules/stb-shim-classlist/index.js","webpack:///./node_modules/stb-app/lib/metrics.js","webpack:///./src/js/metrics.js","webpack:///./node_modules/stb-app/lib/events.js","webpack:///./src/js/modules/core.js","webpack:///./node_modules/spa-keys/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","parse","app","query","document","location","search","substring","config","activePage","route","pageTo","data","page","pageFrom","active","id","$node","classList","remove","events","emit","add","showPage","this","from","to","window","moveTo","resizeTo","metrics","width","height","stbEvent","gSTB","SetNativeStringMode","contextmenu","event","preventDefault","keys","forEach","addEventListener","startPage","portalWindowId","link","createElement","rel","href","head","appendChild","validateUrl","url","test","callback","undefined","push","trigger","result","results","self","ev","messageTypes","toEngine","toApp","messageReceiver","reduce","messages","message","parseUri","str","options","matched","parser","strictMode","exec","uri","index","q","replace","$0","$1","$2","strict","loose","back","backspace","channelNext","tab","channelPrev","ok","enter","exit","escape","volumeUp","volumeDown","f1","f2","f3","f4","refresh","frame","phone","set","tv","menu","rewind","forward","audio","standby","keyboard","usbMounted","usbUnmounted","playPause","play","pause","stop","power","record","info","mute","digit0","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","tools","messagesToApp","EnableVKButton","EnableAppButton","EnableServiceButton","once","params","queryKey","core","resourcesLoadState","browseIntent","loadUrl","addListener","code","actions","MODE_MENU","stbWindowMgr","windowHide","webWindowHandle","stbWebWindow","messageSend","openMenu","CloseWebWindow","isLoadStartTriggered","home","openTaskManager","openSettings","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","Array","slice","constructor","split","part","decodeURIComponent","stringify","encodeURIComponent","join","DOMContentLoaded","load","type","unload","error","keydown","activeComponent","eventLocal","keyCode","ctrlKey","altKey","shiftKey","propagate","parent","keypress","mousewheel","documentElement","indexOf","splice","DOMTokenList","el","_element","className","_classCache","classes","token","contains","item","toString","toggle","Element","screenHeight","screen","availHeight","availTop","availBottom","availWidth","availLeft","availRight","480","576","720","1080","EVENT_END_OF_FILE","EVENT_GET_MEDIA_INFO","EVENT_PLAYBACK_BEGIN","EVENT_CONTENT_ERROR","EVENT_DUAL_MONO_DETECT","EVENT_INFO_GET","EVENT_SUBTITLE_LOAD_ERROR","EVENT_SUBTITLE_FIND","EVENT_HDMI_CONNECT","EVENT_HDMI_DISCONNECT","EVENT_RECORD_FINISH_SUCCESSFUL","EVENT_RECORD_FINISH_ERROR","EVENT_DVB_SCANING","EVENT_DVB_FOUND","EVENT_DVB_CHANNEL_EPG_UPDATE","EVENT_DVB_ANTENNA_OFF","onEvent","JSON","parseInt","onBroadcastMessage","windowId","broadcast","onMessage","onMediaAvailable","mime","onWebBrowserProgress","progress","onWindowActivated","messagesToEngine","screenBoundsRegular","x","y","w","h","screenBoundsFullscreen","loadProgress","activateUserPrefs","webWindowIsFullScreen","webWindowIsVMouse","scale","webWindowZoom","storage","MODE_BROWSER","webWindowUrl","isColdStart","userSettings","settings","isFullScreen","isVirtualMouse","reload","stopLoading","navigateForward","goForward","navigateBackward","goBack","userTextInput","webWindowShow","showWebWindow","hideWebWindow","openVirtualKeyboard","IsVirtualKeyboardActive","HideVirtualKeyboard","ShowVirtualKeyboard","setFullScreen","intentUrl","changeUrl","title","getCurrentTitle","unsetFavicon","status","setFavicon","setWebWindowFullScreen","notification","getCurrWebUrl","setLoadProgress","itemMime","itemLink","mediaAvailable","itemName","file","onWebBrowserFullScreenExit","LoadUrl","initWebWindow","resizeWebWindow","raiseWebWindow","ready","ReloadDocument","state","setVirtualMouseMode","favoritesState","NavigateBack","NavigateForward","StopLoading","ratio","SetZoomFactor","windowShow","geometry","SetFullScreenMode","space","pageUp","pageDown","end","left","up","right","down","insert","del"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    parse   = require('cjs-query').parse,\n    app     = new Emitter();\n\n\n/**\n * Make the given inactive/hidden page active/visible.\n * Pass some data to the page and trigger the corresponding event.\n *\n * @param {Page} page item to show\n * @param {*} [data] data to send to page\n *\n * @return {boolean} operation status\n */\nfunction showPage ( page, data ) {\n    // page available and can be hidden\n    if ( page && !page.active ) {\n        // apply visibility\n        page.$node.classList.add('active');\n        page.active = true;\n        app.activePage = page;\n\n        debug.info('show component ' + page.name + '#' + page.id, null, {\n            tags: ['show', 'component', page.name, page.id]\n        });\n        //console.log('component ' + page.name + '.' + page.id + ' show', 'green');\n\n        // there are some listeners\n        if ( page.events['show'] ) {\n            // notify listeners\n            page.emit('show', {data: data});\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n}\n\n\n/**\n * Make the given active/visible page inactive/hidden and trigger the corresponding event.\n *\n * @param {Page} page item to hide\n *\n * @return {boolean} operation status\n */\nfunction hidePage ( page ) {\n    // page available and can be hidden\n    if ( page && page.active ) {\n        // apply visibility\n        page.$node.classList.remove('active');\n        page.active  = false;\n        app.activePage = null;\n\n        debug.info('hide component ' + page.name + '#' + page.id, null, {\n            tags: ['hide', 'component', page.name, page.id]\n        });\n        //console.log('component ' + page.name + '.' + page.id + ' hide', 'grey');\n\n        // there are some listeners\n        if ( page.events['hide'] ) {\n            // notify listeners\n            page.emit('hide');\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n}\n\n\n// url request params\napp.query = parse(document.location.search.substring(1));\n\n\n// global application configuration\n// in config.js file in js root\napp.config = require('app:config');\n\n\n// the only visible page\napp.activePage = null;\n\n\n/**\n * Browse to a given page.\n * Do nothing if the link is invalid. Otherwise hide the current, show new and update the \"previous\" link.\n *\n * @param {Page} pageTo instance of the page to show\n * @param {*} [data] options to pass to the page on show\n *\n * @return {boolean} operation status\n */\napp.route = function ( pageTo, data ) {\n    var pageFrom = app.activePage;\n\n    if ( DEVELOP ) {\n        //if ( router.pages.length > 0 ) {\n        if ( !pageTo || typeof pageTo !== 'object' ) {\n            throw new Error(__filename + ': wrong pageTo type');\n        }\n        if ( !('active' in pageTo) ) {\n            throw new Error(__filename + ': missing field \"active\" in pageTo');\n        }\n        //}\n    }\n\n    // valid not already active page\n    if ( pageTo && !pageTo.active ) {\n        //debug.log('router.navigate: ' + pageTo.id, pageTo === pageFrom ? 'grey' : 'green');\n        debug.info('app route: ' + pageTo.name + '#' + pageTo.id, null, {tags: ['route', pageTo.name, pageTo.id]});\n\n        // update url\n        //location.hash = this.stringify(name, data);\n\n        // apply visibility\n        hidePage(app.activePage);\n        showPage(pageTo, data);\n\n        // there are some listeners\n        if ( this.events['route'] ) {\n            // notify listeners\n            this.emit('route', {from: pageFrom, to: pageTo});\n        }\n\n        // store\n        //this.history.push(pageTo);\n\n        return true;\n    }\n\n    //debug.warn('invalid page to route: ' + pageTo.id, null, {tags: ['route', 'page', pageTo.id]});\n    console.warn('invalid page to route: ' + pageTo.id);\n\n    // nothing was done\n    return false;\n};\n\n\n// public\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app    = require('spa-app/lib/core'),\n    events = require('spa-app/lib/events');\n\n\n// extract key codes\n// for ( key in codes ) {\n//     if ( key === 'volumeUp' || key === 'volumeDown' ) {\n//         continue;\n//     }\n//     // no need to save key names\n//     keyCodes[codes[key]] = true;\n// }\n\n// shims\nrequire('stb-shim-classlist');\n\n// apply geometry\nrequire('./lib/metrics');\n\n// load sdk+app css\nrequire('./lib/css')('sdk');\nrequire('./lib/css')('app');\n\n\n// set max browser window size\nwindow.moveTo(0, 0);\nwindow.resizeTo(app.metrics.width, app.metrics.height);\n\n\n// create stbEvent global object\nwindow.stbEvent = require('./lib/events');\n\n\n// new way of string handling\n// all strings are in UTF-16\n// since stbapp 2.18\nif ( window.gSTB && gSTB.SetNativeStringMode ) {\n    /* eslint new-cap: 0 */\n    gSTB.SetNativeStringMode(true);\n}\n\n\n// activate development mechanisms and tools\nif ( DEVELOP ) {\n    require('./lib/develop/main');\n}\n\n\n// disable right click in release mode\nevents.contextmenu = function ( event ) {\n    if ( !DEVELOP ) {\n        event.preventDefault();\n    }\n};\n\n\n// apply DOM events\nObject.keys(events).forEach(function ( name ) {\n    window.addEventListener(name, events[name]);\n});\n\n\n// public\nmodule.exports = app;\n","/**\n * Global application configuration.\n * Can store run-time options, API urls, paths, execution flags and so on.\n * Automatically loaded on application initialization and available as app.config.\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    startPage: 'https://www.google.com',\n    portalWindowId: 1\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('spa-app/lib/core');\n//    metrics = require('app:metrics'),\n//    linkCSS;\n\n\n// global link\n//app.metrics = metrics[app.query.screenHeight] || metrics[screen.height] || metrics[720];\n\n// calculate and extend\n//app.metrics.availHeight = app.metrics.height - (app.metrics.availTop  + app.metrics.availBottom);\n//app.metrics.availWidth  = app.metrics.width  - (app.metrics.availLeft + app.metrics.availRight);\n\n// // set max browser window size\n// window.moveTo(0, 0);\n// window.resizeTo(metrics.width, metrics.height);\n\n// load CSS file base on resolution\n/*linkCSS = document.createElement('link');\nlinkCSS.rel  = 'stylesheet';\nlinkCSS.href = 'css/' + (DEVELOP ? 'develop.' : 'release.') + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\ndocument.head.appendChild(linkCSS);*/\n\n\n// public\nmodule.exports = function ( name ) {\n    var link = document.createElement('link');\n\n    link.rel  = 'stylesheet';\n    link.href = 'css/' + name + '.' + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\n    document.head.appendChild(link);\n};\n","'use strict';\n\nmodule.exports = {\n    /**\n     * Validate URL.\n     *\n     * @param {string} url - url for validation\n     *\n     * @return {boolean} validation result\n     */\n    validateUrl: function ( url ) {\n        // eslint-disable-next-line\n        return (/^(?:(?:https?|ftp):\\/\\/)?(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i).test(url);\n    },\n\n    /**\n     * Assign new event to the current object.\n     *\n     * @param {string|Object} event - event name or object where the key is event name and value is handler\n     * @param {Function} callback - function that will be executed when event was triggered\n     */\n    bind: function ( event, callback ) {\n        var name;\n\n        this.events || (this.events = {});\n\n        if ( typeof event === 'object' ) {\n            for ( name in event ) {\n                this.bind(name, event[name]);\n            }\n        } else if ( typeof event === 'string' && typeof callback === 'function' ) {\n            if ( this.events[event] === undefined ) {\n                this.events[event] = [];\n            }\n\n            this.events[event].push(callback);\n        }\n    },\n\n    /**\n     * Trigger some event.\n     *\n     * @param {string} event - name of events which will be triggered\n     * @param {*} data - data for transmission\n     *\n     * @return {Object[]} result set\n     */\n    trigger: function ( event, data ) {\n        var results = [],\n            self = this,\n            result;\n\n        if ( event !== undefined && this.events !== undefined && this.events[event] !== undefined ) {\n            this.events[event].forEach(function ( ev ) {\n                result = ev.call(self, data);\n\n                if ( result !== undefined ) {\n                    results.push(result);\n                }\n            });\n        }\n\n        return results;\n    }\n};\n","/**\n * Define whole set of messages for communication between browser app and its engine part.\n */\n\n'use strict';\n\nvar messageTypes = {\n    toEngine: [\n        'reload',\n        'stopLoad',\n        'navigateForward',\n        'navigateBackward',\n        'hideWebWindow',\n        'openVirtualKeyboard',\n        'search',\n        'setFullScreen',\n        'userTextInput',\n        'userSettings',\n        'showWebWindow',\n        'intentUrl'\n    ],\n    toApp: [\n        'ready',\n        'openTaskManager',\n        'openMenu',\n        'home',\n        'back',\n        'search',\n        'openSettings',\n        'notification',\n        'favoritesState',\n        'setFavicon',\n        'unsetFavicon',\n        'setLoadProgress',\n        'changeUrl',\n        'reload',\n        'mediaAvailable'\n    ]\n};\n\nObject.keys(messageTypes).forEach(function ( messageReceiver ) {\n    messageTypes[messageReceiver] = messageTypes[messageReceiver].reduce(function ( messages, message ) {\n        messages[message] = message;\n\n        return messages;\n    }, {});\n});\n\n\nmodule.exports = messageTypes;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n\n/**\n * URL parsing tool.\n *\n * @license The MIT License (MIT)\n * @copyright Steven Levithan <stevenlevithan.com>\n *\n * @param {string} str string to parse\n *\n * @return {Object.<string, string>} result data\n */\nfunction parseUri ( str ) {\n    var options = parseUri.options,\n        matched = options.parser[options.strictMode ? 'strict' : 'loose'].exec(str),\n        uri     = {},\n        index   = 14;\n\n    while ( index-- ) {\n        uri[options.key[index]] = matched[index] || '';\n    }\n\n    uri[options.q.name] = {};\n\n    /* eslint no-unused-vars: 0 */\n    uri[options.key[12]].replace(options.q.parser, function ( $0, $1, $2 ) {\n        if ( $1 ) { uri[options.q.name][$1] = $2; }\n    });\n\n    return uri;\n}\n\nparseUri.options = {\n    strictMode: false,\n    key: [\n        'source',\n        'protocol',\n        'authority',\n        'userInfo',\n        'user',\n        'password',\n        'host',\n        'port',\n        'relative',\n        'path',\n        'directory',\n        'file',\n        'query',\n        'anchor'\n    ],\n    q: {\n        name: 'queryKey',\n        parser: /(?:^|&)([^&=]*)=?([^&]*)/g\n    },\n    parser: {\n        // eslint-disable-next-line\n        strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        // eslint-disable-next-line\n        loose:  /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n    }\n};\n\n\n// public\nmodule.exports = {\n    parse: parseUri\n};\n","/**\n * Global list of non-printable control key codes.\n *\n * At the moment `keypress` and `keydown` events are emitted for the same keys (for both printable and non-printable characters).\n *\n * WARNING!!! All codes in this file (except 'volumeUp' and 'volumeDown')\n * are used in window 'keydown' handler to prevent wrong 'keypress' firings.\n * If you add new code to this file 'keypress' event with this code will never fire.\n *\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar keys = require('spa-keys');\n\n\n// extend with additional codes\nkeys.back         = keys.backspace;\nkeys.channelNext  = keys.tab;        // Tab\nkeys.channelPrev  = keys.tab + 's';  // Shift+Tab\nkeys.ok           = keys.enter;      // Enter\nkeys.exit         = keys.escape;     // Esc\nkeys.volumeUp     = 107;             // NUMPAD +\nkeys.volumeDown   = 109;             // NUMPAD -\nkeys.f1           = 112 + 'c';       // Ctrl+F1\nkeys.f2           = 113 + 'c';       // Ctrl+F2\nkeys.f3           = 114 + 'c';       // Ctrl+F3\nkeys.f4           = 115 + 'c';       // Ctrl+F4\nkeys.refresh      = 116 + 'c';       // Ctrl+F5\nkeys.frame        = 117 + 'c';       // Ctrl+F6\nkeys.phone        = 119 + 'c';       // Ctrl+F8\nkeys.set          = 120 + 'c';       // Ctrl+F9\nkeys.tv           = 121 + 'c';       // Ctrl+F10\nkeys.menu         = 122 + 'c';       // Ctrl+F11\nkeys.app          = 123 + 'c';       // Ctrl+F12\nkeys.rewind       = 66  + 'a';       // Alt+B\nkeys.forward      = 70  + 'a';       // Alt+F\nkeys.audio        = 71  + 'a';       // Alt+G\nkeys.standby      = 74  + 'a';       // Alt+J\nkeys.keyboard     = 76  + 'a';       // Alt+L\nkeys.usbMounted   = 80  + 'a';       // Alt+P\nkeys.usbUnmounted = 81  + 'a';       // Alt+Q\nkeys.playPause    = 82  + 'a';       // Alt+R\nkeys.play         = -1;              // should be redefined on some platforms\nkeys.pause        = -1;              // should be redefined on some platforms\nkeys.stop         = 83  + 'a';       // Alt+S\nkeys.power        = 85  + 'a';       // Alt+U\nkeys.record       = 87  + 'a';       // Alt+W\nkeys.info         = 89  + 'a';       // Alt+Y\nkeys.mute         = 192 + 'a';\nkeys.digit0       = 48;\nkeys.digit1       = 49;\nkeys.digit2       = 50;\nkeys.digit3       = 51;\nkeys.digit4       = 52;\nkeys.digit5       = 53;\nkeys.digit6       = 54;\nkeys.digit7       = 55;\nkeys.digit8       = 56;\nkeys.digit9       = 57;\n\n\n// public\nmodule.exports = keys;\n\n// public\n// module.exports = {\n//     getCode: function ( event ) {\n//         var code = event.keyCode;\n//\n//         // apply key modifiers\n//         if ( event.shiftKey ) { code += 1000; }\n//         if ( event.altKey )   { code += 2000; }\n//\n//         return code;\n//     },\n//\n//     codes: {\n//         back:         8,    // Backspace\n//         channelPrev:  1009, // Shift+Tab\n//         channelNext:  9,    // Tab\n//         ok:           13,   // Enter\n//         exit:         27,   // Esc\n//         pageUp:       33,\n//         pageDown:     34,\n//         end:          35,\n//         home:         36,\n//         left:         37,\n//         up:           38,\n//         right:        39,\n//         down:         40,\n//         'delete':     46,\n//         volumeUp:     107,  // NUMPAD +\n//         volumeDown:   109,  // NUMPAD -\n//         f1:           112,  // F1\n//         f2:           113,  // F2\n//         f3:           114,  // F3\n//         f4:           115,  // F4\n//         refresh:      116,  // F5\n//         frame:        117,  // F6\n//         phone:        119,  // F8\n//         set:          120,  // F9\n//         tv:           121,  // F10\n//         menu:         122,  // F11\n//         app:          123,  // F12\n//         rewind:       2066, // Alt+B\n//         forward:      2070, // Alt+F\n//         audio:        2071, // Alt+G\n//         standby:      2074, // Alt+J\n//         keyboard:     2076, // Alt+L\n//         usbMounted:   2080, // Alt+P\n//         usbUnmounted: 2081, // Alt+Q\n//         playPause:    2082, // Alt+R\n//         stop:         2083, // Alt+S\n//         power:        2085, // Alt+U\n//         record:       2087, // Alt+W\n//         info:         2089, // Alt+Y\n//         mute:         2192\n//     }\n// };\n","/**\n * Main application entry point.\n */\n\n'use strict';\n\nvar app           = require('stb-app'),\n    tools         = require('./modules/tools'),\n    messagesToApp = require('../../../plugin-browser/src/js/messages').toApp;\n\n\nstbEvent.trigger      = tools.trigger;\nstbEvent.bind         = tools.bind;\napp.activePage        = {};\napp.activePage.events = {};\n\ngSTB.EnableVKButton(true);\ngSTB.EnableAppButton(false);\ngSTB.EnableServiceButton(false);\n\napp.once('load', function () {\n    var parse  = require('cjs-uri').parse,\n        params = parse(location.href).queryKey,\n        core   = require('./modules/core'),\n        keys   = require('stb-keys'),\n        config = app.config;\n\n    config.portalWindowId = params.portalWindowId || config.portalWindowId;\n    params.page && (core.resourcesLoadState.browseIntent = true);\n    core.loadUrl(params.page || config.startPage);\n\n    app.addListener('keydown', function ( event ) {\n        switch ( event.code ) {\n            case keys.f1:\n                core.actions.f1();\n                break;\n            case keys.f2:\n                core.actions.f2();\n                break;\n            case keys.f3:\n                core.actions.f3();\n                break;\n            case keys.f4:\n                core.actions.f4();\n                break;\n            case keys.menu:\n                core.mode = core.MODE_MENU;\n                stbWindowMgr.windowHide(core.webWindowHandle);\n                stbWebWindow.messageSend(config.portalWindowId, messagesToApp.openMenu);\n                break;\n            case keys.frame:\n                core.actions.frame();\n                break;\n            case keys.back:\n                gSTB.CloseWebWindow();\n                stbWebWindow.messageSend(config.portalWindowId, messagesToApp.back);\n                break;\n            case keys.exit:\n                // add for preventing loading possibly heavy pages in background\n                if ( core.resourcesLoadState.isLoadStartTriggered ) {\n                    core.actions.stop();\n                }\n                stbWindowMgr.windowHide(core.webWindowHandle);\n                stbWebWindow.messageSend(config.portalWindowId, messagesToApp.home);\n                break;\n            case keys.mute:\n                break;\n            case keys.app:\n                core.mode = core.MODE_MENU;\n                stbWindowMgr.windowHide(core.webWindowHandle);\n                stbWebWindow.messageSend(config.portalWindowId, messagesToApp.openTaskManager);\n                break;\n            case keys.set:\n                core.mode = core.MODE_MENU;\n                stbWindowMgr.windowHide(core.webWindowHandle);\n                stbWebWindow.messageSend(config.portalWindowId, messagesToApp.openSettings);\n                break;\n        }\n    });\n});\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nmodule.exports = {\n    /**\n     * Parse the given location search string into object.\n     *\n     * @param {string} query string to parse\n     *\n     * @return {Object.<string, string>} result data\n     */\n    parse: function ( query ) {\n        var data = {};\n\n        // parse and fill the data\n        query.split('&').forEach(function ( part ) {\n            part = part.split('=');\n            // valid number on params\n            if ( part.length === 2 ) {\n                data[part[0]] = decodeURIComponent(part[1]);\n            }\n        });\n\n        return data;\n    },\n\n\n    /**\n     * Make uri query part in a string form.\n     *\n     * @param {Object} params data to stringify\n     *\n     * @return {string} query string\n     */\n    stringify: function ( params ) {\n        var data = [];\n\n        Object.keys(params).forEach(function ( name ) {\n            data.push(name + '=' + encodeURIComponent(params[name]));\n        });\n\n        return data.join('&');\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('./core');\n\n\n// public\nmodule.exports = {\n    DOMContentLoaded: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // there are some listeners\n        if ( app.events['dom'] ) {\n            // notify listeners\n            app.emit('dom', event);\n            //console.log('DOMContentLoaded');\n        }\n    },\n\n    /**\n     * The load event is fired when a resource and its dependent resources have finished loading.\n     *\n     * Control flow:\n     *   1. Global handler.\n     *   2. Each page handler.\n     *   3. Application DONE event.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/load\n     *\n     * @param {Event} event generated object with event data\n     */\n    load: function ( event ) {\n        //var path;\n\n        //debug.event(event);\n        //console.log(event);\n\n        // time mark\n        //app.data.time.load = event.timeStamp;\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // global handler\n        // there are some listeners\n        if ( app.events[event.type] ) {\n            // notify listeners\n            app.emit(event.type, event);\n        }\n\n        // local handler on each page\n        /*router.pages.forEach(function forEachPages ( page ) {\n         debug.log('component ' + page.constructor.name + '.' + page.id + ' load', 'green');\n\n         // there are some listeners\n         if ( page.events[event.type] ) {\n         // notify listeners\n         page.emit(event.type, event);\n         }\n         });*/\n\n        // time mark\n        //app.data.time.done = +new Date();\n\n        // everything is ready\n        // and there are some listeners\n        // if ( app.events['done'] ) {\n        //     // notify listeners\n        //     app.emit('done', event);\n        // }\n    },\n\n    /**\n     * The unload event is fired when the document or a child resource is being unloaded.\n     *\n     * Control flow:\n     *   1. Each page handler.\n     *   2. Global handler.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/unload\n     *\n     * @param {Event} event generated object with event data\n     */\n    unload: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // global handler\n        // there are some listeners\n        if ( app.events[event.type] ) {\n            // notify listeners\n            app.emit(event.type, event);\n        }\n\n        // local handler on each page\n        /*router.pages.forEach(function forEachPages ( page ) {\n         debug.log('component ' + page.constructor.name + '.' + page.id + ' unload', 'red');\n\n         // there are some listeners\n         if ( page.events[event.type] ) {\n         // notify listeners\n         page.emit(event.type, event);\n         }\n         });*/\n    },\n\n    /**\n     * The error event is fired when a resource failed to load.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/error\n     *\n     * @param {Event} event generated object with event data\n     */\n    error: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n        //debug.fail('app event: ' + event.message, event, {tags: [event.type, 'event']});\n        console.error('app event: ' + event.message, event);\n    },\n\n    /**\n     * The keydown event is fired when a key is pressed down.\n     * Set event.stop to true in order to prevent bubbling.\n     *\n     * Control flow:\n     *   1. Current active component on the active page.\n     *   2. Current active page itself.\n     *   3. Application.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/keydown\n     *\n     * @param {Event} event generated object with event data\n     */\n    keydown: function ( event ) {\n        var page = app.activePage,\n            eventLocal = {\n                code: event.keyCode,\n                stop: false\n            },\n            activeComponent;\n\n        if ( DEVELOP ) {\n            if ( !page ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        // filter phantoms\n        //if ( event.keyCode === 0 ) { return; }\n\n        // combined key code\n        //event.code = event.keyCode;\n\n        // apply key modifiers\n        if ( event.ctrlKey )  { eventLocal.code += 'c'; }\n        if ( event.altKey )   { eventLocal.code += 'a'; }\n        if ( event.shiftKey ) { eventLocal.code += 's'; }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type + ' - ' + eventLocal.code, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type + ' - ' + eventLocal.code, event);\n\n        // page.activeComponent can be set to null in event handles\n        activeComponent = page.activeComponent;\n\n        // current component handler\n        if ( activeComponent && activeComponent !== page ) {\n            // component is available and not page itself\n            if ( activeComponent.events[event.type] ) {\n                // there are some listeners\n                activeComponent.emit(event.type, eventLocal, event);\n            }\n\n            // todo: bubble event recursively\n            // bubbling\n            if (\n                !eventLocal.stop &&\n                activeComponent.propagate &&\n                activeComponent.parent &&\n                activeComponent.parent.events[event.type]\n            ) {\n                activeComponent.parent.emit(event.type, eventLocal, event);\n            }\n        }\n\n        // page handler\n        if ( !eventLocal.stop ) {\n            // not prevented\n            if ( page.events[event.type] ) {\n                // there are some listeners\n                page.emit(event.type, eventLocal, event);\n            }\n\n            // global app handler\n            if ( !event.stop ) {\n                // not prevented\n                if ( app.events[event.type] ) {\n                    // there are some listeners\n                    app.emit(event.type, eventLocal, event);\n                }\n            }\n        }\n\n        //// suppress non-printable keys in stb device (not in your browser)\n        //if ( app.data.host && keyCodes[event.code] ) {\n        //    event.preventDefault();\n        //}\n    },\n\n    /**\n     * The keypress event is fired when press a printable character.\n     * Delivers the event only to activeComponent at active page.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/keypress\n     *\n     * @param {Event} event generated object with event data\n     * @param {string} event.char entered character\n     */\n    keypress: function ( event ) {\n        var page = app.activePage;\n\n        if ( DEVELOP ) {\n            if ( page === null || page === undefined ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type + ' - ' + event.key, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type + ' - ' + event.key, event);\n\n        // current component handler\n        if ( page.activeComponent && page.activeComponent !== page ) {\n            // component is available and not page itself\n            if ( page.activeComponent.events[event.type] ) {\n                // there are some listeners\n                page.activeComponent.emit(event.type, event);\n            }\n        }\n    },\n\n    /**\n     * The click event is fired when a pointing device button (usually a mouse button) is pressed and released on a single element.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/click\n     *\n     * @param {Event} event generated object with event data\n     */\n    /*click: function ( event ) {\n     //debug.event(event);\n     //console.log(event);\n     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n     },*/\n\n    /**\n     * The contextmenu event is fired when the right button of the mouse is clicked (before the context menu is displayed),\n     * or when the context menu key is pressed (in which case the context menu is displayed at the bottom left of the focused\n     * element, unless the element is a tree, in which case the context menu is displayed at the bottom left of the current row).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/contextmenu\n     *\n     * @param {Event} event generated object with event data\n     */\n    // contextmenu: function ( event ) {\n    //     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n    //\n    //     if ( !DEVELOP ) {\n    //         // disable right click in release mode\n    //         event.preventDefault();\n    //     }\n    // },\n\n    /*contextmenu: function ( event ) {\n     //var kbEvent = {}; //Object.create(document.createEvent('KeyboardEvent'));\n\n     //debug.event(event);\n     //console.log(event);\n     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n\n     //kbEvent.type    = 'keydown';\n     //kbEvent.keyCode = 8;\n\n     //debug.log(kbEvent.type);\n\n     //globalEventListenerKeydown(kbEvent);\n     //var event = document.createEvent('KeyboardEvent');\n     //event.initEvent('keydown', true, true);\n\n     //document.dispatchEvent(kbEvent);\n\n     if ( !DEVELOP ) {\n     // disable right click in release mode\n     event.preventDefault();\n     }\n     },*/\n\n    /**\n     * The wheel event is fired when a wheel button of a pointing device (usually a mouse) is rotated.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel\n     *\n     * @param {Event} event generated object with event data\n     */\n    mousewheel: function ( event ) {\n        var page = app.activePage;\n\n        if ( DEVELOP ) {\n            if ( page === null || page === undefined ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // current component handler\n        if ( page.activeComponent && page.activeComponent !== page ) {\n            // component is available and not page itself\n            if ( page.activeComponent.events[event.type] ) {\n                // there are some listeners\n                page.activeComponent.emit(event.type, event);\n            }\n        }\n\n        // page handler\n        if ( !event.stop ) {\n            // not prevented\n            if ( page.events[event.type] ) {\n                // there are some listeners\n                page.emit(event.type, event);\n            }\n        }\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint-disable */\n\n'use strict';\n\n\nif ( !document.documentElement.classList ) {\n    var prototype = Array.prototype,\n        indexOf   = prototype.indexOf,\n        slice     = prototype.slice,\n        push      = prototype.push,\n        splice    = prototype.splice,\n        join      = prototype.join;\n\n    window.DOMTokenList = function ( el ) {\n        this._element = el;\n        if (el.className !== this._classCache) {\n            this._classCache = el.className;\n            if (!this._classCache) { return; }\n            var classes = this._classCache.replace(/^\\s+|\\s+$/g,'').split(/\\s+/),\n                i;\n            for (i = 0; i < classes.length; i++) {\n                push.call(this, classes[i]);\n            }\n        }\n    };\n\n    window.DOMTokenList.prototype = {\n        add: function ( token ) {\n            if(this.contains(token)) { return; }\n            push.call(this, token);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        contains: function ( token ) {\n            return indexOf.call(this, token) !== -1;\n        },\n\n        item: function ( index ) {\n            return this[index] || null;\n        },\n\n        remove: function ( token ) {\n            var i = indexOf.call(this, token);\n            if (i === -1) {\n                return;\n            }\n            splice.call(this, i, 1);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        toString: function () {\n            return join.call(this, ' ');\n        },\n\n        toggle: function ( token ) {\n            if (!this.contains(token)) {\n                this.add(token);\n            } else {\n                this.remove(token);\n            }\n            return this.contains(token);\n        }\n    };\n\n    Object.defineProperty(Element.prototype, 'classList', {\n        get: function () {\n            return new window.DOMTokenList(this);\n        }\n    });\n}\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app     = require('spa-app/lib/core'),\n    metrics = require('app:metrics');\n\n\n// global link\napp.metrics = metrics[app.query.screenHeight] || metrics[screen.height] || metrics[720];\n\n// calculate and extend\napp.metrics.availHeight = app.metrics.height - (app.metrics.availTop  + app.metrics.availBottom);\napp.metrics.availWidth  = app.metrics.width  - (app.metrics.availLeft + app.metrics.availRight);\n\n\n// public\n//module.exports = app;\n","/**\n * Application geometry options.\n * Automatically loaded on application initialization and available as app.metrics.\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    480: {\n        // screen base dimension\n        height: 480,\n        width:  720,\n        // safe zone margins\n        availTop:    24,\n        availBottom: 24,\n        availRight:  32,\n        availLeft:   48\n        // project-specific vars\n        // put here ...\n    },\n\n    576: {\n        // screen base dimension\n        height: 576,\n        width:  720,\n        // safe zone margins\n        availTop:    24,\n        availBottom: 24,\n        availRight:  26,\n        availLeft:   54\n        // project-specific vars\n        // put here ...\n    },\n\n    720: {\n        // screen base dimension\n        height: 720,\n        width:  1280,\n        // safe zone margins\n        availTop:    30,\n        availBottom: 30,\n        availRight:  40,\n        availLeft:   40\n        // project-specific vars\n        // put here ...\n    },\n\n    1080: {\n        // screen base dimension\n        height: 1080,\n        width:  1920,\n        // safe zone margins\n        availTop:    45,\n        availBottom: 45,\n        availRight:  60,\n        availLeft:   60\n        // project-specific vars\n        // put here ...\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('spa-app/lib/core');\n\n\n/**\n * Device media events.\n *\n * @event module:stb/app#media\n * @type object\n * @property {number} code of event\n */\n\n\n/**\n * Event on messages from a window.\n *\n * @event module:stb/app#message\n * @type object\n * @property {boolean} broadcast message flag\n * @property {string} message received from window\n * @property {object} data received from window\n */\n\n\n// public\nmodule.exports = {\n    /**\n     * The player reached the end of the media content or detected a discontinuity of the stream.\n     */\n    EVENT_END_OF_FILE: 1,\n\n    /**\n     * Information on audio and video tracks of the media content is received. It's now possible to call gSTB.GetAudioPIDs etc.\n     */\n    EVENT_GET_MEDIA_INFO: 2,\n\n    /**\n     * Video and/or audio playback has begun.\n     */\n    EVENT_PLAYBACK_BEGIN: 4,\n\n    /**\n     * Error when opening the content: content not found on the server or connection with the server was rejected\n     */\n    EVENT_CONTENT_ERROR: 5,\n\n    /**\n     * Detected DualMono AC-3 sound\n     */\n    EVENT_DUAL_MONO_DETECT: 6,\n\n    /**\n     * The decoder has received info about the content and started to play. It's now possible to call gSTB.GetVideoInfo\n     */\n    EVENT_INFO_GET: 7,\n\n    /**\n     * Error occurred while loading external subtitles\n     */\n    EVENT_SUBTITLE_LOAD_ERROR: 8,\n\n    /**\n     * Found new teletext subtitles in stream\n     */\n    EVENT_SUBTITLE_FIND: 9,\n\n    /**\n     * HDMI device has been connected\n     */\n    EVENT_HDMI_CONNECT: 32,\n\n    /**\n     * HDMI device has been disconnected\n     */\n    EVENT_HDMI_DISCONNECT: 33,\n\n    /**\n     * Recording task has been finished successfully. See appendix 13. JavaScript API for PVR subsystem\n     */\n    EVENT_RECORD_FINISH_SUCCESSFUL: 34,\n\n    /**\n     * Recording task has been finished with error. See appendix 13. JavaScript API for PVR subsystem\n     */\n    EVENT_RECORD_FINISH_ERROR: 35,\n\n    /**\n     * Scanning DVB Channel in progress\n     */\n    EVENT_DVB_SCANING: 40,\n\n    /**\n     * Scanning DVB Channel found\n     */\n    EVENT_DVB_FOUND: 41,\n\n    /**\n     * DVB Channel EPG update\n     */\n    EVENT_DVB_CHANNEL_EPG_UPDATE: 42,\n\n    /**\n     * DVB antenna power off\n     */\n    EVENT_DVB_ANTENNA_OFF: 43,\n\n\n    /**\n     * Fires stb device media events.\n     *\n     * @param {number} event code\n     * @param {string} info associated data in **JSON** format\n     */\n    onEvent: function ( event, info ) {\n        // there are some listeners\n        if ( app.events['media'] ) {\n            // additional data\n            if ( info ) {\n                try {\n                    info = JSON.parse(info);\n                } catch ( error ) {\n                    debug.fail('stbEvent JSON parse', error);\n                }\n            }\n\n            // notify listeners\n            app.emit('media', {code: parseInt(event, 10), info: info});\n        }\n    },\n\n\n    /**\n     * Fires event on broadcast messages from a window.\n     *\n     * @param {number} windowId that sent message\n     * @param {string} message text\n     * @param {Object} data in sent message\n     * @fires module:/stb/app#message\n     */\n    onBroadcastMessage: function ( windowId, message, data ) {\n        if ( app.events['message'] ) {\n            // notify listeners\n            app.emit('message', {\n                broadcast: true,\n                windowId: windowId,\n                message: message,\n                data: data\n            });\n        }\n    },\n\n\n    /**\n     * Fires event on messages from a window.\n     *\n     * @param {number} windowId that sent message\n     * @param {string} message text\n     * @param {Object} data in sent message\n     * @fires module:/stb/app#message\n     */\n    onMessage: function ( windowId, message, data ) {\n        if ( app.events['message'] ) {\n            // notify listeners\n            app.emit('message', {\n                broadcast: false,\n                windowId: windowId,\n                message: message,\n                data: data\n            });\n        }\n    },\n\n\n    /**\n     * Event on device mount state.\n     *\n     * @event module:stb/app#mount\n     * @type object\n     * @property {boolean} state of mount device\n     */\n\n\n    /**\n     * Event on callback on internet browser link clicked.\n     *\n     * @event module:stb/app#media:available\n     */\n\n\n    /**\n     * Fires event of callback on internet browser link clicked to ask user what to do with link: play or download.\n     *\n     * @param {string} mime file type\n     * @param {string} url resource link\n     *\n     * @fires module:/stb/app#media:available\n     */\n    onMediaAvailable: function ( mime, url ) {\n        if ( app.events['media:available'] ) {\n            // notify listeners\n            app.emit('media:available', {mime: mime, url: url});\n        }\n    },\n\n\n    /**\n     * Event on internet connection state.\n     *\n     * @event module:stb/app#internet:state\n     * @type object\n     * @property {boolean} state of internet connection\n     */\n\n\n    /**\n     * Fires new internet connection state event.\n     *\n     * @param {boolean} state of internet connection\n     * @fires module:/stb/app#internet:state\n     */\n    // onNetworkStateChange: function ( state ) {\n    //     if ( app.events['internet:state'] ) {\n    //         // notify listeners\n    //         app.emit('internet:state', {state: state});\n    //     }\n    // },\n\n\n    /**\n     * Event on document loading progress changes.\n     *\n     * @event module:stb/app#browser:progress\n     * @type object\n     * @property {number} progress of document loading\n     */\n\n\n    /**\n     * Fires document loading progress changes event.\n     *\n     * @param {number} progress of document loading\n     * fires module:/stb/app#browser:progress\n     */\n    onWebBrowserProgress: function ( progress ) {\n        if ( app.events['browser:progress'] ) {\n            // notify listeners\n            app.emit('browser:progress', {progress: progress});\n        }\n    },\n\n\n    /**\n     * Event on browser web window activation event.\n     *\n     * @event module:stb/app#window:focus\n     */\n\n\n    /**\n     * Fires browser web window activation event.\n     *\n     * fires module:/stb/app#window:focus\n     */\n    onWindowActivated: function () {\n        if ( app.events['window:focus'] ) {\n            // notify listeners\n            app.emit('window:focus');\n        }\n    }\n};\n","/**\n * Core browser implementation.\n *\n * @author Stanislav Kalashnik <sk@infomir.eu>\n * @author Yaroslav Surilov <y.surilov@infomir.com>\n */\n\n'use strict';\n\nvar app                 = require('stb-app'),\n    keys                = require('stb-keys'),\n    messages            = require('../../../../plugin-browser/src/js/messages'),\n    messagesToEngine    = messages.toEngine,\n    messagesToApp       = messages.toApp,\n    tools               = require('./tools'),\n    config              = require('../config'),\n    core                = {},\n    screenBoundsRegular = {\n        x: app.metrics.availLeft,\n        y: app.metrics.availTop * 3,\n        w: app.metrics.width - app.metrics.availLeft - app.metrics.availRight,\n        h: app.metrics.height - (app.metrics.availTop * 3) - (app.metrics.availBottom * 3)\n    },\n    screenBoundsFullscreen = {\n        x: app.metrics.availLeft,\n        y: app.metrics.availTop,\n        w: app.metrics.width - app.metrics.availLeft - app.metrics.availRight,\n        h: app.metrics.height - app.metrics.availTop - app.metrics.availBottom\n    },\n    loadProgress = 0;\n\n\ncore.storage               = {};\ncore.MODE_MENU             = 1;\ncore.MODE_BROWSER          = 2;\n// active core state, starting mode is browser\ncore.mode                  = core.MODE_BROWSER;\ncore.webWindowHandle       = null;\ncore.webWindowIsFullScreen = false;\n// 2D navigation\ncore.webWindowIsVMouse     = false;\ncore.webWindowZoom         = 100;\ncore.webWindowUrl          = null;\ncore.resourcesLoadState    = {\n    isColdStart:          true,\n    isLoadStartTriggered: false,\n    browseIntent:         false\n};\n\n\n/** Activate user preferences. */\nfunction activateUserPrefs () {\n    core.actions.frame(core.webWindowIsFullScreen);\n    core.actions.f2(core.webWindowIsVMouse);\n    core.actions.scale(core.webWindowZoom);\n}\n\n\n/**\n * Receive/route/handle data from plugin.\n *\n * @param {number} from - sender's ID\n * @param {string} message - message\n * @param {string} data - transmitted data\n */\nstbEvent.onMessage = function ( from, message, data ) {\n    switch ( message ) {\n        case messagesToEngine.userSettings:\n            core.storage = JSON.parse(data);\n\n            core.webWindowZoom = core.storage.settings.scale;\n            core.webWindowIsFullScreen = core.storage.settings.isFullScreen;\n            core.webWindowIsVMouse     = core.storage.settings.isVirtualMouse;\n\n            if ( core.resourcesLoadState.isColdStart ) {\n                core.resourcesLoadState.isColdStart = false;\n                activateUserPrefs();\n            }\n\n            break;\n        case messagesToEngine.reload:\n            core.actions.f1();\n            break;\n        case messagesToEngine.stopLoading:\n            core.actions.stop();\n            break;\n        case messagesToEngine.navigateForward:\n            core.actions.goForward();\n            break;\n        case messagesToEngine.navigateBackward:\n            core.actions.goBack();\n            break;\n        case messagesToEngine.userTextInput:\n            core.webWindowShow(true);\n            core.loadUrl(data);\n            break;\n        case messagesToEngine.showWebWindow:\n            core.mode = core.MODE_BROWSER;\n            core.webWindowShow(true);\n\n            if ( data ) {\n                core.loadUrl(data);\n            } else if ( loadProgress < 100 ) {\n                core.loadUrl(core.webWindowUrl);\n            }\n\n            break;\n        case messagesToEngine.hideWebWindow:\n            app.emit('keydown', {code: keys.menu});\n            break;\n        case messagesToEngine.openVirtualKeyboard:\n            gSTB.IsVirtualKeyboardActive() ? gSTB.HideVirtualKeyboard() : gSTB.ShowVirtualKeyboard(); // eslint-disable-line\n            break;\n        case messagesToEngine.search:\n            app.emit('keydown', {code: keys.f4});\n            break;\n        case messagesToEngine.setFullScreen:\n            app.emit('keydown', {code: keys.frame});\n            break;\n        case messagesToEngine.intentUrl:\n            core.resourcesLoadState.browseIntent = true;\n            core.webWindowShow(true);\n            tools.validateUrl(data) && core.loadUrl(data);\n            break;\n    }\n};\n\nstbEvent.bind('load.start', function ( url ) {\n    if ( core.webWindowUrl !== url ) {\n        stbWebWindow.messageSend(\n            config.portalWindowId,\n            messagesToApp.changeUrl,\n            JSON.stringify({\n                url:   url,\n                title: stbWindowMgr.getCurrentTitle()\n            })\n        );\n        core.webWindowUrl = url;\n    }\n\n    stbWebWindow.messageSend(config.portalWindowId, messagesToApp.unsetFavicon);\n    core.resourcesLoadState.browseIntent && stbWebWindow.messageSend(config.portalWindowId, messagesToApp.reload, core.webWindowUrl);\n});\n\nstbEvent.bind('load.finish', function ( status ) {\n    stbWebWindow.messageSend(config.portalWindowId, messagesToApp.setFavicon);\n\n    // on HostNotFoundError\n    if ( status === 3 ) {\n        // exit full-screen mode if any\n        core.setWebWindowFullScreen(false);\n        stbWebWindow.messageSend(config.portalWindowId, messagesToApp.notification, 'This webpage is not available');\n    }\n});\n\n// global event on page loading change\nstbEvent.onWebBrowserProgress = function ( progress, status ) {\n    if ( !core.resourcesLoadState.isLoadStartTriggered ) {\n        stbEvent.trigger('load.start', stbWindowMgr.getCurrWebUrl());\n        core.resourcesLoadState.isLoadStartTriggered = true;\n    }\n\n    stbWebWindow.messageSend(config.portalWindowId, messagesToApp.setLoadProgress, '' + progress);\n    loadProgress = progress;\n\n    if ( progress === 100 ) {\n        stbEvent.trigger('load.finish', status);\n        core.resourcesLoadState.isLoadStartTriggered = false;\n    }\n};\n\nstbEvent.onMediaAvailable = function ( itemMime, itemLink ) {\n    core.mode = core.MODE_MENU;\n    stbWindowMgr.windowHide(core.webWindowHandle);\n    stbWebWindow.messageSend(config.portalWindowId, messagesToApp.openMenu);\n\n    stbWebWindow.messageSend(\n        config.portalWindowId,\n        messagesToApp.mediaAvailable,\n        JSON.stringify({\n            itemMime: itemMime,\n            itemLink: itemLink,\n            itemName: require('cjs-uri').parse(itemLink).file\n        })\n    );\n};\n\n// global event on switch from full-screen mode\nstbEvent.onWebBrowserFullScreenExit = function () {\n    core.actions.frame();\n};\n\n\n/**\n * Load particular URL in Wild Web window.\n *\n * @param {string} url - URL to load\n */\ncore.loadUrl = function ( url ) {\n    if ( core.webWindowHandle ) {\n        stbWindowMgr.LoadUrl(url);\n        activateUserPrefs();\n    } else {\n        core.webWindowHandle = stbWindowMgr.initWebWindow(url);\n        stbWindowMgr.resizeWebWindow(screenBoundsRegular.x, screenBoundsRegular.y, screenBoundsRegular.w, screenBoundsRegular.h);\n        stbWindowMgr.raiseWebWindow();\n        stbWebWindow.messageSend(config.portalWindowId, messagesToApp.ready);\n    }\n};\n\n\n/**\n * Global navigation key actions.\n *\n * @namespace\n */\ncore.actions = {\n    // reload document\n    f1: function () {\n        stbWebWindow.ReloadDocument();\n    },\n    /**\n     * Use virtual mouse.\n     *\n     * @param {boolean} state - state to set\n     */\n    f2: function ( state ) {\n        if ( state === undefined ) {\n            core.webWindowIsVMouse = !core.webWindowIsVMouse;\n            stbWindowMgr.setVirtualMouseMode(core.webWindowIsVMouse);\n        } else {\n            stbWindowMgr.setVirtualMouseMode(state);\n        }\n    },\n    // bookmarks\n    f3: function () {\n        // exit full-screen mode if any\n        core.setWebWindowFullScreen(false);\n        stbWebWindow.messageSend(\n            config.portalWindowId,\n            messagesToApp.favoritesState,\n            JSON.stringify({\n                url:   core.webWindowUrl,\n                title: stbWindowMgr.getCurrentTitle()\n            })\n        );\n    },\n    // init magcore keyboard\n    f4: function () {\n        // exit full screen if necessary\n        core.setWebWindowFullScreen(false);\n        stbWindowMgr.windowHide(core.webWindowHandle);\n        stbWebWindow.messageSend(config.portalWindowId, messagesToApp.search);\n    },\n    /**\n     * Set full screen state.\n     *\n     * @param {boolean} state - state to set\n     */\n    frame: function ( state ) {\n        if ( state === undefined ) {\n            core.setWebWindowFullScreen(!core.webWindowIsFullScreen);\n        } else {\n            core.webWindowIsFullScreen = !state;\n            core.setWebWindowFullScreen(state);\n        }\n    },\n    // step back in browsing history\n    goBack: function () {\n        stbWebWindow.NavigateBack();\n    },\n    // step forward in browsing history\n    goForward: function () {\n        stbWebWindow.NavigateForward();\n    },\n    // stop loading web document\n    stop: function () {\n        stbWebWindow.StopLoading();\n    },\n    scale: function ( ratio ) {\n        stbWebWindow.SetZoomFactor(ratio);\n    }\n};\n\n\ncore.webWindowShow = function () {\n    if ( core.webWindowHandle !== null ) {\n        gSTB.EnableVKButton(true);\n        stbWindowMgr.windowShow(core.webWindowHandle);\n        activateUserPrefs();\n    }\n};\n\n\ncore.setWebWindowFullScreen = function ( state ) {\n    var geometry;\n\n    // web window was initialized\n    if ( core.webWindowHandle !== null ) {\n        // new and old states are different\n        if ( core.webWindowIsFullScreen !== state ) {\n            geometry = state ? screenBoundsFullscreen : screenBoundsRegular;\n            core.webWindowIsFullScreen = state;\n            stbWindowMgr.resizeWebWindow(geometry.x, geometry.y, geometry.w, geometry.h);\n            stbWebWindow.SetFullScreenMode(state);\n        }\n    }\n};\n\n\nmodule.exports = core;\n","/**\n * Global list of non-printable control key codes.\n *\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    backspace: 8,\n    tab:       9,\n    enter:     13,\n    escape:    27,\n    space:     32,\n    pageUp:    33,\n    pageDown:  34,\n    end:       35,\n    home:      36,\n    left:      37,\n    up:        38,\n    right:     39,\n    down:      40,\n    insert:    45,\n    // not \"delete\" because of old browsers issue\n    del:       46\n};\n"],"sourceRoot":""}