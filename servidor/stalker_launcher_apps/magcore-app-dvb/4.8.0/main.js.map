{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/stb-keys/index.js","webpack:///./node_modules/spa-app/lib/core.js","webpack:///./node_modules/spa-component/index.js","webpack:///./node_modules/stb-component/index.js","webpack:///./node_modules/mag-component-layout-list/index.js","webpack:///./node_modules/mag-component-layout/index.js","webpack:///./node_modules/mag-app/index.js","webpack:///./node_modules/stb-component-page/index.js","webpack:///./node_modules/mag-component-footer/index.js","webpack:///./node_modules/mag-component-modal/index.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./node_modules/spa-dom/index.js","webpack:///./node_modules/stb-component-scrollbar/index.js","webpack:///./node_modules/stb-app/lib/css.js","webpack:///./node_modules/spa-keys/index.js","webpack:///./node_modules/mag-component-list/index.js","webpack:///./src/js/modules/epg-page/metrics.js","webpack:///./node_modules/mag-component-panel-set/index.js","webpack:///./node_modules/mag-component-panel/index.js","webpack:///./node_modules/mag-component-radio-list/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/mag-app/lib/main.js","webpack:///./node_modules/cjs-query/index.js","webpack:///./src/js/config.js","webpack:///./node_modules/spa-app/lib/events.js","webpack:///./node_modules/stb-shim-classlist/index.js","webpack:///./node_modules/stb-app/lib/metrics.js","webpack:///./src/js/metrics.js","webpack:///./node_modules/mag-app/lib/css.js","webpack:///./node_modules/spa-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/modules/find-index-polyfill.js","webpack:///./src/js/modules/epg-page/index.js","webpack:///./node_modules/spa-component-page/index.js","webpack:///./node_modules/stb-component-modal/index.js","webpack:///./node_modules/spa-component-modal/index.js","webpack:///./node_modules/spa-component-scrollbar/index.js","webpack:///./src/js/modules/epg-page/epg.grid.js","webpack:///./src/js/pages/channels.js","webpack:///./node_modules/cjs-format/index.js","webpack:///./src/js/modules/utils.js","webpack:///./src/js/modules/modal.icons.js","webpack:///./src/js/modules/title.widget.js","webpack:///./src/js/modules/channel.list.item.render.js","webpack:///./src/js/pages/scan.options.js","webpack:///./node_modules/stb-component-button/index.js","webpack:///./node_modules/spa-component-button/index.js","webpack:///./src/js/pages/scanning.js","webpack:///./node_modules/spa-component-progress-bar/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","keys","back","backspace","channelNext","tab","channelPrev","ok","enter","exit","escape","volumeUp","volumeDown","f1","f2","f3","f4","refresh","frame","phone","set","tv","menu","app","rewind","forward","audio","standby","keyboard","usbMounted","usbUnmounted","playPause","play","pause","stop","power","record","info","mute","digit0","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","Emitter","parse","query","document","location","search","substring","config","activePage","route","pageTo","data","page","pageFrom","active","id","$node","classList","remove","events","emit","add","showPage","this","from","to","counter","Component","self","visible","focusable","$body","parent","children","propagate","createElement","className","hide","defaultEvents","forEach","eventName","addListener","apply","addEventListener","event","focus","stopPropagation","constructor","child","index","arguments","length","push","parentNode","appendChild","item","activeComponent","blur","splice","indexOf","removeChild","activeItem","show","callback","setTimeout","List","Layout","LayoutList","handlers","links","$noData","undefined","fixedData","$item","layout","inner","focusIndex","focusItem","renderItemDefault","layoutConfig","currentNode","currentData","ready","items","childNodes","innerText","firstChild","$parentItem","click","setData","init","$wrap","noData","innerHTML","Element","renderItem","code","right","left","$wrapper","HTMLElement","wrap","normalize","componentClickHandler","textContent","classes","Footer","currentTab","tabs","codes","$table","insertRow","rows","insertCell","$left","cells","lastChild","$right","currTab","action","$tab","$tabChildren","addClick","ind","middle","disabled","style","visibility","onclick","title","StbComponentModal","Modal","$overlay","onkeydown","keydown","$header","$text","icon","$icon","once","onceWrapper","removeListener","addListeners","callbacks","filter","fn","Array","slice","dom","tag","tagName","attrList","content","node","createTextNode","fragment","createDocumentFragment","tagDst","Node","nodes","count","clear","link","rel","href","metrics","height","head","space","pageUp","pageDown","end","home","up","down","insert","del","$focusItem","viewIndex","type","TYPE_VERTICAL","size","cycle","scroll","provider","TYPE_HORIZONTAL","mousewheel","wheelDeltaY","move","wheelDeltaX","idx","currSize","onClick","render","blocked","error","realSize","maxCount","viewSize","pos","blurItem","renderView","itemData","prevIndex","currIndex","mark","scrollTo","direction","force","previousSibling","nextSibling","$prev","$curr","markItem","state","480","epgGrid","scheduleWidth","timeStep","countOfSteps","timeLineMargin","itemHeight","timeLineTop","576","720","1080","screen","PanelSet","keydownHandler","panels","main","Panel","$shadow","isArray","$title","classIcon","classIconActive","RadioList","classChecked","checkedData","checkedIndex","previousCheckedData","checkIndex","defaultCheckedIndex","defaultFocusIndex","resetData","clearChecked","table","tr","td","check","checkBox","getItemNodeByIndex","gettext","intents","osdInput","osdTv","core","plugins","dvb","load","environment","language","epg","getElementById","apiProvider","pages","intent","scanOptions","scanning","window","getCoreInstance","platform","body","setAttribute","contextmenu","preventDefault","split","part","decodeURIComponent","stringify","params","encodeURIComponent","join","DOMContentLoaded","unload","eventLocal","keyCode","ctrlKey","altKey","shiftKey","keypress","documentElement","DOMTokenList","el","_element","_classCache","replace","token","contains","toString","toggle","screenHeight","availHeight","availTop","availBottom","availWidth","width","availLeft","availRight","linkCSS","theme","path","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","JSON","responseText","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval","findIndex","predicate","TypeError","list","thisArg","footer","actionModal","actionList","headerLayout","contentLayout","ICONS","Page","ModalMessage","Scroll","EpgGrid","prepareChannels","channel","schedule","censored","$logo","logo","backgroundImage","backend","host","genre","number","archive","listIndex","sendRecordEpgIntent","epgLastFocused","uri","url","epgName","startTime","start","time","endTime","pvr","server","local","local_pvr","EpgPage","startCheck","stopCheck","click:item","epgItems","epgFocus","channelIndex","focus:item","label","realtime","goToRealTime","$timeBlock","$programDescription","$description","$programName","$current","$timeLine","$timeline","setChannels","updateEpg","ScrollBar","thumbRect","trackRect","$thumb","getBoundingClientRect","marginTop","marginLeft","curr","prev","fullMonthNames","fullDaysOfWeek","day","scheduleBlock","step","timers","internal","epgMode","epgFocusTime","moveEpg","pressOk","domLinks","$number","$archiveIcon","$lockIcon","$archiveLine","fillItem","subPrev","subNext","onFocus","repositionTimeLine","clearTimeout","focusEpg","focused","onFocusDebounceTimeout","onOverflow","checkingTime","clearInterval","$epgItem","before","accessControl","Math","floor","checkCurrent","Date","now","checkData","epgItem","ceil","display","setCurrentProgram","description","newTime","getTime","epgModeChange","getStartTime","initTimeBlock","setInterval","last","first","dayName","min","hour","month","ms","dateText","getDay","getMinutes","getHours","getMonth","getDate","setTime","delta","sec","date","childrenLength","dataLength","channelList","channels","request","abort","getChannelsEpg","menuItems","mainSet","programList","menuList","leftPanel","channelPanel","epgPanel","categoryList","sortList","channelActionModal","epgMenu","actionModalList","exitModal","resetModal","format","utils","scrollbars","iconList","appUIPanels","keyblock","KEYBLOCK_REVERT_TIMOUT","keyblockRevertTimeout","titleWidget","favorite","byName","lastActiveState","currentPlayIndex","current","currentIndex","epgTimeout","footerInitDelay","epgUpdateTimeout","lastChannelTimeout","channelFooterTimeout","channelListEpgTimeout","channelListEpgInterval","$channelsCount","$channelsCountWrapper","$nowDate","$noEpg","CURRENT_EPG_UPDATE_INTERVAL","antennaEnable","antennaPower","CHANNELS_UPDATE_NOTIFICATION_TIMEOUT","NEED_SILENCE","LAST_CHANNEL_TIMEOUT","closeOpenedIntents","close","titleWrap","result","currentEpg","concat","htmlInstance","realValue","local_timeshift","updateChannelList","getChannels","getEpg","renderEpgList","nextChannelCallback","skipCensored","showOsd","osd","setChannel","prevChannelCallback","sendRecordIntent","foreground","sendOsdInputIntent","startCode","osdState","compareState","startChar","done","Number","silent","initFooterOnEpgSelect","notify","timeout","sendEpgPlayIntent","epgObject","epgIndex","getLink","epgData","nextHandler","prevHandler","lastIntent","mime","solution","resource","persistent","mediaId","exitWithConfirm","next","nextChannel","prevChannel","manual","onPip","notifyError","nowTime","updateFooterLater","showEpgMenu","initFooterOnChannelSelect","initData","renderActionModal","toggleFavorite","renderData","makeItem","deleteChannelsCallback","updateRender","addChannelsCallback","fullUpdateChannelsCallback","applicationState","updateChannelsCallback","newIndex","newFocusIndex","focusId","updateChannelListEpg","update","channelArray","prog","timeIconClassName","stateClassName","systemDate","getCurrentDate","insertDays","program","favoriteActive","tvGuide","resetFilters","resetLastConfig","favoriteIco","searchItem","searchIcon","delay","sendOsdTvIntent","process","forceEpg","getUrl","channelToSend","modalMenuConfig","isSame","returnToPlayer","handler","headless","modalMenu","tvChannel","viewport","viewportConfig","extra","retryOnError","stream","volumeCorrection","playIntentEventsWrapper","newContext","sendIntent","keydownHandlerForOsdInput","String","fromCharCode","onInfoPress","onNumberPress","setLast","attach","timeshift","isSortingDifferent","buttons","receiver","onExitAppHandler","stopBackgroundCheck","destroy","text","duration","enable","source","SOURCES","INTENT","silentState","contextState","SYSTEM","select","trim","move:view","minimized","web","isHome","getComputedStyle","updateChannelsList","getLastChannelId","loaded","startBackgroundCheck","startApp","indexToPlay","findAndPlay","processAndPlay","args","match","months","setDate","timer","$favorite","$time","doTime","ch","background","hardcodeDomValue","$epg","typeItemText","symbolRateText","modulationText","frequencyStartText","frequencyEndText","bandwidthText","frequencyItemText","listData","typesList","middleList","PanelExtended","Scrollbar","Button","modalScroll","symbolRateRange","frequencyRange","scanConfig","more","currentType","symbolRate","modulation","frequencyStart","frequencyEnd","frequency","bandwidth","network","scanType","panelSet","modalScan","typeItem","modalTypes","modalSymbolRate","modalModulation","scanTypeManual","modalFrequencyStart","manualEdit","configValue","modalFrequencyEnd","modalBand","frequencyItem","modalFrequency","networkID","parseInt","autoList","manualList","manualMoreList","editManual","$name","middlePanel","reset","typeIndex","types","selectedIndex","modalActions","overflow","button","clickDuration","Progress","$frequency","findCount","$count","$channel","stopScanning","stopScan","onProgress","progress","$percents","onFound","onEnd","netId","symRate","band","startManualScan","startAutoScan","ProgressBar","max","$value","prevValue","abs"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","/**\n * Global list of non-printable control key codes.\n *\n * At the moment `keypress` and `keydown` events are emitted for the same keys (for both printable and non-printable characters).\n *\n * WARNING!!! All codes in this file (except 'volumeUp' and 'volumeDown')\n * are used in window 'keydown' handler to prevent wrong 'keypress' firings.\n * If you add new code to this file 'keypress' event with this code will never fire.\n *\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar keys = require('spa-keys');\n\n\n// extend with additional codes\nkeys.back         = keys.backspace;\nkeys.channelNext  = keys.tab;        // Tab\nkeys.channelPrev  = keys.tab + 's';  // Shift+Tab\nkeys.ok           = keys.enter;      // Enter\nkeys.exit         = keys.escape;     // Esc\nkeys.volumeUp     = 107;             // NUMPAD +\nkeys.volumeDown   = 109;             // NUMPAD -\nkeys.f1           = 112 + 'c';       // Ctrl+F1\nkeys.f2           = 113 + 'c';       // Ctrl+F2\nkeys.f3           = 114 + 'c';       // Ctrl+F3\nkeys.f4           = 115 + 'c';       // Ctrl+F4\nkeys.refresh      = 116 + 'c';       // Ctrl+F5\nkeys.frame        = 117 + 'c';       // Ctrl+F6\nkeys.phone        = 119 + 'c';       // Ctrl+F8\nkeys.set          = 120 + 'c';       // Ctrl+F9\nkeys.tv           = 121 + 'c';       // Ctrl+F10\nkeys.menu         = 122 + 'c';       // Ctrl+F11\nkeys.app          = 123 + 'c';       // Ctrl+F12\nkeys.rewind       = 66  + 'a';       // Alt+B\nkeys.forward      = 70  + 'a';       // Alt+F\nkeys.audio        = 71  + 'a';       // Alt+G\nkeys.standby      = 74  + 'a';       // Alt+J\nkeys.keyboard     = 76  + 'a';       // Alt+L\nkeys.usbMounted   = 80  + 'a';       // Alt+P\nkeys.usbUnmounted = 81  + 'a';       // Alt+Q\nkeys.playPause    = 82  + 'a';       // Alt+R\nkeys.play         = -1;              // should be redefined on some platforms\nkeys.pause        = -1;              // should be redefined on some platforms\nkeys.stop         = 83  + 'a';       // Alt+S\nkeys.power        = 85  + 'a';       // Alt+U\nkeys.record       = 87  + 'a';       // Alt+W\nkeys.info         = 89  + 'a';       // Alt+Y\nkeys.mute         = 192 + 'a';\nkeys.digit0       = 48;\nkeys.digit1       = 49;\nkeys.digit2       = 50;\nkeys.digit3       = 51;\nkeys.digit4       = 52;\nkeys.digit5       = 53;\nkeys.digit6       = 54;\nkeys.digit7       = 55;\nkeys.digit8       = 56;\nkeys.digit9       = 57;\n\n\n// public\nmodule.exports = keys;\n\n// public\n// module.exports = {\n//     getCode: function ( event ) {\n//         var code = event.keyCode;\n//\n//         // apply key modifiers\n//         if ( event.shiftKey ) { code += 1000; }\n//         if ( event.altKey )   { code += 2000; }\n//\n//         return code;\n//     },\n//\n//     codes: {\n//         back:         8,    // Backspace\n//         channelPrev:  1009, // Shift+Tab\n//         channelNext:  9,    // Tab\n//         ok:           13,   // Enter\n//         exit:         27,   // Esc\n//         pageUp:       33,\n//         pageDown:     34,\n//         end:          35,\n//         home:         36,\n//         left:         37,\n//         up:           38,\n//         right:        39,\n//         down:         40,\n//         'delete':     46,\n//         volumeUp:     107,  // NUMPAD +\n//         volumeDown:   109,  // NUMPAD -\n//         f1:           112,  // F1\n//         f2:           113,  // F2\n//         f3:           114,  // F3\n//         f4:           115,  // F4\n//         refresh:      116,  // F5\n//         frame:        117,  // F6\n//         phone:        119,  // F8\n//         set:          120,  // F9\n//         tv:           121,  // F10\n//         menu:         122,  // F11\n//         app:          123,  // F12\n//         rewind:       2066, // Alt+B\n//         forward:      2070, // Alt+F\n//         audio:        2071, // Alt+G\n//         standby:      2074, // Alt+J\n//         keyboard:     2076, // Alt+L\n//         usbMounted:   2080, // Alt+P\n//         usbUnmounted: 2081, // Alt+Q\n//         playPause:    2082, // Alt+R\n//         stop:         2083, // Alt+S\n//         power:        2085, // Alt+U\n//         record:       2087, // Alt+W\n//         info:         2089, // Alt+Y\n//         mute:         2192\n//     }\n// };\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    parse   = require('cjs-query').parse,\n    app     = new Emitter();\n\n\n/**\n * Make the given inactive/hidden page active/visible.\n * Pass some data to the page and trigger the corresponding event.\n *\n * @param {Page} page item to show\n * @param {*} [data] data to send to page\n *\n * @return {boolean} operation status\n */\nfunction showPage ( page, data ) {\n    // page available and can be hidden\n    if ( page && !page.active ) {\n        // apply visibility\n        page.$node.classList.add('active');\n        page.active = true;\n        app.activePage = page;\n\n        debug.info('show component ' + page.name + '#' + page.id, null, {\n            tags: ['show', 'component', page.name, page.id]\n        });\n        //console.log('component ' + page.name + '.' + page.id + ' show', 'green');\n\n        // there are some listeners\n        if ( page.events['show'] ) {\n            // notify listeners\n            page.emit('show', {data: data});\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n}\n\n\n/**\n * Make the given active/visible page inactive/hidden and trigger the corresponding event.\n *\n * @param {Page} page item to hide\n *\n * @return {boolean} operation status\n */\nfunction hidePage ( page ) {\n    // page available and can be hidden\n    if ( page && page.active ) {\n        // apply visibility\n        page.$node.classList.remove('active');\n        page.active  = false;\n        app.activePage = null;\n\n        debug.info('hide component ' + page.name + '#' + page.id, null, {\n            tags: ['hide', 'component', page.name, page.id]\n        });\n        //console.log('component ' + page.name + '.' + page.id + ' hide', 'grey');\n\n        // there are some listeners\n        if ( page.events['hide'] ) {\n            // notify listeners\n            page.emit('hide');\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n}\n\n\n// url request params\napp.query = parse(document.location.search.substring(1));\n\n\n// global application configuration\n// in config.js file in js root\napp.config = require('app:config');\n\n\n// the only visible page\napp.activePage = null;\n\n\n/**\n * Browse to a given page.\n * Do nothing if the link is invalid. Otherwise hide the current, show new and update the \"previous\" link.\n *\n * @param {Page} pageTo instance of the page to show\n * @param {*} [data] options to pass to the page on show\n *\n * @return {boolean} operation status\n */\napp.route = function ( pageTo, data ) {\n    var pageFrom = app.activePage;\n\n    if ( DEVELOP ) {\n        //if ( router.pages.length > 0 ) {\n        if ( !pageTo || typeof pageTo !== 'object' ) {\n            throw new Error(__filename + ': wrong pageTo type');\n        }\n        if ( !('active' in pageTo) ) {\n            throw new Error(__filename + ': missing field \"active\" in pageTo');\n        }\n        //}\n    }\n\n    // valid not already active page\n    if ( pageTo && !pageTo.active ) {\n        //debug.log('router.navigate: ' + pageTo.id, pageTo === pageFrom ? 'grey' : 'green');\n        debug.info('app route: ' + pageTo.name + '#' + pageTo.id, null, {tags: ['route', pageTo.name, pageTo.id]});\n\n        // update url\n        //location.hash = this.stringify(name, data);\n\n        // apply visibility\n        hidePage(app.activePage);\n        showPage(pageTo, data);\n\n        // there are some listeners\n        if ( this.events['route'] ) {\n            // notify listeners\n            this.emit('route', {from: pageFrom, to: pageTo});\n        }\n\n        // store\n        //this.history.push(pageTo);\n\n        return true;\n    }\n\n    //debug.warn('invalid page to route: ' + pageTo.id, null, {tags: ['route', 'page', pageTo.id]});\n    console.warn('invalid page to route: ' + pageTo.id);\n\n    // nothing was done\n    return false;\n};\n\n\n// public\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app     = require('spa-app/lib/core'),\n    Emitter = require('cjs-emitter'),\n    counter = 0;\n\n\n/**\n * Base component implementation.\n *\n * Visual element that can handle sub-components.\n * Each component has a DOM element container $node with a set of classes:\n * \"component\" and some specific component class names depending on the hierarchy, for example \"page\".\n * Each component has a unique ID given either from $node.id or from data.id. If not given will generate automatically.\n *\n * @constructor\n * @extends Emitter\n *\n * @param {Object} [config={}] init parameters\n * @param {Element} [config.id] component unique identifier (generated if not set)\n * @param {string} [config.className] space-separated list of classes for \"className\" property of this.$node\n * @param {Element} [config.$node] DOM element/fragment to be a component outer container\n * @param {Element} [config.$body] DOM element/fragment to be a component inner container (by default is the same as $node)\n * @param {Component} [config.parent] link to the parent component which has this component as a child\n * @param {Array.<Component>} [config.children=[]] list of components in this component\n * @param {Object.<string, function>} [config.events={}] list of event callbacks\n * @param {boolean} [config.visible=true] component initial visibility state flag\n * @param {boolean} [config.focusable=true] component can accept focus or not\n * @param {boolean} [config.propagate=false] allow to emit events to the parent component\n *\n * @fires module:stb/component~Component#click\n *\n * @example\n * var component = new Component({\n *     $node: document.getElementById(id),\n *     className: 'bootstrap responsive',\n *     events: {\n *         click: function () { ... }\n *     }\n * });\n * component.add( ... );\n * component.focus();\n */\nfunction Component ( config ) {\n    // current execution context\n    var self = this,\n        name;\n\n    // sanitize\n    config = config || {};\n\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( config.id && typeof config.id !== 'string' ) {\n            throw new Error(__filename + ': wrong or empty config.id');\n        }\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n        if ( config.$node && !(config.$node instanceof Element) ) {\n            throw new Error(__filename + ': wrong config.$node type');\n        }\n        if ( config.$body && !(config.$body instanceof Element) ) {\n            throw new Error(__filename + ': wrong config.$body type');\n        }\n        if ( config.parent && !(config.parent instanceof Component) ) {\n            throw new Error(__filename + ': wrong config.parent type');\n        }\n        if ( config.children && !Array.isArray(config.children) ) {\n            throw new Error(__filename + ': wrong config.children type');\n        }\n    }\n\n    /**\n     * Component visibility state flag.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.visible = true;\n\n    /**\n     * Component can accept focus or not.\n     *\n     * @type {boolean}\n     */\n    this.focusable = true;\n\n    /**\n     * DOM outer handle.\n     *\n     * @type {Element}\n     */\n    this.$node = null;\n\n    /**\n     * DOM inner handle.\n     * In simple cases is the same as $node.\n     *\n     * @type {Element}\n     */\n    this.$body = null;\n\n    /**\n     * Link to the parent component which has this component as a child.\n     *\n     * @type {Component}\n     */\n    this.parent = null;\n\n    /**\n     * List of all children components.\n     *\n     * @type {Component[]}\n     */\n    this.children = [];\n\n    /**\n     * allow to emit events to the parent component\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.propagate = !!config.propagate;\n\n    // parent constructor call\n    Emitter.call(this);\n\n    // outer handle - empty div in case nothing is given\n    this.$node = config.$node || document.createElement('div');\n\n    // inner handle - the same as outer handler in case nothing is given\n    this.$body = config.$body || this.$node;\n\n    // set CSS class names\n    //this.$node.className += ' component ' + (config.className || '');\n    // previous approach is not good as it mess with components hierarchy\n    this.$node.className = this.name + ' ' + (config.className || '');\n\n    // apply component id if given, generate otherwise\n    this.id = config.id || this.$node.id || 'cid' + counter++;\n\n    // apply hierarchy\n    if ( config.parent ) {\n        // add to parent component\n        config.parent.add(this);\n    }\n\n    // apply given visibility\n    if ( config.visible === false ) {\n        // default state is visible\n        this.hide();\n    }\n\n    // apply focus handling method\n    if ( config.focusable === false ) {\n        // can't accept focus\n        this.focusable = false;\n    }\n\n    // a descendant defined own events\n    if ( this.defaultEvents ) {\n        // sanitize\n        config.events = config.events || {};\n\n        if ( DEVELOP ) {\n            if ( typeof config.events !== 'object' ) {\n                throw new Error(__filename + ': wrong config.events type');\n            }\n            if ( typeof this.defaultEvents !== 'object' ) {\n                throw new Error(__filename + ': wrong this.defaultEvents type');\n            }\n        }\n\n        for ( name in this.defaultEvents ) {\n            // overwrite default events with user-defined\n            config.events[name] = config.events[name] || this.defaultEvents[name];\n        }\n    }\n\n    if ( config.events ) {\n        // apply all given events\n        Object.keys(config.events).forEach(function ( eventName ) {\n            self.addListener(eventName, config.events[eventName]);\n        });\n    }\n\n    // apply the given children components\n    if ( config.children ) {\n        // apply\n        this.add.apply(this, config.children);\n    }\n\n    // component activation by mouse\n    this.$node.addEventListener('click', function ( event ) {\n        // left mouse button\n        //if ( event.button === 0 ) {\n        // activate if possible\n        self.focus();\n\n        // there are some listeners\n        if ( self.events['click'] ) {\n            /**\n             * Mouse click event.\n             *\n             * @event module:stb/component~Component#click\n             *\n             * @type {Object}\n             * @property {Event} event click event data\n             */\n            self.emit('click', event);\n        }\n        //}\n\n        if ( DEVELOP ) {\n            // middle mouse button\n            if ( event.button === 1 ) {\n                //debug.inspect(self, 0);\n                debug.info('\"window.link\" or \"' + self.id + '.component\"', 'this component is now available in global scope');\n                window.link = self;\n                self.$node.classList.toggle('wired');\n            }\n        }\n\n        event.stopPropagation();\n    });\n\n    if ( DEVELOP ) {\n        // expose inner ID to global scope\n        window[self.id] = self.$node;\n\n        // expose a link\n        this.$node.component = this.$body.component = this;\n        this.$node.title = this.name + '#' + this.id + ' (outer)';\n        this.$body.title = this.name + '#' + this.id + ' (inner)';\n    }\n\n    debug.info('create component ' + this.name + '#' + this.id, null, {\n        tags: ['create', 'component', this.name, this.id]\n    });\n}\n\n\n// inheritance\nComponent.prototype = Object.create(Emitter.prototype);\nComponent.prototype.constructor = Component;\n\n\n/**\n * List of all default event callbacks.\n *\n * @type {Object.<string, function>}\n */\nComponent.prototype.defaultEvents = null;\n\n\n/**\n * Add a new component as a child.\n *\n * @param {...Component} [child] variable number of elements to append\n *\n * @files Component#add\n *\n * @example\n * panel.add(\n *     new Button( ... ),\n *     new Button( ... )\n * );\n */\nComponent.prototype.add = function ( child ) {\n    var index;\n\n    // walk through all the given elements\n    for ( index = 0; index < arguments.length; index++ ) {\n        child = arguments[index];\n\n        if ( DEVELOP ) {\n            if ( !(child instanceof Component) ) {\n                throw new Error(__filename + ': wrong child type');\n            }\n        }\n\n        // apply\n        this.children.push(child);\n        child.parent = this;\n\n        // correct DOM parent/child connection if necessary\n        if ( child.$node && child.$node.parentNode === null ) {\n            this.$body.appendChild(child.$node);\n        }\n\n        debug.info('add component ' + child.name + '#' + child.id + ' to ' + this.name + '#' + this.id, null, {\n            tags: ['add', 'component', this.name, this.id, child.name, child.id]\n        });\n\n        // there are some listeners\n        if ( this.events['add'] ) {\n            /**\n             * A child component is added.\n             *\n             * @event module:stb/component~Component#add\n             *\n             * @type {Object}\n             * @property {Component} item new component added\n             */\n            this.emit('add', {item: child});\n        }\n\n        //debug.log('component ' + this.name + '#' + this.id + ' new child: ' + child.name + '#' + child.id);\n    }\n};\n\n\n/* @todo: consider activation in future */\n///**\n// * Insert component into the specific position.\n// *\n// * @param {Component} child component instance to insert\n// * @param {number} index insertion position\n// */\n//Component.prototype.insert = function ( child, index ) {\n//    var prevIndex = this.children.indexOf(child);\n//\n//    if ( DEVELOP ) {\n//        if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n//        if ( !(child instanceof Component) ) { throw new Error(__filename + ': wrong child type'); }\n//    }\n//\n//    if ( prevIndex !== -1 ) {\n//        this.children.splice(prevIndex, 1);\n//        this.$body.removeChild(child.$node);\n//    }\n//\n//    if ( index === this.children.length ) {\n//        this.$body.appendChild(child.$node);\n//    } else {\n//        this.$body.insertBefore(child.$node, this.$body.children[index]);\n//    }\n//    this.children.splice(index, 0, child);\n//\n//    if ( !child.parent ) {\n//        child.parent = this;\n//    }\n//};\n\n\n/**\n * Delete this component and clear all associated events.\n *\n * @fires module:stb/component~Component#remove\n */\nComponent.prototype.remove = function () {\n    // really inserted somewhere\n    if ( this.parent ) {\n        if ( DEVELOP ) {\n            if ( !(this.parent instanceof Component) ) {\n                throw new Error(__filename + ': wrong this.parent type');\n            }\n        }\n\n        // active at the moment\n        if ( app.activePage.activeComponent === this ) {\n            this.blur();\n            this.parent.focus();\n        }\n        this.parent.children.splice(this.parent.children.indexOf(this), 1);\n    }\n\n    // remove all children\n    this.children.forEach(function ( child ) {\n        if ( DEVELOP ) {\n            if ( !(child instanceof Component) ) {\n                throw new Error(__filename + ': wrong child type');\n            }\n        }\n\n        child.remove();\n    });\n\n    this.$node.parentNode.removeChild(this.$node);\n\n    // there are some listeners\n    if ( this.events['remove'] ) {\n        /**\n         * Delete this component.\n         *\n         * @event module:stb/component~Component#remove\n         */\n        this.emit('remove');\n    }\n\n    // remove all listeners\n    this.events = {};\n\n    //debug.log('component ' + this.name + '#' + this.id + ' remove', 'red');\n    debug.info('remove component ' + this.name + '#' + this.id, null, {\n        tags: ['remove', 'component', this.name, this.id]\n    });\n};\n\n\n/**\n * Activate the component.\n * Notify the owner-page and apply CSS class.\n *\n * @param {Object} [data] custom data which passed into handlers\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#focus\n */\nComponent.prototype.focus = function ( data ) {\n    var activePage = app.activePage,\n        activeItem = activePage.activeComponent;\n\n    // this is a visual component on a page\n    // not already focused and can accept focus\n    if ( this.focusable && this !== activeItem ) {\n        // notify the current active component\n        if ( activeItem ) { activeItem.blur(); }\n\n        /* eslint consistent-this: 0 */\n\n        // apply\n        activePage.activeComponent = activeItem = this;\n        activeItem.$node.classList.add('focus');\n\n        //debug.log('component ' + this.name + '#' + this.id + ' focus');\n        debug.info('focus component ' + this.name + '#' + this.id, null, {\n            tags: ['focus', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( activeItem.events['focus'] ) {\n            /**\n             * Make this component focused.\n             *\n             * @event module:stb/component~Component#focus\n             */\n            activeItem.emit('focus', data);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Remove focus.\n * Change page.activeComponent and notify subscribers.\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#blur\n */\nComponent.prototype.blur = function () {\n    var activePage = app.activePage,\n        activeItem = activePage.activeComponent;\n\n    // apply visuals anyway\n    this.$node.classList.remove('focus');\n\n    // this is the active component\n    if ( this === activeItem ) {\n        activePage.activeComponent = null;\n\n        //debug.log('component ' + this.name + '#' + this.id + ' blur', 'grey');\n        debug.info('blur component ' + this.name + '#' + this.id, null, {\n            tags: ['blur', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( this.events['blur'] ) {\n            /**\n             * Remove focus from this component.\n             *\n             * @event module:stb/component~Component#blur\n             */\n            this.emit('blur');\n        }\n\n        return true;\n    }\n\n    debug.warn('component ' + this.name + '#' + this.id + ' attempt to blur without link to a page', null, {\n        tags: ['blur', 'component', this.name, this.id]\n    });\n\n    // nothing was done\n    return false;\n};\n\n\n/*function show ( self, data ) {\n    // correct style\n    self.$node.classList.remove('hidden');\n    // flag\n    self.visible = true;\n\n    debug.info('show component ' + self.name + '#' + self.id, null, {\n        tags: ['show', 'component', self.name, self.id]\n    });\n\n    // there are some listeners\n    if ( self.events['show'] ) {\n        /!**\n         * Make the component visible.\n         *\n         * @event module:stb/component~Component#show\n         *!/\n        self.emit('show', data);\n    }\n}*/\n\n/**\n * Make the component visible and notify subscribers.\n *\n * @param {Object} [data] custom data which passed into handlers\n * @param {function} [callback] user callback\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#show\n */\nComponent.prototype.show = function ( data, callback ) {\n    //var self = this;\n\n    // is it hidden\n    if ( !this.visible ) {\n        /*if ( typeof callback === 'function' ) {\n            // async call\n            setTimeout(function () {\n                show(self, data);\n                callback();\n            });\n        } else {\n            // sync call\n            show(this, data);\n        }*/\n\n        // correct style\n        this.$node.classList.remove('hidden');\n        // flag\n        this.visible = true;\n\n        debug.info('show component ' + this.name + '#' + this.id, null, {\n            tags: ['show', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( this.events['show'] ) {\n            /**\n             * Make the component visible.\n             *\n             * @event module:stb/component~Component#show\n             */\n            this.emit('show', data);\n        }\n\n        // async call\n        if ( typeof callback === 'function' ) {\n            // async call\n            setTimeout(callback);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Make the component hidden and notify subscribers.\n *\n * @param {function} [callback] user callback\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#hide\n */\nComponent.prototype.hide = function ( callback ) {\n    // is it visible\n    if ( this.visible ) {\n        // correct style\n        this.$node.classList.add('hidden');\n        // flag\n        this.visible = false;\n\n        debug.info('hide component ' + this.name + '#' + this.id, null, {\n            tags: ['hide', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( this.events['hide'] ) {\n            /**\n             * Make the component hidden.\n             *\n             * @event module:stb/component~Component#hide\n             */\n            this.emit('hide');\n        }\n\n        // async call\n        if ( typeof callback === 'function' ) {\n            // async call\n            setTimeout(callback);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n// public\nmodule.exports = Component;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n// public\nmodule.exports = require('spa-component');\n","/**\n * @license The MIT License (MIT)\n * @copyright Boris Aleynikov <aleynikov.boris@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar List = require('mag-component-list'),\n    Layout = require('mag-component-layout');\n\n/**\n *  Layout list contains array of layout components\n *\n * @constructor\n * @extends List\n *\n * @param {Object} config object\n * @param {Element} [config.noData=''] element or string to display if set empty data\n *\n * @example\n * var LayoutList = require('mag-component-layout-list'),\n *     list = new LayoutList({\n *         propagate: true,\n *         size: 7,\n *         focusIndex: 0,\n *         noData: 'No channels'\n *         data: [\n *                 {\n *                     items: [\n *                         {\n *                             className: 'star',\n *                             name: '$text'\n *                         },\n *                         'Some text'\n *                     ],\n *                     click: function () {\n *                         // do something\n *                     },\n *                     name: 'starItem'\n *                 },\n *                 {\n *                     items: [\n *                         'Hello world',\n *                         {\n *                             value: 'hi',\n *                             className: 'status'\n *                         }\n *                     ],\n *                     value:{\n *                         uri: 'http://55.55.55.55/some'\n *                     },\n *                     click: someHandler\n *                 },\n *                 {\n *                     items: [\n *                         {\n *                             className: 'big',\n *                             value: ' Some'\n *                         },\n *                         {\n *                             value: new Input()\n *                         }\n *                     ]\n *                 },\n *                 {\n *                     items: [\n *                         new Button({value: 'Ok'}),\n *                         new Button({value: 'Cancel'}),\n *                         new Button({value: 'Exit'})\n *                     ]\n *                 }\n *             ]\n * });\n *\n * list.links.starItem.links.$text.innerText = 'new Text';\n *\n */\nfunction LayoutList ( config ) {\n    var self = this;\n\n    config = config || {};\n\n    /**\n     * Elements handlers\n     */\n    this.handlers = {};\n\n    /**\n     * Hash map of layouts links\n     */\n    this.links = {};\n\n    /**\n     * No data placeholder\n     *\n     * @type {Element}\n     */\n    this.$noData = null;\n\n    //config.className = 'layoutList ' + (config.className || '');\n\n    config.propagate = config.propagate === undefined ? true : config.propagate;\n\n    /**\n     * Set data layout to be fixed to cache HTML elements\n     *\n     * @type {boolean|*}\n     */\n    this.fixedData = config.fixedData || false;\n\n    //config.$body = document.createElement('div');\n\n    config.$body = document.createElement('div');\n    config.$body.className = 'body';\n\n    this.$noData = document.createElement('div');\n    this.$noData.className = 'noData hidden';\n\n    List.call(this, config);\n\n    this.$node.appendChild(this.$body);\n    this.$node.appendChild(this.$noData);\n\n    // add handler to focus inner layout\n    this.addListener('click:item', function ( event ) {\n        // focus inner layout of item\n        if ( event.$item.layout.children.length && !event.inner ) {\n            event.$item.layout.children[event.$item.layout.focusIndex].focus();\n        }\n\n        // only focus item if we click mouse\n        if ( event.inner ) {\n            self.focus();\n            self.focusItem(event.$item);\n        }\n        // do click callback if it present\n        if ( self.handlers[event.$item.index] ) {\n            self.handlers[event.$item.index](event.$item);\n        }\n    });\n}\n\n\nLayoutList.prototype = Object.create(List.prototype);\nLayoutList.prototype.constructor = LayoutList;\n\n// set component name\nLayoutList.prototype.name = 'mag-component-layout-list';\n\n\n/*eslint id-length:0*/\n/**\n * Default render function\n *\n * @param {Element} $item in list\n * @param {Object} config to render layout element\n */\nLayoutList.prototype.renderItemDefault = function ( $item, config ) {\n    var layout, layoutConfig,\n        currentNode,\n        currentData,\n        i;\n\n    if ( $item.ready && this.fixedData ) {\n        for ( i = 0; i < config.items.length; i++ ) {\n            currentData = config.items[i];\n            if ( typeof currentData.value === 'string' || currentData.value === undefined ) {\n                currentNode = $item.layout.$node.childNodes[i];\n                currentNode.innerText = currentData.value || '';\n                currentNode.className = currentData.className || '';\n            }\n        }\n    } else {\n        // clear inner content\n        while ( $item.firstChild ) {\n            $item.removeChild($item.firstChild);\n        }\n\n        layoutConfig = {\n            focusable: false,\n            data: config.items\n        };\n\n        if ( config.className ) {\n            layoutConfig.className = config.className;\n        }\n\n        layout = new Layout(layoutConfig);\n\n        if ( config.name ) {\n            this.links[config.name] = layout;\n        }\n\n        $item.appendChild(layout.$node);\n        $item.layout = layout;\n        layout.parent = this;\n        layout.$parentItem = $item;\n\n        // focus layoutList if click on layout\n        layout.addListener('click', function () {\n            // add inner property to set that event comes from inner component\n            layout.parent.emit('click:item', {$item: $item, inner: true});\n        });\n\n        if ( config.click ) {\n            this.handlers[$item.index] = config.click;\n        }\n        // item is rendered\n        $item.ready = true;\n    }\n    $item.value = config.value || {};\n};\n\n\nLayoutList.prototype.setData = function ( config ) {\n    this.links = {};\n    List.prototype.setData.call(this, config);\n\n    if ( config.data && config.data.length ) {\n        this.$noData.classList.add('hidden');\n    } else {\n        this.$noData.classList.remove('hidden');\n    }\n};\n\n\nLayoutList.prototype.init = function ( config ) {\n    var $wrap;\n\n    List.prototype.init.call(this, config);\n    if ( config.noData ) {\n        if ( DEVELOP ) {\n            if ( typeof config.noData !== 'string' && !(config.noData instanceof Element) ) {\n                throw new Error(__filename + ': wrong config.$noData type');\n            }\n        }\n\n        this.$noData.innerHTML = '';\n        if ( config.noData instanceof Element ) {\n            this.$noData.appendChild(config.noData);\n        } else if ( typeof config.noData === 'string' ) {\n            $wrap = document.createElement('div');\n            $wrap.innerText = config.noData;\n            this.$noData.appendChild($wrap);\n        }\n    }\n\n    if ( config.data && config.data.length ) {\n        this.$noData.classList.add('hidden');\n    } else {\n        this.$noData.classList.remove('hidden');\n    }\n};\n\nLayoutList.prototype.renderItem = LayoutList.prototype.renderItemDefault;\n\n\nmodule.exports = LayoutList;\n","/**\n * @license The MIT License (MIT)\n * @copyright Boris Aleynikov <aleynikov.boris@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('stb-component'),\n    keys      = require('stb-keys');\n\n/**\n * Layout component implementation\n *\n * @constructor\n * @extends Component\n *\n * @param {Object}   [config={}]          init parameters (all inherited from the parent)\n * @param {Array} [config.data] array of items to add to layout\n */\nfunction Layout ( config ) {\n    var self = this;\n\n    // sanitize\n    config = config || {};\n\n    /**\n     * Index of focused child component\n     * @type {number}\n     */\n    this.focusIndex = 0;\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && config.className !== undefined && typeof config.className !== 'string' ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n    }\n\n    //config.className = 'layout ' + (config.className || '');\n\n    /**\n     * Component data\n     * @type {Array}\n     */\n    this.data = [];\n\n    /**\n     *  Hash map of item links\n     */\n    this.links = {};\n\n    Component.call(this, config);\n\n    this.init(config);\n\n    // add listener to move focus between children\n    this.addListener('keydown', function ( event ) {\n        switch ( event.code ) {\n            case keys.right:\n                if ( self.children.length && self.focusIndex < self.children.length - 1 ) {\n                    self.children[++self.focusIndex].focus();\n                }\n                break;\n            case keys.left:\n                if ( self.children.length && self.focusIndex > 0 ) {\n                    self.children[--self.focusIndex].focus();\n                }\n                break;\n            case keys.back:\n                // focus parent focused item if parent is layout list\n                if ( self.parent ) {\n                    self.parent.focus();\n                    if ( self.$parentItem ) {\n                        self.parent.focusItem(self.$parentItem);\n                    }\n                }\n                break;\n        }\n    });\n}\n\n\nLayout.prototype = Object.create(Component.prototype);\nLayout.prototype.constructor = Layout;\n\n// set component name\nLayout.prototype.name = 'mag-component-layout';\n\n\n/**\n * Make all the data items identical.\n * Wrap to objects if necessary.\n *\n * @param {Array} data incoming array\n * @return {Array} reworked incoming data\n */\nfunction normalize ( data ) {\n    var index, item;\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( !Array.isArray(data) ) {\n            throw new Error(__filename + ': wrong data type');\n        }\n    }\n\n    // rows\n    for ( index = 0; index < data.length; index++ ) {\n        // cell value\n        item = data[index];\n        // plain text\n        if ( typeof item === 'object' ) {\n            // HTML element or component\n            if ( item instanceof Component || item instanceof HTMLElement ) {\n                data[index] = {\n                    value: item,\n                    wrap: false\n                };\n            } else {\n                data[index].wrap = true;\n            }\n        } else {\n            // wrap with defaults\n            data[index] = {\n                value: data[index],\n                wrap: true\n            };\n        }\n    }\n\n    return data;\n}\n\n\n/**\n * Init or re-init of the component inner structures and HTML.\n *\n * @param {Object} config init parameters (subset of constructor config params)\n */\nLayout.prototype.init = function ( config ) {\n    var self = this,\n        data = normalize(config.data),\n        item, $wrapper, index;\n\n    // clear element if reinit\n    while (this.$node.firstChild) {\n        this.$node.removeChild(this.$node.firstChild);\n    }\n\n    this.data = data;\n\n    /**\n     * @this Component\n     */\n    function componentClickHandler () {\n        self.focusIndex = this.index;\n    }\n\n    for ( index = 0; index < data.length; index++ ) {\n        item = data[index];\n        // plain text\n        if ( typeof item.value === 'string' ) {\n            $wrapper = document.createElement('div');\n            $wrapper.textContent = item.value;\n            if ( item.className ) { $wrapper.className = item.className; }\n            this.$node.appendChild($wrapper);\n            if ( item.name ) {\n                this.links[item.name] = $wrapper;\n            }\n        } else if ( item.value instanceof HTMLElement ) {\n            // HTML Element\n\n            // if with wrapper\n            if ( item.wrap ) {\n                $wrapper = document.createElement('div');\n                if ( item.className ) { $wrapper.className = item.className; }\n                $wrapper.appendChild(item.value);\n                this.$node.appendChild($wrapper);\n                if ( item.name ) {\n                    this.links[item.name] = $wrapper;\n                }\n            } else {\n                // without wrapper\n                this.$node.appendChild(item.value);\n                if ( item.name ) {\n                    this.links[item.name] = item.value;\n                }\n            }\n        } else if ( item.value instanceof Component ) {\n            // component\n            // force propagate events\n            item.value.propagate = true;\n\n            // set index to current component\n            item.value.index = this.children.length;\n\n            // change layout focus index if click component\n            item.value.addListener('click', componentClickHandler);\n\n            // append component\n            if ( item.wrap ) {\n                // with wrapper\n                $wrapper = document.createElement('div');\n                if ( item.className ) { $wrapper.className = item.className; }\n                $wrapper.appendChild(item.value.$node);\n                this.$node.appendChild($wrapper);\n                this.children.push(item.value);\n                item.value.parent = this;\n                if ( item.name ) {\n                    this.links[item.name] = $wrapper;\n                }\n            } else {\n                // without wrapper\n                this.add(item.value);\n                if ( item.name ) {\n                    this.links[item.name] = item.value;\n                }\n            }\n        } else {\n            $wrapper = document.createElement('div');\n            if ( item.className ) { $wrapper.className = item.className; }\n            this.$node.appendChild($wrapper);\n            if ( item.name ) {\n                this.links[item.name] = $wrapper;\n            }\n        }\n    }\n};\n\n\nmodule.exports = Layout;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar app = require('./lib/main');\n\n\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n// public\nmodule.exports = require('spa-component-page');\n\n// correct component name\nmodule.exports.prototype.name = 'stb-component-page';\n","/**\n * @license The MIT License (MIT)\n * @copyright Dmitry Fedotov <bas.jsdev@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('stb-component'),\n    keys      = require('stb-keys'),\n    classes   = {};\n\n\n// initialize classes\nclasses[keys.f1] = 'theme-icon-rc-f1';\nclasses[keys.f2] = 'theme-icon-rc-f2';\nclasses[keys.f3] = 'theme-icon-rc-f3';\nclasses[keys.f4] = 'theme-icon-rc-f4';\nclasses[keys.menu] = 'theme-icon-rc-menu';\nclasses[keys.ok] = 'theme-icon-rc-ok';\nclasses[keys.info] = 'theme-icon-rc-info';\nclasses[keys.playPause] = 'theme-icon-rc-play-pause';\nclasses[keys.back] = 'theme-icon-rc-back';\nclasses[keys.exit] = 'theme-icon-rc-home';\nclasses[keys.keyboard] = 'theme-icon-rc-vk';\nclasses[keys.refresh] = 'theme-icon-rc-refresh';\nclasses[keys.frame] = 'theme-icon-rc-aspect';\n\n/**\n * Footer.\n *\n * @constructor\n * @extends Component\n *\n * @param {Object}  config={} - init parameters\n * @param {Object}  config.parent - parent page\n * @param {boolean} [config.visible] - visibility flag\n * @param {Object}  [config.data] - footer buttons config\n * @param {Object}  [config.data.left] - left button config\n * @param {Object}  [config.data.middle] - middle buttons config\n * @param {Object}  [config.data.right] - right button config\n * @param {number}  [config.data.middle.code] - button key code\n * @param {Object}  [config.data.middle.title] - button title\n * @param {Object}  [config.data.middle.action] - button press (click) action\n * @param {Object}  [config.data.label] - button config (for remote control with long press)\n * @param {number}  [config.data.label.code] - button key code\n * @param {Object}  [config.data.label.title] - button title\n * @param {Object}  [config.data.label.action] - button press (click) action\n *\n * @example\n * page.footer = new Footer({\n *     parent: page,\n *     data: {\n *         left: {\n *             code: keys.menu, action: function () {}\n *         },\n *         middle: [\n *             {code: 55, action: function () {}},\n *             {code: keys.f1, title: 'stop', action: function () {}},\n *             {code: 9000, className: 'customIcon', title: 'start', action: function () {}},\n *             {code: keys.f4, title: 'end', action: function () {}}\n *         ],\n *         right: {\n *             code: 65, action: function () {}\n *         },\n *         label: {\n *             code: keys.menu, title: 'Hold OK button to open the task options', action: function () {}\n *         }\n *     }\n * });\n */\n\n/* eslint max-statements: 0 */\nfunction Footer ( config ) {\n    var currentTab = 0,\n        self       = this,\n        $body;\n\n    // sanitize\n    config = config || {};\n    // can't accept focus\n    config.focusable = false;\n    // hide by default\n    config.visible = config.visible || false;\n    // create centered div\n    config.$body = document.createElement('div');\n    config.$body.className = 'body';\n\n    // parent constructor call\n    Component.call(this, config);\n\n    this.tabs = [\n        {codes: {}},\n        {codes: {}},\n        {codes: {}},\n        {codes: {}}\n    ];\n\n    this.tab = 0;\n\n    this.$table = this.$node.appendChild(document.createElement('table'));\n    this.$table.insertRow();\n    this.$table.rows[0].insertCell(-1);\n\n    if ( TARGET !== 'android-stb' && TARGET !== 'android-app' ) {\n        this.$table.rows[0].insertCell(-1);\n        this.$table.rows[0].insertCell(-1);\n\n        this.$left = this.$table.rows[0].cells[0].appendChild(document.createElement('div'));\n        this.$left.className = 'theme-icon';\n\n        this.$table.rows[0].cells[1].className = 'central';\n        $body = this.tabs[currentTab].$body = this.$table.rows[0].cells[1].appendChild(document.createElement('div'));\n    } else {\n        this.$table.rows[0].cells[0].className = 'central noButtons';\n        $body = this.tabs[currentTab].$body = this.$table.rows[0].cells[0].appendChild(document.createElement('div'));\n    }\n\n    $body.className = 'wrapper hidden';\n    $body.appendChild(document.createElement('div'));\n    $body.lastChild.className = 'button';\n    $body.lastChild.appendChild(document.createElement('div'));\n\n    if ( TARGET !== 'android-stb' && TARGET !== 'android-app' ) {\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n        $body = this.tabs[++currentTab].$body = this.$table.rows[0].cells[1].appendChild(document.createElement('div'));\n        $body.className = 'wrapper hidden';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n\n        $body = this.tabs[++currentTab].$body = this.$table.rows[0].cells[1].appendChild(document.createElement('div'));\n        $body.className = 'wrapper hidden';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n\n        $body = this.tabs[++currentTab].$body = this.$table.rows[0].cells[1].appendChild(document.createElement('div'));\n        $body.className = 'wrapper hidden';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n        $body.appendChild(document.createElement('div'));\n        $body.lastChild.className = 'button';\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.appendChild(document.createElement('div'));\n        $body.lastChild.lastChild.className = 'title';\n\n\n        this.$right = this.$table.rows[0].cells[2].appendChild(document.createElement('div'));\n        this.$right.className = 'theme-icon';\n    } else {\n        $body.lastChild.lastChild.className = 'title label';\n    }\n\n    this.init(config.data);\n\n    this.parent.addListener('keydown', function ( event ) {\n        var currTab = self.tabs[self.tab];\n\n        if ( self.visible ) {\n            if ( currTab.codes[event.code] && typeof currTab.codes[event.code].action === 'function' ) {\n                currTab.codes[event.code].action();\n            }\n        }\n    });\n}\n\n\n// inheritance\nFooter.prototype = Object.create(Component.prototype);\nFooter.prototype.constructor = Footer;\n\n// set component name\nFooter.prototype.name = 'mag-component-footer';\n\n\nif ( TARGET !== 'android-stb' && TARGET !== 'android-app' ) {\n    /**\n     * Redefine buttons\n     *\n     * @param {Object} [config] - footer buttons config\n     * @param {Object} [config.left] - left button config\n     * @param {number} [config.left.code] - left button key code\n     * @param {boolean} [config.left.disabled] - left button is disabled\n     * @param {Object} [config.left.action] - left button press (click) action\n     * @param {Object} [config.middle] - middle buttons config\n     * @param {Object} [config.right] - right button config\n     * @param {number} [config.right.code] - right button key code\n     * @param {boolean} [config.right.disabled] - right button is disabled\n     * @param {Object} [config.right.action] - right button press (click) action\n     * @param {number} [config.middle.code] - button key code\n     * @param {Object} [config.middle.title] - button title\n     * @param {boolean} [config.middle.disabled] - button is disabled\n     * @param {Object} [config.middle.action] - button press (click) action\n     * @param {Object} [config.label] - button config\n     * @param {number} [config.label.code] - button key code\n     * @param {Object} [config.label.title] - button title\n     * @param {Object} [config.label.action] - button press (click) action\n     *\n     * page.Footer.init({\n     *     left: {\n     *         code: keys.menu, action: function () {}\n     *     },\n     *     middle: [\n     *         {code: 55, action: function () {}},\n     *         {code: keys.f1, title: 'stop', action: function () {}},\n     *         {code: 9000, className: 'customIcon', title: 'start', action: function () {}},\n     *         {code: keys.f4, title: 'end', disabled: true}\n     *     ],\n     *     right: {\n     *         code: 65, action: function () {}\n     *     }\n     * });\n     *\n     */\n    Footer.prototype.init = function ( config ) {\n        var index, $tab, $tabChildren;\n\n        config = config || {};\n\n        if ( DEVELOP ) {\n            if ( config.middle && config.middle.length > 4 ) {\n                throw new Error(__filename + ': only 4 buttons allowed in footer');\n            }\n            if ( config.middle && Array.isArray(config.middle) ) {\n                for ( index = 0; index < config.middle.length; index++ ) {\n                    if ( typeof config.middle[index].action !== 'function' && !config.middle[index].disabled ) {\n                        throw new Error(__filename + ': action must be a function');\n                    }\n                    ++index;\n                }\n            }\n            if ( config.left && typeof config.left.action !== 'function' && !config.left.disabled ) {\n                throw new Error(__filename + ': action must be a function');\n            }\n            if ( config.right && typeof config.right.action !== 'function' && !config.right.disabled ) {\n                throw new Error(__filename + ': action must be a function');\n            }\n        }\n\n        // hide old tab\n        this.tabs[this.tab].$body.classList.add('hidden');\n        this.tab = config.middle && config.middle.length ? config.middle.length - 1 : 0;\n        // current tab shortcut\n        $tab = this.tabs[this.tab];\n        // reset all actions\n        $tab.codes = {};\n\n        // left button\n        if ( config.left ) {\n            this.$left.className = config.left.className || ('theme-icon ' + (classes[config.left.code] || 'theme-icon-warning'));\n            if ( config.left.disabled ) {\n                this.$left.classList.add('disabled');\n            } else {\n                $tab.codes[config.left.code] = {action: config.left.action};\n                this.$left.style.visibility = 'inherit';\n                this.$left.onclick = function () {\n                    if ( typeof config.left.action === 'function' ) {\n                        config.left.action();\n                    }\n                };\n            }\n        } else if ( this.$left.style.visibility !== 'hidden' ) {\n            this.$left.style.visibility = 'hidden';\n        }\n\n        // right button\n        if ( config.right ) {\n            this.$right.className = config.right.className || ('theme-icon ' + (classes[config.right.code] || 'theme-icon-warning'));\n            if ( config.right.disabled ) {\n                this.$right.classList.add('disabled');\n            } else {\n                $tab.codes[config.right.code] = {action: config.right.action};\n                this.$right.style.visibility = 'inherit';\n                this.$right.onclick = function () {\n                    if ( typeof config.right.action === 'function' ) {\n                        config.right.action();\n                    }\n                };\n            }\n        } else if ( this.$right.style.visibility !== 'hidden' ) {\n            this.$right.style.visibility = 'hidden';\n        }\n\n        function addClick ( ind ) {\n            return function () {\n                if ( typeof config.middle[ind].action === 'function' ) {\n                    config.middle[ind].action();\n                }\n            };\n        }\n\n        // middle buttons\n        if ( config.middle && config.middle.length ) {\n            for ( index = 0; index < config.middle.length; index++ ) {\n                $tab.codes[config.middle[index].code] = {action: config.middle[index].action};\n                if ( config.middle[index].disabled ) {\n                    $tab.$body.children[index].classList.add('disabled');\n                } else {\n                    $tab.$body.children[index].classList.remove('disabled');\n                    $tab.$body.children[index].onclick = addClick(index);\n                }\n                // shortcut\n                $tabChildren = $tab.$body.children[index].children;\n                $tabChildren[0].className = 'iconImg ' +\n                    (config.middle[index].className || ('theme-icon ' + (classes[config.middle[index].code] || 'theme-icon-warning')));\n\n                $tabChildren[1].innerText = config.middle[index].title || '';\n            }\n            $tab.$body.classList.remove('hidden');\n        }\n    };\n} else {\n    /**\n     * Redefine buttons for android\n     *\n     * @param {Object} [config] - footer config\n     * @param {Object} [config.label] - button config\n     * @param {number} [config.label.code] - button key code\n     * @param {Object} [config.label.title] - button title\n     * @param {Object} [config.label.action] - button press (click) action\n     *\n     * initLongPressMode({\n     *     label: {code: keys.menu, title: 'Hold OK button to open the task options', action: function () {}}\n     * });\n     *\n     */\n    Footer.prototype.init = function ( config ) {\n        var $tab, $tabChildren;\n\n        config = config || {};\n\n        // current tab shortcut\n        $tab = this.tabs[0];\n        // reset\n        $tab.codes = {};\n        $tab.$body.classList.add('hidden');\n\n        if ( config.label && typeof config.label.action === 'function' ) {\n            // label button\n            $tab.codes[config.label.code] = {action: config.label.action};\n            $tab.$body.children[0].onclick = function () {\n                if ( typeof config.label.action === 'function' ) {\n                    config.label.action();\n                }\n            };\n            // shortcut\n            $tabChildren = $tab.$body.children[0].children;\n            // $tabChildren[0].className = '';\n            $tabChildren[0].innerText = config.label.title || '';\n\n            $tab.$body.classList.remove('hidden');\n        }\n    };\n}\n\n\n// public\nmodule.exports = Footer;\n","/**\n * @license The MIT License (MIT)\n * @copyright Dmitry Fedotov <bas.jsdev@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\nvar StbComponentModal = require('stb-component-modal'),\n    Component         = require('stb-component'),\n    keys              = require('stb-keys');\n\n\n/**\n * Modal window implementation.\n *\n * @constructor\n * @extends StbComponentModal\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {Object} [config.title] message title\n * @param {Object} [config.className] message classname\n * @param {Object} [config.icon] icon at header\n * @param {Object} [config.visible] visibility flag\n * @param {Object} [config.children] content (inherited from the parent)\n *\n * @example\n * var modalSort = new Modal({\n *     visible: false,\n *     title: 'sort',\n *     events: {\n *         show: function () {\n *             list.focus();\n *         },\n *         hide: function () {\n *             page.panelSet.focus();\n *         }\n *     },\n *     children: [list = new RadioList({})]\n * });\n * page.add(modalSort);\n */\nfunction Modal ( config ) {\n    var self = this,\n        $overlay, $body, onkeydown;\n\n    // sanitize\n    config = config || {};\n    config.events = config.events || {};\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( config.icon && typeof config.icon !== 'string' ) {\n            throw new Error(__filename + ': wrong or empty config.icon');\n        }\n        if ( config.title && typeof config.title !== 'string' ) {\n            throw new Error(__filename + ': wrong or empty config.title');\n        }\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n        if ( config.$body ) {\n            throw new Error(__filename + ': config.$body should not be provided in Modal manually');\n        }\n    }\n\n    // usually can't accept focus\n    config.focusable = config.focusable || false;\n    // hide by default\n    config.visible = config.visible || false;\n    // add default close by click\n    config.events.click = config.events.click || function () { self.hide(); };\n    // add close window behavior, when pushed a back button or a menu button\n    onkeydown = config.events.keydown;\n    config.events.keydown = function ( event ) {\n        if ( onkeydown ) {\n            onkeydown.call(this, event);\n        }\n        if ( event.code === keys.back || event.code === keys.menu ) {\n            event.stop = true;\n            self.hide();\n        }\n    };\n\n    // parent constructor call\n    StbComponentModal.call(this, config);\n\n    // add table-cell wrappers\n    this.$node.appendChild(document.createElement('div'));\n    this.$node.firstChild.classList.add('alignBox');\n    this.$node.firstChild.appendChild(document.createElement('div'));\n\n    // add header div\n    this.$header = document.createElement('div');\n    this.$header.className = 'header';\n\n    // insert caption placeholder\n    this.$text = this.$header.appendChild(document.createElement('div'));\n    this.$text.classList.add('text');\n    this.$text.innerText = config.title || '';\n\n    // optional icon\n    if ( config.icon ) {\n        this.$icon = this.$header.appendChild(document.createElement('div'));\n        this.$icon.className = 'icon ' + config.icon;\n    }\n\n    $overlay = document.createElement('div');\n    $overlay.className = 'overlay';\n\n    // add to dom\n    // add body wrapper\n    $body = this.$body.parentNode.removeChild(this.$body);\n    this.$node.firstChild.firstChild.appendChild(this.$header);\n    this.$node.firstChild.firstChild.appendChild($body);\n    this.$node.firstChild.firstChild.appendChild($overlay);\n}\n\n\n// inheritance\nModal.prototype = Object.create(StbComponentModal.prototype);\nModal.prototype.constructor = Modal;\n\n// set component name\nModal.prototype.name = 'mag-component-modal';\n\n\n/**\n * Redefine default component focus to set additional css\n */\nModal.prototype.focus = function () {\n    this.$node.classList.add('active');\n    StbComponentModal.prototype.focus.call(this);\n    if ( this.children[0] && this.children[0] instanceof Component ) {\n        this.children[0].focus();\n    }\n};\n\n\n/**\n * Blur message\n */\nModal.prototype.blur = function () {\n    this.$node.classList.remove('active');\n    StbComponentModal.prototype.blur.call(this);\n};\n\n\n// public\nmodule.exports = Modal;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * HTML elements low-level handling.\n *\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n/* eslint no-unused-vars: 0 */\n\n/**\n * DOM manipulation module\n */\nvar dom = {};\n\n\n/**\n * Create a new HTML element.\n *\n * @param {string} tagName mandatory tag name\n * @param {Object|null} [attrList] element attributes\n * @param {...*} [content] element content (primitive value/values or other nodes)\n * @return {Node|null} HTML element or null on failure\n *\n * @example\n * dom.tag('table');\n * dom.tag('div', {}, 'some text');\n * dom.tag('div', {className:'top'}, dom.tag('span'), dom.tag('br'));\n * dom.tag('link', {rel:'stylesheet', type:'text/css', href:'http://some.url/'});\n */\ndom.tag = function ( tagName, attrList, content ) {\n    var node = null,\n        index, name;\n\n    // minimal param is given\n    if ( tagName ) {\n        // empty element\n        node = document.createElement(tagName);\n\n        // optional attribute list is given\n        if ( attrList && typeof attrList === 'object' ) {\n            for ( name in attrList ) {\n                // extend a new node with the given attributes\n                node[name] = attrList[name];\n            }\n        }\n\n        // content (arguments except the first two)\n        for ( index = 2; index < arguments.length; index++ ) {\n            // some data is given\n            if ( arguments[index] ) {\n                // regular HTML tag or plain data\n                node.appendChild(\n                    typeof arguments[index] === 'object' ? arguments[index] : document.createTextNode(arguments[index])\n                );\n            }\n        }\n\n    }\n\n    return node;\n};\n\n\n/**\n * Create a new DocumentFragment filled with the given non-empty elements if any.\n *\n * @param {...*} [node] fragment content (primitive value/values or other nodes)\n * @return {DocumentFragment} new placeholder\n *\n * @example\n * // gives an empty fragment element\n * dom.fragment();\n * // gives a fragment element with 3 div element inside\n * dom.fragment(dom.tag('div'), div2, div3);\n * // mixed case\n * dom.fragment('some text', 123, div3);\n */\ndom.fragment = function ( node ) {\n    // prepare placeholder\n    var fragment = document.createDocumentFragment(),\n        index;\n\n    // walk through all the given elements\n    for ( index = 0; index < arguments.length; index++ ) {\n        node = arguments[index];\n        // some data is given\n        if ( node ) {\n            // regular HTML tag or plain data\n            fragment.appendChild(typeof node === 'object' ? node : document.createTextNode(node));\n        }\n    }\n\n    return fragment;\n};\n\n\n/**\n * Add the given non-empty data (HTML element/text or list) to the destination element.\n *\n * @param {Node} tagDst element to receive children\n * @param {...*} [content] element content (primitive value/values or other nodes)\n * @return {Node|null} the destination element - owner of all added data\n *\n * @example\n * // simple text value\n * add(some_div, 'Hello world');\n * // single DOM Element\n * add(some_div, some_other_div);\n * // DOM Element list\n * add(some_div, div1, div2, div3);\n * // mixed case\n * add(some_div, div1, 'hello', 'world');\n */\ndom.add = function ( tagDst, content ) {\n    var index;\n\n    // valid HTML tag as the destination\n    if ( tagDst instanceof Node ) {\n        // append all except the first one\n        for ( index = 1; index < arguments.length; index++ ) {\n            // some data is given\n            if ( arguments[index] ) {\n                // regular HTML tag or plain data\n                tagDst.appendChild(\n                    typeof arguments[index] === 'object' ? arguments[index] : document.createTextNode(arguments[index])\n                );\n            }\n        }\n\n        return tagDst;\n    }\n\n    return null;\n};\n\n\n/**\n * Remove the given elements from the DOM.\n *\n * @param {...Node} [nodes] element to be removed\n * @return {boolean} operation status (true - all given elements removed)\n *\n * @example\n * dom.remove(document.querySelector('div.test'));\n * dom.remove(div1, div2, div3);\n */\ndom.remove = function ( nodes ) {\n    // amount of successfully removed nodes\n    var count = 0,\n        index;\n\n    // walk through all the given elements\n    for ( index = 0; index < arguments.length; index++ ) {\n        // valid non-empty tag\n        if ( arguments[index] && arguments[index].parentNode ) {\n            if ( arguments[index].parentNode.removeChild(arguments[index]) === arguments[index] ) {\n                count++;\n            }\n        }\n    }\n\n    return arguments.length > 0 && count === arguments.length;\n};\n\n\ndom.clear = function ( node ) {\n    while ( node.lastChild ) {\n        node.removeChild(node.lastChild);\n    }\n};\n\n\n// public\nmodule.exports = dom;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n// public\nmodule.exports = require('spa-component-scrollbar');\n\n// correct component name\nmodule.exports.prototype.name = 'stb-component-scrollbar';\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('spa-app/lib/core');\n//    metrics = require('app:metrics'),\n//    linkCSS;\n\n\n// global link\n//app.metrics = metrics[app.query.screenHeight] || metrics[screen.height] || metrics[720];\n\n// calculate and extend\n//app.metrics.availHeight = app.metrics.height - (app.metrics.availTop  + app.metrics.availBottom);\n//app.metrics.availWidth  = app.metrics.width  - (app.metrics.availLeft + app.metrics.availRight);\n\n// // set max browser window size\n// window.moveTo(0, 0);\n// window.resizeTo(metrics.width, metrics.height);\n\n// load CSS file base on resolution\n/*linkCSS = document.createElement('link');\nlinkCSS.rel  = 'stylesheet';\nlinkCSS.href = 'css/' + (DEVELOP ? 'develop.' : 'release.') + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\ndocument.head.appendChild(linkCSS);*/\n\n\n// public\nmodule.exports = function ( name ) {\n    var link = document.createElement('link');\n\n    link.rel  = 'stylesheet';\n    link.href = 'css/' + name + '.' + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\n    document.head.appendChild(link);\n};\n","/**\n * Global list of non-printable control key codes.\n *\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    backspace: 8,\n    tab:       9,\n    enter:     13,\n    escape:    27,\n    space:     32,\n    pageUp:    33,\n    pageDown:  34,\n    end:       35,\n    home:      36,\n    left:      37,\n    up:        38,\n    right:     39,\n    down:      40,\n    insert:    45,\n    // not \"delete\" because of old browsers issue\n    del:       46\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n/* eslint complexity: [error, 37] */\n/* eslint max-lines-per-function: 1 */\n/* eslint no-fallthrough: 1 */\n/* eslint complexity: 1 */\n\n'use strict';\n\nvar Component = require('stb-component'),\n    keys      = require('stb-keys');\n\n\n/**\n * Mouse click event.\n *\n * @event module:stb/ui/list~List#click:item\n *\n * @type {Object}\n * @property {Element} $item clicked HTML item\n * @property {Event} event click event data\n */\n\n\n/**\n * Base list implementation.\n *\n * Each data item can be either a primitive value or an object with these fields:\n *\n *  Name    | Description\n * ---------|-------------\n *  value   | actual cell value to render\n *  mark    | is it necessary or not to render this cell as marked\n *\n * @constructor\n * @extends Component\n *\n * @param {Object}   [config={}]          init parameters (all inherited from the parent)\n * @param {Array}    [config.data=[]]     component data to visualize\n * @param {function} [config.render]      method to build each grid cell content\n * @param {function} [config.navigate]    method to move focus according to pressed keys\n * @param {number}   [config.size=5]      amount of visible items on a page\n * @param {number}   [config.viewIndex=0] move view window to this position on init\n * @param {number}   [config.focusIndex]  list item index to make item focused (move view window to this position)\n * @param {boolean}  [config.cycle=true]  allow or not to jump to the opposite side of a list when there is nowhere to go next\n * @param {boolean}  [config.scroll=null] associated ScrollBar component link\n * @param {Object}   [config.provider]    data provider\n *\n * @fires module:stb/ui/list~List#click:item\n */\nfunction List ( config ) {\n    // current execution context\n    //var self = this;\n\n    // sanitize\n    config = config || {};\n\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        if ( config.type && Number(config.type) !== config.type ) {\n            throw new Error(__filename + ': config.type must be a number');\n        }\n    }\n\n    /**\n     * Link to the currently focused DOM element.\n     *\n     * @type {Element}\n     */\n    this.$focusItem = null;\n\n    /**\n     * Position of the visible window to render.\n     *\n     * @type {number}\n     */\n    this.viewIndex = null;\n\n    /**\n     * Component data to visualize.\n     *\n     * @type {Array}\n     */\n    this.data = [];\n\n    /**\n     * Component orientation.\n     *\n     * @type {number}\n     */\n    this.type = this.TYPE_VERTICAL;\n\n    /**\n     * Amount of visible items on a page.\n     *\n     * @type {number}\n     */\n    this.size = 5;\n\n    /**\n     * Allow or not to jump to the opposite side of a list when there is nowhere to go next.\n     *\n     * @type {boolean}\n     */\n    this.cycle = false;\n\n    /**\n     * Associated ScrollBar component link.\n     *\n     * @type {ScrollBar}\n     */\n    this.scroll = null;\n\n    // horizontal or vertical\n    if ( config.type ) {\n        // apply\n        this.type = config.type;\n    }\n\n    /**\n     * Associated data provider\n     *\n     * @type {Provider}\n     */\n    this.provider = null;\n\n    if ( this.type === this.TYPE_HORIZONTAL ) {\n        config.className += ' horizontal';\n    }\n\n    //config.className += ' theme-main';\n\n    // parent constructor call\n    Component.call(this, config);\n\n    // component setup\n    this.init(config);\n\n    // custom navigation method\n    //if ( config.navigate ) {\n    //    if ( DEVELOP ) {\n    //        if ( typeof config.navigate !== 'function' ) { throw new Error(__filename + ': wrong config.navigate type'); }\n    //    }\n    //    // apply\n    //    this.navigate = config.navigate;\n    //}\n\n    // navigation by keyboard\n    //this.addListener('keydown', this.navigate);\n\n    // navigation by mouse\n    //this.$body.addEventListener('mousewheel', function ( event ) {\n    //    // scrolling by Y axis\n    //    if ( self.type === self.TYPE_VERTICAL && event.wheelDeltaY ) {\n    //        self.move(event.wheelDeltaY > 0 ? 38 : keys.down);\n    //    }\n    //\n    //    // scrolling by X axis\n    //    if ( self.type === self.TYPE_HORIZONTAL && event.wheelDeltaX ) {\n    //        self.move(event.wheelDeltaX > 0 ? 37 : 39);\n    //    }\n    //});\n}\n\n\n// inheritance\nList.prototype = Object.create(Component.prototype);\nList.prototype.constructor = List;\n\n// set component name\nList.prototype.name = 'mag-component-list';\n\nList.prototype.TYPE_VERTICAL   = 1;\nList.prototype.TYPE_HORIZONTAL = 2;\n\n\n/**\n * Fill the given item with data.\n *\n * @param {Element} $item item DOM link\n * @param {*} data associated with this item data\n */\nList.prototype.renderItemDefault = function ( $item, data ) {\n    $item.innerText = data.value;\n};\n\n\n/**\n * Method to build each list item content.\n * Can be redefined to provide custom rendering.\n *\n * @type {function}\n */\nList.prototype.renderItem = List.prototype.renderItemDefault;\n\n\n/**\n * List of all default event callbacks.\n *\n * @type {Object.<string, function>}\n */\nList.prototype.defaultEvents = {\n    /**\n     * Default method to handle mouse wheel events.\n     *\n     * @param {Event} event generated event\n     */\n    mousewheel: function ( event ) {\n        // scrolling by Y axis\n        if ( this.type === this.TYPE_VERTICAL && event.wheelDeltaY ) {\n            this.move(event.wheelDeltaY > 0 ? keys.up : keys.down);\n        }\n\n        // scrolling by X axis\n        if ( this.type === this.TYPE_HORIZONTAL && event.wheelDeltaX ) {\n            this.move(event.wheelDeltaX > 0 ? keys.left : keys.right);\n        }\n    },\n\n    /**\n     * Default method to handle keyboard keydown events.\n     *\n     * @param {Object} event generated event\n     */\n    keydown: function ( event ) {\n        switch ( event.code ) {\n            case keys.up:\n            case keys.down:\n            case keys.right:\n            case keys.left:\n            case keys.pageUp:\n            case keys.pageDown:\n            case keys.home:\n            case keys.end:\n                // cursor move only on arrow keys\n                this.move(event.code);\n                break;\n            case keys.enter:\n                // there are some listeners\n                if ( this.events['click:item'] && this.$focusItem ) {\n                    // notify listeners\n                    this.emit('click:item', {$item: this.$focusItem, event: event});\n                }\n                break;\n        }\n    }\n};\n\n\n/**\n * Default method to move focus according to pressed keys.\n *\n * @param {Object} event generated event source of movement\n */\n//List.prototype.navigateDefault = function ( event ) {\n//    switch ( event.code ) {\n//        case 38:\n//        case 40:\n//        case 39:\n//        case 37:\n//        case 33:\n//        case 34:\n//        case 36:\n//        case 35:\n//            // cursor move only on arrow keys\n//            this.move(event.code);\n//            break;\n//        case 13:\n//            // there are some listeners\n//            if ( this.events['click:item'] ) {\n//                // notify listeners\n//                this.emit('click:item', {$item: this.$focusItem, event: event});\n//            }\n//            break;\n//    }\n//};\n\n\n/**\n * Current active method to move focus according to pressed keys.\n * Can be redefined to provide custom navigation.\n *\n * @type {function}\n */\n//List.prototype.navigate = List.prototype.navigateDefault;\n\n\n/**\n * Make all the data items identical.\n * Wrap to objects if necessary.\n *\n * @param {Array} data incoming array\n * @return {Array} reworked incoming data\n */\nfunction normalize ( data ) {\n    var idx, item;\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( !Array.isArray(data) ) {\n            throw new Error(__filename + ': wrong data type');\n        }\n    }\n\n    // rows\n    for ( idx = 0; idx < data.length; idx++ ) {\n        // cell value\n        item = data[idx];\n        // primitive value\n        if ( typeof item !== 'object' ) {\n            // wrap with defaults\n            item = data[idx] = {\n                value: data[idx]\n            };\n        }\n\n        if ( DEVELOP ) {\n            //if ( !('value' in item) ) { throw new Error(__filename + ': field \"value\" is missing'); }\n            if ( ('mark' in item) && Boolean(item.mark) !== item.mark ) {\n                throw new Error(__filename + ': item.mark must be boolean');\n            }\n        }\n    }\n\n    return data;\n}\n\n\n/**\n * Init or re-init of the component inner structures and HTML.\n *\n * @param {Object} config init parameters (subset of constructor config params)\n */\nList.prototype.init = function ( config ) {\n    var self     = this,\n        currSize = this.$body.children.length,\n        /**\n         * Item mouse click handler.\n         *\n         * @param {Event} event click event data\n         *\n         * @this Element\n         *\n         * @fires module:stb/ui/list~List#click:item\n         */\n        onClick = function ( event ) {\n            if ( this.data ) {\n                self.focusItem(this);\n\n                // there are some listeners\n                if ( self.events['click:item'] ) {\n                    // notify listeners\n                    self.emit('click:item', {$item: this, event: event});\n                }\n            }\n        },\n        item, idx;\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n    }\n\n    // apply cycle behaviour\n    if ( config.cycle !== undefined ) { this.cycle = config.cycle; }\n\n    // apply ScrollBar link\n    if ( config.scroll ) { this.scroll = config.scroll; }\n\n    // apply data provider\n    if ( config.provider ) { this.provider = config.provider; }\n\n\n    // custom render method\n    if ( config.render ) {\n        if ( DEVELOP ) {\n            if ( typeof config.render !== 'function' ) {\n                throw new Error(__filename + ': wrong config.render type');\n            }\n        }\n\n        // apply\n        this.renderItem = config.render;\n    }\n\n    // list items amount on page\n    if ( config.size ) {\n        if ( DEVELOP ) {\n            if ( Number(config.size) !== config.size ) {\n                throw new Error(__filename + ': config.size must be a number');\n            }\n            if ( config.size <= 0 ) {\n                throw new Error(__filename + ': config.size should be positive');\n            }\n        }\n\n        // apply\n        this.size = config.size;\n    }\n\n    if ( config.events ) {\n        // apply all given events\n        Object.keys(config.events).forEach(function ( name ) {\n            self.events[name] = null;\n            self.addListener(name, config.events[name]);\n        });\n    }\n\n    // geometry has changed or initial draw\n    if ( this.size !== currSize ) {\n        // non-empty list\n        if ( currSize > 0 ) {\n            // clear old items\n            this.$body.innerText = null;\n        }\n\n        // create new items\n        for ( idx = 0; idx < this.size; idx++ ) {\n            item = document.createElement('div');\n            item.index = idx;\n            //item.className = 'item theme-list-item';\n            item.className = 'item';\n\n            item.addEventListener('click', onClick);\n            this.$body.appendChild(item);\n        }\n    }\n\n    if ( this.provider ) {\n        if ( this.provider.blocked ) {\n            return;\n        }\n\n        this.provider.get( null, function ( error, data ) {\n            if ( error ) {\n                if ( self.events['data:error'] ) {\n                    /**\n                     * Provider get error while take new data\n                     *\n                     * @event module:stb/ui/list~List#data:error\n                     */\n                    self.emit('data:error', error);\n                }\n            } else {\n                if ( data ) {\n                    config.data = data;\n                    self.setData(config);\n                    if ( self.scroll ) {\n                        self.scroll.init({\n                            realSize: self.provider.maxCount,\n                            viewSize: self.provider.size,\n                            value: self.provider.head + self.provider.pos\n                        });\n                    }\n                }\n                if ( self.events['data:get'] ) {\n                    /**\n                     * Provider request new data\n                     *\n                     * @event module:stb/ui/list~List#data:get\n                     *\n                     * @type {Object}\n                     */\n                    self.emit('data:get');\n                }\n            }\n        });\n    } else if ( config.data ) {\n        this.setData(config);\n    }\n};\n\n/**\n * Set data and render inner structures and HTML.\n *\n * @param {Object} config init parameters (subset of constructor config params)\n */\nList.prototype.setData = function ( config ) {\n    // apply list of items\n\n    if ( config.data ) {\n        if ( DEVELOP ) {\n            if ( !Array.isArray(config.data) ) { throw new Error(__filename + ': wrong config.data type'); }\n        }\n        // prepare user data\n        this.data = normalize(config.data);\n    }\n\n    // view window position\n    if ( DEVELOP ) {\n        if ( config.viewIndex !== undefined ) {\n            if ( Number(config.viewIndex) !== config.viewIndex ) {\n                throw new Error(__filename + ': config.viewIndex must be a number');\n            }\n            if ( config.viewIndex < 0 ) {\n                throw new Error(__filename + ': config.viewIndex should be positive');\n            }\n        }\n    }\n\n    // reset current view window position\n    this.viewIndex = null;\n\n    if ( this.$focusItem ) {\n        this.blurItem(this.$focusItem);\n    }\n\n    if ( this.scroll ) {\n        if ( this.provider ) {\n            if ( this.scroll.realSize !== this.provider.maxCount ) {\n                this.scroll.init({\n                    realSize: this.provider.maxCount,\n                    viewSize: this.provider.size,\n                    value: this.provider.head + this.provider.pos\n                });\n            }\n        } else {\n            this.scroll.init({\n                realSize: this.data.length,\n                viewSize: this.size,\n                value: config.viewIndex || 0\n            });\n        }\n    }\n\n    // set focus item\n    if ( config.focusIndex !== undefined && this.data.length ) {\n        if ( DEVELOP ) {\n            if ( Number(config.focusIndex) !== config.focusIndex ) {\n                throw new Error(__filename + ': config.focusIndex must be a number');\n            }\n            if ( config.focusIndex < 0 ) {\n                throw new Error(__filename + ': config.focusIndex should be positive');\n            }\n            // if ( config.focusIndex > this.data.length - 1 ) {\n            //     throw new Error(__filename + ': config.focusIndex should be less than data size');\n            // }\n        }\n\n        // jump to the necessary item\n        this.focusIndex(config.focusIndex);\n    } else {\n        // go to the first page\n        this.renderView(config.viewIndex || 0);\n    }\n};\n\n\n/**\n * Shift the visible view window event.\n *\n * @event module:stb/ui/list~List#move:view\n *\n * @type {Object}\n * @property {number} prevIndex previous view window position\n * @property {number} currIndex current view window position\n */\n\n\n/**\n * Draw the visible window.\n *\n * @param {number} index start position to render\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/ui/list~List#move:view\n */\nList.prototype.renderView = function ( index ) {\n    var $item, idx, itemData, prevIndex, currIndex;\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( Number(index) !== index ) {\n            throw new Error(__filename + ': index must be a number');\n        }\n        if ( index < 0 ) {\n            throw new Error(__filename + ': index should be more than zero');\n        }\n        // if ( index >= this.data.length ) {\n        //     throw new Error(__filename + ': index should be less than data size');\n        // }\n    }\n\n    // has the view window position changed\n    if ( this.viewIndex !== index ) {\n        // save for emit\n        prevIndex = this.viewIndex;\n        // sync global pointer\n        this.viewIndex = currIndex = index;\n\n        // rebuild all visible items\n        for ( idx = 0; idx < this.size; idx++ ) {\n            // shortcuts\n            $item    = this.$body.children[idx];\n            itemData = this.data[index];\n\n            // real item or stub\n            if ( itemData ) {\n                // correct inner data/index and render\n                $item.data  = itemData;\n                $item.index = index;\n                this.renderItem($item, itemData);\n\n                // apply CSS\n                if ( itemData.mark ) {\n                    $item.classList.add('mark');\n                } else {\n                    $item.classList.remove('mark');\n                }\n            } else {\n                // nothing to render\n                $item.data = $item.index = undefined;\n                $item.innerHTML = '&nbsp;';\n                $item.ready = false;\n            }\n            index++;\n        }\n\n        // there are some listeners\n        if ( this.events['move:view'] ) {\n            // notify listeners\n            this.emit('move:view', {prevIndex: prevIndex, currIndex: currIndex});\n        }\n\n        // there are some listeners\n        if ( this.events['select:item'] ) {\n            this.emit('select:item', {$item: $item});\n        }\n\n        // update a linked scroll component\n        if ( this.scroll ) {\n            this.scroll.scrollTo(this.provider ? this.provider.head + this.provider.pos : this.viewIndex);\n        }\n\n        // full rebuild\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Move focus to the given direction.\n *\n * @param {number} direction arrow key code\n *\n * @fires module:stb/ui/list~List#cycle\n * @fires module:stb/ui/list~List#overflow\n */\nList.prototype.move = function ( direction ) {\n    var self = this,\n        force = false;\n\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( Number(direction) !== direction ) {\n            throw new Error(__filename + ': direction must be a number');\n        }\n    }\n\n    // empty list\n    if ( !this.data.length ) {\n        return;\n    }\n\n    switch ( direction ) {\n        case keys.left:\n            if ( this.type === this.TYPE_HORIZONTAL ) {\n                force = true;\n            } else {\n                break;\n            }\n        case keys.up:\n            if ( force || this.type === this.TYPE_VERTICAL ) {\n                if ( this.$focusItem && this.$focusItem.index > 0 ) {\n                    if ( this.$focusItem === this.$body.firstChild ) {\n                        this.renderView(this.viewIndex - 1);\n                    } else {\n                        this.focusItem(this.$focusItem.previousSibling);\n                    }\n                } else if ( this.provider ) {\n                    if ( this.provider.blocked ) {\n                        return;\n                    }\n\n                    this.provider.get(direction, function ( error, data, pos ) {\n                        if ( error ) {\n                            if ( self.events['data:error'] ) {\n                                /**\n                                     * Provider get error while take new data\n                                     *\n                                     * @event module:stb/ui/list~List#data:error\n                                     */\n                                self.emit('data:error', error);\n                            }\n                        } else if ( data ) {\n                            self.setData({data: data, focusIndex: pos || pos === 0 ? pos : self.$focusItem.index});\n                        }\n                    });\n                } else {\n                    // already at the beginning\n                    if ( this.cycle ) {\n                        // jump to the end of the list\n                        this.move(keys.end);\n                    }\n                    if ( this.events['overflow'] ) {\n                        // notify listeners\n                        this.emit('overflow', {direction: direction, cycle: this.cycle});\n                    }\n                }\n            }\n            break;\n        case keys.right:\n            if ( this.type === this.TYPE_HORIZONTAL ) {\n                force = true;\n            } else {\n                break;\n            }\n        case keys.down:\n            if ( force || this.type === this.TYPE_VERTICAL ) {\n                if ( this.$focusItem && this.$focusItem.index < this.data.length - 1 ) {\n                    if ( this.$focusItem === this.$body.lastChild ) {\n                        this.renderView(this.viewIndex + 1);\n                    } else {\n                        this.focusItem(this.$focusItem.nextSibling);\n                    }\n                } else if ( this.provider ) {\n                    if ( this.provider.blocked ) {\n                        return;\n                    }\n\n                    this.provider.get(direction, function ( error, data, pos ) {\n                        if ( error ) {\n                            if ( self.events['data:error'] ) {\n                                /**\n                                     * Provider get error while take new data\n                                     *\n                                     * @event module:stb/ui/list~List#data:error\n                                     */\n                                self.emit('data:error', error);\n                            }\n                        } else if ( data ) {\n                            self.setData({data: data, focusIndex: pos || pos === 0 ? pos : self.$focusItem.index});\n                        }\n                    });\n                } else {\n                    // already at the beginning\n                    if ( this.cycle ) {\n                        // jump to the beginning of the list\n                        this.move(keys.home);\n                    }\n                    if ( this.events['overflow'] ) {\n                        // notify listeners\n                        this.emit('overflow', {direction: direction, cycle: this.cycle});\n                    }\n                }\n            }\n            break;\n        case keys.pageUp:\n            if ( this.provider ) {\n                if ( this.provider.blocked ) {\n                    return;\n                }\n\n                this.provider.get(direction, function ( error, data, pos ) {\n                    if ( error ) {\n                        if ( self.events['data:error'] ) {\n                            /**\n                             * Provider get error while take new data\n                             *\n                             * @event module:stb/ui/list~List#data:error\n                             */\n                            self.emit('data:error', error);\n                        }\n                    } else if ( data ) {\n                        self.setData({data: data, focusIndex: pos ? pos : 0});\n                    }\n                });\n\n                return;\n            }\n            if ( this.viewIndex < this.size ) {\n                // first page\n                this.renderView(0);\n            } else {\n                // second page and further\n                this.renderView(this.viewIndex - this.size + 1);\n            }\n\n            this.focusItem(this.$body.firstChild);\n            break;\n        case keys.pageDown:\n            if ( this.provider ) {\n                if ( this.provider.blocked ) {\n                    return;\n                }\n\n                this.provider.get(direction, function ( error, data, pos ) {\n                    var focusIndex;\n\n                    if ( error ) {\n                        if ( self.events['data:error'] ) {\n                            /**\n                             * Provider get error while take new data\n                             *\n                             * @event module:stb/ui/list~List#data:error\n                             */\n                            self.emit('data:error', error);\n                        }\n                    } else if ( data ) {\n                        if ( pos || pos === 0 ) {\n                            focusIndex = pos;\n                        } else {\n                            focusIndex = data.length < self.size ?  data.length - 1 : self.size - 1;\n                        }\n\n                        self.setData({data: data, focusIndex: focusIndex});\n                    }\n                });\n                break;\n            }\n            // data is bigger then one page\n            if ( this.data.length > this.size ) {\n                // determine jump size\n                if ( this.viewIndex > this.data.length - this.size * 2 ) {\n                    // last page\n                    this.renderView(this.data.length - this.size);\n                } else {\n                    // before the last page\n                    this.renderView(this.viewIndex + this.size - 1);\n                }\n                this.focusItem(this.$body.lastChild);\n            } else {\n                // not the last item on the page\n                this.focusItem(this.$body.children[this.data.length - 1]);\n            }\n            break;\n        case keys.home:\n            if ( this.provider ) {\n                if ( this.provider.blocked ) {\n                    return;\n                }\n\n                this.provider.get(direction, function ( error, data, pos ) {\n                    if ( error ) {\n                        if ( self.events['data:error'] ) {\n                            /**\n                             * Provider get error while take new data\n                             *\n                             * @event module:stb/ui/list~List#data:error\n                             */\n                            self.emit('data:error', error);\n                        }\n                    } else if ( data ) {\n                        self.setData({data: data, focusIndex: pos ? pos : 0});\n                    }\n                });\n                break;\n            }\n            this.renderView(0);\n            this.focusItem(this.$body.firstChild);\n            break;\n        case keys.end:\n            if ( this.provider ) {\n                if ( this.provider.blocked ) {\n                    return;\n                }\n\n                this.provider.get(direction, function ( error, data, pos ) {\n                    var focusIndex;\n\n                    if ( error ) {\n                        if ( self.events['data:error'] ) {\n                            /**\n                             * Provider get error while take new data\n                             *\n                             * @event module:stb/ui/list~List#data:error\n                             */\n                            self.emit('data:error', error);\n                        }\n                    } else if ( data ) {\n                        if ( pos || pos === 0 ) {\n                            focusIndex = pos;\n                        } else {\n                            focusIndex = data.length < self.size ?  data.length - 1 : self.size - 1;\n                        }\n\n                        self.setData({data: data, focusIndex: focusIndex});\n                    }\n                });\n                break;\n            }\n            if ( this.data.length > this.size ) {\n                this.renderView(this.data.length - this.size);\n                this.focusItem(this.$body.lastChild);\n            } else {\n                // not the last item on the page\n                this.focusItem(this.$body.children[this.data.length - 1]);\n            }\n            break;\n    }\n};\n\n\n/**\n * Highlight the given DOM element as focused.\n * Remove focus from the previously focused item and generate associated event.\n *\n * @param {Node|Element} $item element to focus\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/ui/list~List#focus:item\n * @fires module:stb/ui/list~List#blur:item\n */\nList.prototype.focusItem = function ( $item ) {\n    var $prev = this.$focusItem;\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n    }\n\n    // different element\n    if ( $item && $prev !== $item ) {\n        if ( DEVELOP ) {\n            if ( !($item instanceof Element) ) {\n                throw new Error(__filename + ': wrong $item type');\n            }\n            if ( $item.parentNode !== this.$body ) {\n                throw new Error(__filename + ': wrong $item parent element');\n            }\n        }\n\n        // some item is focused already\n        if ( $prev !== null ) {\n            if ( DEVELOP ) {\n                if ( !($prev instanceof Element) ) {\n                    throw new Error(__filename + ': wrong $prev type');\n                }\n            }\n\n            // style\n            $prev.classList.remove('focus');\n            //$prev.classList.remove('theme-focus');\n\n            // there are some listeners\n            if ( this.events['blur:item'] ) {\n                /**\n                 * Remove focus from an element.\n                 *\n                 * @event module:stb/ui/list~List#blur:item\n                 *\n                 * @type {Object}\n                 * @property {Element} $item previously focused HTML element\n                 */\n                this.emit('blur:item', {$item: $prev});\n            }\n        }\n        // reassign\n        this.$focusItem = $item;\n\n        this.$focusItem.data = this.data[this.$focusItem.index];\n\n        // correct CSS\n        $item.classList.add('focus');\n        //$item.classList.add('theme-focus');\n\n        // there are some listeners\n        if ( this.events['focus:item'] ) {\n            /**\n             * Set focus to a DOM element.\n             *\n             * @event module:stb/ui/list~List#focus:item\n             *\n             * @type {Object}\n             * @property {Element} $prev old/previous focused HTML element\n             * @property {Element} $curr new/current focused HTML element\n             */\n            this.emit('focus:item', {$prev: $prev, $curr: $item});\n        }\n\n        // there are some listeners\n        if ( this.events['select:item'] ) {\n            /**\n             * Set focus to a list item.\n             *\n             * @event module:stb/ui/list~List#select:item\n             *\n             * @type {Object}\n             * @property {Element} $item new/current focused item\n             */\n            this.emit('select:item', {$item: $item});\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n/**\n * Highlight the given DOM element as blur.\n * Remove focus from the item and generate associated event.\n *\n * @param {Node|Element} $item element to focus\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/ui/list~List#focus:item\n * @fires module:stb/ui/list~List#blur:item\n */\nList.prototype.blurItem = function ( $item ) {\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) { throw new Error(__filename + ': wrong arguments number'); }\n    }\n\n    // different element\n    if ( $item ) {\n        if ( $item === this.$focusItem ) {\n            this.$focusItem = null;\n        }\n\n        $item.classList.remove('focus');\n        //$item.classList.remove('theme-focus');\n\n        // there are some listeners\n        if ( this.events['blur:item'] ) {\n            /**\n             * Remove focus from an element.\n             *\n             * @event module:stb/ui/list~List#blur:item\n             *\n             * @type {Object}\n             * @property {Element} $item previously focused HTML element\n             */\n            this.emit('blur:item', {$item: $item});\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n/**\n * Set the given item focused by item index.\n *\n * @param {number} index item data index\n */\nList.prototype.focusIndex = function ( index ) {\n    var viewIndex = this.viewIndex || 0;\n\n    if ( DEVELOP ) {\n        if ( Number(index) !== index ) {\n            throw new Error(__filename + ': index must be a number');\n        }\n        if ( index < 0 ) {\n            throw new Error(__filename + ': index should be positive');\n        }\n        // if ( index > this.data.length - 1 ) {\n        //     throw new Error(__filename + ': index should be less than data size');\n        // }\n    }\n\n    // determine direction\n    if ( index >= viewIndex + this.size ) {\n        // check range\n        index = index < this.data.length - 1 ? index : this.data.length - 1;\n        // move down\n        this.renderView(index - this.size + 1);\n        this.focusItem(this.$body.lastChild);\n    } else if ( index < viewIndex ) {\n        // check range\n        index = index > 0 ? index : 0;\n        // move up\n        this.renderView(index);\n        this.focusItem(this.$body.firstChild);\n    } else {\n        // no move\n        if ( this.viewIndex === null ) {\n            // first attempt\n            this.renderView(0);\n        }\n        this.focusItem(this.$body.children[index - viewIndex]);\n    }\n};\n\n\n/**\n * Set item state and appearance as marked.\n *\n * @param {Node|Element} $item element to focus\n * @param {boolean} state true - marked, false - not marked\n */\nList.prototype.markItem = function ( $item, state ) {\n    if ( DEVELOP ) {\n        if ( arguments.length !== 2 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( !($item instanceof Element) ) {\n            throw new Error(__filename + ': wrong $item type');\n        }\n        if ( $item.parentNode !== this.$body ) {\n            throw new Error(__filename + ': wrong $item parent element');\n        }\n        if ( Boolean(state) !== state ) {\n            throw new Error(__filename + ': state must be boolean');\n        }\n    }\n\n    // correct CSS\n    if ( state ) {\n        $item.classList.add('mark');\n    } else {\n        $item.classList.remove('mark');\n    }\n\n    // apply flag\n    $item.data.mark = state;\n};\n\n\n// public\nmodule.exports = List;\n","/**\n * Application geometry options.\n * Automatically loaded on application initialization and available as app.metrics.\n */\n\n'use strict';\n\nvar metrics = {\n    480: {\n        epgGrid: 6,\n        scheduleWidth: 372,\n        timeStep: 90 * 60,\n        countOfSteps: 3,\n        timeLineMargin: 250,\n        itemHeight: 38,\n        timeLineTop: 2\n    },\n\n    576: {\n        epgGrid: 9,\n        scheduleWidth: 372,\n        timeStep: 90 * 60,\n        countOfSteps: 3,\n        timeLineMargin: 250,\n        itemHeight: 38,\n        timeLineTop: 2\n    },\n\n    720: {\n        epgGrid: 9,\n        scheduleWidth: 830,\n        timeStep: 150 * 60,\n        countOfSteps: 5,\n        timeLineMargin: 350,\n        itemHeight: 48,\n        timeLineTop: 2\n    },\n\n    1080: {\n        epgGrid: 9,\n        scheduleWidth: 1245,\n        timeStep: 150 * 60,\n        countOfSteps: 5,\n        timeLineMargin: 350 * 1.5,\n        itemHeight: 48 * 1.5,\n        timeLineTop: 2\n    }\n};\n\n// public\nmodule.exports = metrics[screen.height];\n","/**\n * @license The MIT License (MIT)\n * @copyright Boris Aleynikov <aleynikov.boris@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('stb-component'),\n    keys      = require('stb-keys');\n\n/**\n * Magsdk panel set implementation\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {Array} [config.panels] array of panels to use\n * @param {Array} [config.focusIndex=0] focus panel index\n * @constructor\n * @extends Component\n */\nfunction PanelSet ( config ) {\n    var self = this,\n        index;\n\n    config = config || {};\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n        if ( config.panels && !Array.isArray(config.panels) || !config.panels.length ) {\n            throw new Error(__filename + ': wrong config.panels type');\n        }\n    }\n\n    // can't accept focus\n    config.focusable = config.focusable || false;\n\n    // set default className if classList property empty or undefined\n    //config.className = 'panelSet ' + (config.className || '');\n\n    // parent constructor call\n    Component.call(this, config);\n\n    this.panels = config.panels;\n\n    /**\n     * Index of current active panel\n     *\n     * @type {number}\n     */\n    this.focusIndex = 0;\n\n    // set special panels classes\n    if ( config.panels && !config.panels[0].main ) {\n        config.panels[0].$node.classList.add('left');\n        // small resolution special class\n        config.panels[0].$node.classList.add('expand');\n    }\n\n    if (  config.panels && config.panels[1] && config.panels[1].main ) {\n        // small resolution special class\n        config.panels[1].$node.classList.add('position-right');\n    }\n\n    if ( config.panels && config.panels[2] && config.panels[1].main ) {\n        config.panels[2].$node.classList.add('right');\n    }\n\n    // add panels\n    if ( config.panels ) {\n        this.add.apply(this, config.panels);\n    }\n\n    // panel keydown handler to set focus panel\n    function keydownHandler ( event ) {\n        switch ( event.code ) {\n            case keys.left:\n                if ( self.focusIndex > 0 ) {\n                    self.panels[self.focusIndex - 1].focus();\n                }\n                break;\n            case keys.right:\n                if ( self.focusIndex < self.panels.length - 1 ) {\n                    self.panels[self.focusIndex + 1].focus();\n                }\n                break;\n        }\n    }\n\n    // add special listener\n    for ( index = 0; index < this.panels.length; index++ ) {\n        this.panels[index].addListeners({\n            keydown: keydownHandler\n        });\n        // set panels indexes\n        this.panels[index].index = index;\n    }\n\n    /*if ( config.focusIndex && config.focusIndex < this.panels.length ) {\n     this.panels[config.focusIndex].focus();\n     } else {\n     if ( config.panels.length > 1 ) {\n     this.panels[1].focus();\n     } else {\n     this.panels[0].focus();\n     }\n     }*/\n}\n\nPanelSet.prototype = Object.create(Component.prototype);\nPanelSet.prototype.constructor = PanelSet;\n\n// set component name\nPanelSet.prototype.name = 'mag-component-panel-set';\n\n\n/**\n *\n */\nPanelSet.prototype.focus = function () {\n    Component.prototype.focus.call(this);\n    this.panels[this.focusIndex].focus();\n};\n\n/**\n *\n */\nPanelSet.prototype.blur = function () {\n    this.panels[this.focusIndex].blur();\n};\n\nmodule.exports = PanelSet;\n","/**\n * @license The MIT License (MIT)\n * @copyright Boris Aleynikov <aleynikov.boris@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('stb-component'),\n    Layout = require('mag-component-layout');\n\n/**\n * Extended panel implementation\n\n * @constructor\n * @extends Component\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {boolean} [config.main=false] set panel as main\n * @param {boolean} [config.size=1] size of panel width\n *\n * @example\n *\n * main = new Panel({\n *            size: 1,\n *             title: ['Left Panel', {className: 'info'}],\n *             main:true,\n *             children:[\n *                 new List({\n *                     data:['1 bla', '2 bro', '3 car', '4 hoho', 'Search'],\n *                     size:5\n *                 })\n *             ]\n *         });\n */\nfunction Panel ( config ) {\n    var $overlay;\n\n    config = config || {};\n\n    /**\n     * Size of panel\n     *\n     * @type {number}\n     */\n    this.size = 1;\n\n    /**\n     * Set panel as main\n     *\n     * @type {boolean}\n     */\n    this.main = false;\n\n    /**\n     * Index in panel set\n     *\n     * @type {number}\n     */\n    this.index = 0;\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n    }\n\n    // set default className if classList property empty or undefined\n    //config.className = 'Panel ' + (config.className || '');\n\n    config.$body = document.createElement('div');\n    config.$body.className = 'body';\n\n    // parent constructor call\n    Component.call(this, config);\n\n    //this.$node.classList.add('theme-main');\n    //this.$node.classList.add('theme-panel');\n\n    // add special class to set component size\n    if ( config.size ) {\n        this.size = config.size;\n        this.$node.classList.add('size' + config.size);\n    }\n\n    // add special class to set main panel\n    if ( config.main ) {\n        this.main = true;\n        this.$node.classList.add('main');\n    }\n\n    // create elements to set as component shadow\n    this.$shadow = {\n        left: document.createElement('div'),\n        right: document.createElement('div')\n    };\n\n    this.$shadow.left.className = 'shadow left';\n    this.$node.appendChild(this.$shadow.left);\n\n    this.$shadow.right.className = 'shadow right';\n    this.$node.appendChild(this.$shadow.right);\n\n    // add title to panel\n    if ( config.title ) {\n        if ( !Array.isArray(config.title) ) {\n            config.title = [config.title];\n        }\n        this.$title = new Layout({\n            //className: 'title theme-header theme-title',\n            className: 'title',\n            data: config.title,\n            focusable: false\n        });\n        this.$node.appendChild(this.$title.$node);\n    }\n\n    this.$node.appendChild(this.$body);\n\n    $overlay = document.createElement('div');\n    $overlay.className = 'overlay';\n    this.$node.appendChild($overlay);\n}\n\n// inheritance\nPanel.prototype = Object.create(Component.prototype);\nPanel.prototype.constructor = Panel;\n\n// set component name\nPanel.prototype.name = 'mag-component-panel';\n\n\n/**\n * Default events\n *\n * @type {{focus: Function}} try to focus first child component if it present\n */\nPanel.prototype.defaultEvents = {\n    focus: function () {\n        if ( this.children.length ) {\n            this.children[0].focus();\n        }\n    }\n};\n\n\n/**\n * Redefine default component focus to set panel as active even when give focus to children components\n */\nPanel.prototype.focus = function () {\n    if ( this.focusable ) {\n        this.parent.panels[this.parent.focusIndex].$node.classList.remove('active');\n        this.parent.panels[this.parent.focusIndex].$node.classList.remove('top');\n        Component.prototype.focus.call(this);\n        this.parent.focusIndex = this.index;\n        this.$node.classList.add('active');\n        this.$node.classList.add('top');\n        if ( this.index === 0 && this.parent.panels[1] && this.parent.panels[1].main ) {\n            this.parent.panels[1].$node.classList.remove('position-left');\n            this.parent.panels[1].$node.classList.add('position-right');\n            if ( this.parent.panels[2] ) {\n                this.parent.panels[2].$node.classList.remove('expand');\n            }\n            this.$node.classList.add('expand');\n\n        } else if ( this.index === 2 && this.parent.panels[1].main ) {\n            this.parent.panels[1].$node.classList.remove('position-right');\n            this.parent.panels[1].$node.classList.add('position-left');\n            this.parent.panels[0].$node.classList.remove('expand');\n            this.$node.classList.add('expand');\n        }\n    }\n};\n\n/**\n * Blur panel\n */\nPanel.prototype.blur = function () {\n    this.parent.panels[this.parent.focusIndex].$node.classList.remove('active');\n    Component.prototype.blur.call(this);\n};\n\n\n// public\nmodule.exports = Panel;\n","/**\n * @license The MIT License (MIT)\n * @copyright Boris Aleynikov <aleynikov.boris@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar List             = require('mag-component-list'),\n    classChecked     = 'checked',\n    classIcon        = 'theme-icon theme-icon-radio',\n    classIconActive  = 'theme-icon theme-icon-radio-active';\n\n\n/**\n * Base radio list implementation\n *\n * @constructor\n * @extends List\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {string} [config.classIcon] icon default state class name\n * @param {string} [config.classIconActive] icon active state class name\n * @param {string} [config.classChecked] checked item class\n */\nfunction RadioList ( config ) {\n    var self = this;\n\n    if ( config.classIcon ) {\n        classIcon = config.classIcon;\n    }\n    if ( config.classIconActive ) {\n        classIconActive = config.classIconActive;\n    }\n    if ( config.classChecked ) {\n        classIcon = config.classChecked;\n    }\n\n    /**\n     * Checked item data\n     *\n     * @type {Element}\n     */\n    this.checkedData = null;\n\n    /**\n     * Checked element index\n     *\n     * @type {number}\n     */\n    this.checkedIndex = null;\n\n    List.call(this, config);\n\n    this.addListener('click:item', function ( event ) {\n        var $item = event.$item,\n            previousCheckedData = self.checkedData;\n\n        self.checkIndex($item.index);\n\n        if ( previousCheckedData !== $item.data ) {\n            /**\n             * Select element from list\n             *\n             * @event select\n             * @property {Element} $item object\n             */\n            self.emit('select', $item);\n        }\n    });\n}\n\n\nRadioList.prototype = Object.create(List.prototype);\nRadioList.prototype.constructor = RadioList;\n\n// set component name\nRadioList.prototype.name = 'mag-component-radio-list';\n\nRadioList.prototype.init = function ( config ) {\n    config = config || {};\n    List.prototype.init.call(this, config);\n};\n\n\n/**\n * Set data and render inner structures and HTML.\n *\n * @param {Object} config init parameters (subset of constructor config params)\n */\nRadioList.prototype.setData = function ( config ) {\n    List.prototype.setData.call(this, config);\n\n    this.defaultCheckedIndex = this.checkedIndex;\n\n    if ( this.$focusItem ) {\n        this.defaultFocusIndex = this.$focusItem.index;\n    } else {\n        this.defaultFocusIndex = 0;\n    }\n};\n\n\n/**\n * Reset data to default state and render inner structures and HTML.\n */\nRadioList.prototype.resetData = function () {\n    this.checkIndex(this.defaultCheckedIndex);\n    this.focusIndex(this.defaultFocusIndex);\n};\n\n\n/**\n * Set all states to false and render inner structures and HTML.\n *\n * @param {number} [focusIndex] focus index\n */\nRadioList.prototype.clearChecked = function ( focusIndex ) {\n    var index = 0;\n\n    for ( index; index < this.data.length; index++ ) {\n        this.data[index].state = false;\n    }\n\n    // no focusIndex, focusIndex may be 0\n    if ( !focusIndex && focusIndex !== 0 ) {\n        focusIndex = this.$focusItem ? this.$focusItem.index : 0;\n    }\n\n    this.setData({data: this.data, focusIndex: focusIndex});\n};\n\n\n/**\n * Default render function\n *\n * @param {Element} $item in list\n * @param {Object} data to render layout element\n * @param {string} [data.title] title of checkbox\n * @param {boolean} [data.state] state of checkbox: checked or not\n * @param {string} [data.value] special value of item\n */\nRadioList.prototype.renderItemDefault = function ( $item, data ) {\n    var table,\n        tr,\n        td,\n        check;\n\n    if ( $item.ready ) {\n        $item.$title.innerText = data.title || '';\n\n        if ( data.state ) {\n            $item.classList.add(classChecked);\n            $item.checkBox.className = classIconActive;\n        } else {\n            $item.classList.remove(classChecked);\n            $item.checkBox.className = classIcon;\n        }\n\n        $item.state = data.state;\n        $item.value = data.value;\n\n    } else {\n        $item.innerHTML = '';\n        table = document.createElement('table');\n        tr = document.createElement('tr');\n        td = document.createElement('td');\n        check = document.createElement('div');\n\n        if ( data.state ) {\n            $item.classList.add(classChecked);\n            check.className = classIconActive;\n        } else {\n            $item.classList.remove(classChecked);\n            check.className = classIcon;\n        }\n\n        table.appendChild(tr);\n        td.appendChild(check);\n\n        td.className = 'checkBoxWrapper';\n        tr.appendChild(td);\n\n        td = document.createElement('td');\n        td.className = 'title';\n        td.innerText = data.title || '';\n        tr.appendChild(td);\n\n        $item.checkBox = check;\n        $item.state = data.state;\n        $item.value = data.value;\n        $item.$title = td;\n\n        $item.appendChild(table);\n\n        if ( data.state ) {\n            this.checkedData = data;\n            this.checkedIndex = $item.index;\n        }\n\n        $item.ready = true;\n    }\n};\n\n\n/**\n * Check element by index\n *\n * @param {number} index of element to check\n */\nRadioList.prototype.checkIndex = function ( index ) {\n    var $node;\n\n    if ( DEVELOP ) {\n        if ( index >= this.data.length ) {\n            throw new Error(__filename + ': wrong index to check');\n        }\n    }\n\n    // do not need to do the same\n    if ( index === this.checkedIndex ) { return; }\n\n    if ( this.checkedIndex !== null && this.$node.children.length ) {\n        this.data[this.checkedIndex].state = false;\n        $node = this.getItemNodeByIndex(this.checkedIndex);\n        if ( $node ) {\n            $node.checkBox.className = classIcon;\n            $node.classList.remove(classChecked);\n        }\n    }\n\n    $node = this.getItemNodeByIndex(index);\n    if ( $node ) {\n        $node.checkBox.className = classIconActive;\n        $node.classList.add(classChecked);\n        $node.state = true;\n    }\n\n    this.data[index].state = true;\n    this.checkedData = this.data[index];\n    this.checkedIndex = index;\n};\n\n\n/**\n * Get list item node by item index\n *\n * @param {number} index of item to find node\n * @return {?Element} item node link\n */\nRadioList.prototype.getItemNodeByIndex = function ( index ) {\n    var children = this.$node.children;\n\n    index -= this.viewIndex;\n    if ( index < this.size && index >= 0 ) {\n        return children[index];\n    }\n\n    return null;\n};\n\nRadioList.prototype.renderItem = RadioList.prototype.renderItemDefault;\n\nmodule.exports = RadioList;\n","/**\n * Main application entry point.\n *\n * @author Stanislav Kalashnik <sk@infomir.eu>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\nvar app     = require('mag-app'),\n    keys    = require('stb-keys'),\n    gettext = require('spa-gettext');\n\nrequire('./modules/find-index-polyfill');\n\nif ( TARGET === 'android-stb' || TARGET === 'android-app' ) {\n    window.removeEventListener('keydown', require('spa-app/lib/events').keydown);\n    require('../../../helpers/longpress.js')(app, {code: keys.ok, emitCode: keys.menu});\n}\n\n\napp.intents = {\n    osdInput: null,\n    osdTv: null\n};\n\n\n// everything is ready\napp.once('load', function () {\n    if ( TARGET === 'dvb' ) {\n        app.provider = core.plugins.dvb;\n    } else {\n        app.provider = core.plugins.tvBackend;\n    }\n\n    gettext.load({name: core.environment.language || 'en'}, function ( error ) {\n        var EpgPage = require('./modules/epg-page/index'),\n            epg = new EpgPage({\n                $node: document.getElementById('pageEpg'),\n                apiProvider: app.provider\n            });\n\n        epg.addListener('back', function ( item ) {\n            app.route(app.pages.main, item);\n        });\n\n        if ( error ) {\n            // err handler\n        }\n\n        // add intent handler to show app on incoming intent\n        core.addListener('intent', function ( intent, callback ) { callback(false, {}); });\n\n        app.pages = {\n            main: require('./pages/channels'),\n            epg: epg\n        };\n\n\n        if ( TARGET === 'dvb' ) {\n            app.pages.scanOptions = require('./pages/scan.options');\n            app.pages.scanning = require('./pages/scanning');\n        }\n\n        app.route(app.pages.main);\n\n    });\n});\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app    = require('spa-app/lib/core'),\n    events = require('spa-app/lib/events');\n\n\n// get instance\nwindow.core = window.parent.getCoreInstance(window, app);\n\n// shims\nrequire('stb-shim-classlist');\n\n// apply geometry\nrequire('stb-app/lib/metrics');\n\n// load sdk css\nrequire('stb-app/lib/css')('sdk');\n\n// load theme css\nrequire('./css');\n\n// load app css\nrequire('stb-app/lib/css')('app');\n\n/**\n * Specify platform name\n *\n * @type {string}\n */\napp.platform = 'mag';\n\n/**\n * Show app.\n */\napp.ready = function () {\n    // if ( this.events['show'] ) {\n    //     this.emit('show');\n    // }\n    window.core.call('app:ready');\n};\n\n\n/**\n * Exit from app.\n * Destroy all application instance.\n * If callback function provided, and callback returns boolean 'true', application will stay alive.\n *\n * @fires module:/stb/app#exit\n */\napp.exit = function () {\n    if ( app.events['exit'] ) {\n        app.emit('exit');\n    }\n\n    core.call('exit');\n};\n\n\nevents.load = function ( event ) {\n    //window.core = window.parent.getCoreInstanse(window, app);\n    document.body.setAttribute('platform', app.platform);\n\n    if ( core.ready ) {\n        if ( app.events['load'] ) {\n            // notify listeners\n            app.emit('load', {});\n        }\n    } else {\n        core.once('load', function () {\n            //core.ready = true;\n            if ( app.events[event.type] ) {\n                // notify listeners\n                app.emit(event.type, event);\n            }\n        });\n    }\n};\n\n\n// activate development mechanisms and tools\nif ( DEVELOP ) {\n    //require('stb-develop');\n    require('./develop/main');\n} else {\n    // disable context menu\n    events.contextmenu = function ( event ) {\n        event.preventDefault();\n    };\n}\n\n\n//apply DOM events\nObject.keys(events).forEach(function ( name ) {\n    window.addEventListener(name, events[name]);\n});\n\n\n// new way of string handling\n// all strings are in UTF-16\n// since stbapp 2.18\n// if ( window.gSTB && gSTB.SetNativeStringMode ) {\n//     /* eslint new-cap: 0 */\n//     gSTB.SetNativeStringMode(true);\n// }\n\n// public\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nmodule.exports = {\n    /**\n     * Parse the given location search string into object.\n     *\n     * @param {string} query string to parse\n     *\n     * @return {Object.<string, string>} result data\n     */\n    parse: function ( query ) {\n        var data = {};\n\n        // parse and fill the data\n        query.split('&').forEach(function ( part ) {\n            part = part.split('=');\n            // valid number on params\n            if ( part.length === 2 ) {\n                data[part[0]] = decodeURIComponent(part[1]);\n            }\n        });\n\n        return data;\n    },\n\n\n    /**\n     * Make uri query part in a string form.\n     *\n     * @param {Object} params data to stringify\n     *\n     * @return {string} query string\n     */\n    stringify: function ( params ) {\n        var data = [];\n\n        Object.keys(params).forEach(function ( name ) {\n            data.push(name + '=' + encodeURIComponent(params[name]));\n        });\n\n        return data.join('&');\n    }\n};\n","/**\n * Global application configuration.\n * Can store run-time options, API urls, paths, execution flags and so on.\n * Automatically loaded on application initialization and available as app.config.\n */\n\n'use strict';\n\n// public\nmodule.exports = {};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('./core');\n\n\n// public\nmodule.exports = {\n    DOMContentLoaded: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // there are some listeners\n        if ( app.events['dom'] ) {\n            // notify listeners\n            app.emit('dom', event);\n            //console.log('DOMContentLoaded');\n        }\n    },\n\n    /**\n     * The load event is fired when a resource and its dependent resources have finished loading.\n     *\n     * Control flow:\n     *   1. Global handler.\n     *   2. Each page handler.\n     *   3. Application DONE event.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/load\n     *\n     * @param {Event} event generated object with event data\n     */\n    load: function ( event ) {\n        //var path;\n\n        //debug.event(event);\n        //console.log(event);\n\n        // time mark\n        //app.data.time.load = event.timeStamp;\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // global handler\n        // there are some listeners\n        if ( app.events[event.type] ) {\n            // notify listeners\n            app.emit(event.type, event);\n        }\n\n        // local handler on each page\n        /*router.pages.forEach(function forEachPages ( page ) {\n         debug.log('component ' + page.constructor.name + '.' + page.id + ' load', 'green');\n\n         // there are some listeners\n         if ( page.events[event.type] ) {\n         // notify listeners\n         page.emit(event.type, event);\n         }\n         });*/\n\n        // time mark\n        //app.data.time.done = +new Date();\n\n        // everything is ready\n        // and there are some listeners\n        // if ( app.events['done'] ) {\n        //     // notify listeners\n        //     app.emit('done', event);\n        // }\n    },\n\n    /**\n     * The unload event is fired when the document or a child resource is being unloaded.\n     *\n     * Control flow:\n     *   1. Each page handler.\n     *   2. Global handler.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/unload\n     *\n     * @param {Event} event generated object with event data\n     */\n    unload: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // global handler\n        // there are some listeners\n        if ( app.events[event.type] ) {\n            // notify listeners\n            app.emit(event.type, event);\n        }\n\n        // local handler on each page\n        /*router.pages.forEach(function forEachPages ( page ) {\n         debug.log('component ' + page.constructor.name + '.' + page.id + ' unload', 'red');\n\n         // there are some listeners\n         if ( page.events[event.type] ) {\n         // notify listeners\n         page.emit(event.type, event);\n         }\n         });*/\n    },\n\n    /**\n     * The error event is fired when a resource failed to load.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/error\n     *\n     * @param {Event} event generated object with event data\n     */\n    error: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n        //debug.fail('app event: ' + event.message, event, {tags: [event.type, 'event']});\n        console.error('app event: ' + event.message, event);\n    },\n\n    /**\n     * The keydown event is fired when a key is pressed down.\n     * Set event.stop to true in order to prevent bubbling.\n     *\n     * Control flow:\n     *   1. Current active component on the active page.\n     *   2. Current active page itself.\n     *   3. Application.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/keydown\n     *\n     * @param {Event} event generated object with event data\n     */\n    keydown: function ( event ) {\n        var page = app.activePage,\n            eventLocal = {\n                code: event.keyCode,\n                stop: false\n            },\n            activeComponent;\n\n        if ( DEVELOP ) {\n            if ( !page ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        // filter phantoms\n        //if ( event.keyCode === 0 ) { return; }\n\n        // combined key code\n        //event.code = event.keyCode;\n\n        // apply key modifiers\n        if ( event.ctrlKey )  { eventLocal.code += 'c'; }\n        if ( event.altKey )   { eventLocal.code += 'a'; }\n        if ( event.shiftKey ) { eventLocal.code += 's'; }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type + ' - ' + eventLocal.code, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type + ' - ' + eventLocal.code, event);\n\n        // page.activeComponent can be set to null in event handles\n        activeComponent = page.activeComponent;\n\n        // current component handler\n        if ( activeComponent && activeComponent !== page ) {\n            // component is available and not page itself\n            if ( activeComponent.events[event.type] ) {\n                // there are some listeners\n                activeComponent.emit(event.type, eventLocal, event);\n            }\n\n            // todo: bubble event recursively\n            // bubbling\n            if (\n                !eventLocal.stop &&\n                activeComponent.propagate &&\n                activeComponent.parent &&\n                activeComponent.parent.events[event.type]\n            ) {\n                activeComponent.parent.emit(event.type, eventLocal, event);\n            }\n        }\n\n        // page handler\n        if ( !eventLocal.stop ) {\n            // not prevented\n            if ( page.events[event.type] ) {\n                // there are some listeners\n                page.emit(event.type, eventLocal, event);\n            }\n\n            // global app handler\n            if ( !event.stop ) {\n                // not prevented\n                if ( app.events[event.type] ) {\n                    // there are some listeners\n                    app.emit(event.type, eventLocal, event);\n                }\n            }\n        }\n\n        //// suppress non-printable keys in stb device (not in your browser)\n        //if ( app.data.host && keyCodes[event.code] ) {\n        //    event.preventDefault();\n        //}\n    },\n\n    /**\n     * The keypress event is fired when press a printable character.\n     * Delivers the event only to activeComponent at active page.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/keypress\n     *\n     * @param {Event} event generated object with event data\n     * @param {string} event.char entered character\n     */\n    keypress: function ( event ) {\n        var page = app.activePage;\n\n        if ( DEVELOP ) {\n            if ( page === null || page === undefined ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type + ' - ' + event.key, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type + ' - ' + event.key, event);\n\n        // current component handler\n        if ( page.activeComponent && page.activeComponent !== page ) {\n            // component is available and not page itself\n            if ( page.activeComponent.events[event.type] ) {\n                // there are some listeners\n                page.activeComponent.emit(event.type, event);\n            }\n        }\n    },\n\n    /**\n     * The click event is fired when a pointing device button (usually a mouse button) is pressed and released on a single element.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/click\n     *\n     * @param {Event} event generated object with event data\n     */\n    /*click: function ( event ) {\n     //debug.event(event);\n     //console.log(event);\n     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n     },*/\n\n    /**\n     * The contextmenu event is fired when the right button of the mouse is clicked (before the context menu is displayed),\n     * or when the context menu key is pressed (in which case the context menu is displayed at the bottom left of the focused\n     * element, unless the element is a tree, in which case the context menu is displayed at the bottom left of the current row).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/contextmenu\n     *\n     * @param {Event} event generated object with event data\n     */\n    // contextmenu: function ( event ) {\n    //     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n    //\n    //     if ( !DEVELOP ) {\n    //         // disable right click in release mode\n    //         event.preventDefault();\n    //     }\n    // },\n\n    /*contextmenu: function ( event ) {\n     //var kbEvent = {}; //Object.create(document.createEvent('KeyboardEvent'));\n\n     //debug.event(event);\n     //console.log(event);\n     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n\n     //kbEvent.type    = 'keydown';\n     //kbEvent.keyCode = 8;\n\n     //debug.log(kbEvent.type);\n\n     //globalEventListenerKeydown(kbEvent);\n     //var event = document.createEvent('KeyboardEvent');\n     //event.initEvent('keydown', true, true);\n\n     //document.dispatchEvent(kbEvent);\n\n     if ( !DEVELOP ) {\n     // disable right click in release mode\n     event.preventDefault();\n     }\n     },*/\n\n    /**\n     * The wheel event is fired when a wheel button of a pointing device (usually a mouse) is rotated.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel\n     *\n     * @param {Event} event generated object with event data\n     */\n    mousewheel: function ( event ) {\n        var page = app.activePage;\n\n        if ( DEVELOP ) {\n            if ( page === null || page === undefined ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // current component handler\n        if ( page.activeComponent && page.activeComponent !== page ) {\n            // component is available and not page itself\n            if ( page.activeComponent.events[event.type] ) {\n                // there are some listeners\n                page.activeComponent.emit(event.type, event);\n            }\n        }\n\n        // page handler\n        if ( !event.stop ) {\n            // not prevented\n            if ( page.events[event.type] ) {\n                // there are some listeners\n                page.emit(event.type, event);\n            }\n        }\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint-disable */\n\n'use strict';\n\n\nif ( !document.documentElement.classList ) {\n    var prototype = Array.prototype,\n        indexOf   = prototype.indexOf,\n        slice     = prototype.slice,\n        push      = prototype.push,\n        splice    = prototype.splice,\n        join      = prototype.join;\n\n    window.DOMTokenList = function ( el ) {\n        this._element = el;\n        if (el.className !== this._classCache) {\n            this._classCache = el.className;\n            if (!this._classCache) { return; }\n            var classes = this._classCache.replace(/^\\s+|\\s+$/g,'').split(/\\s+/),\n                i;\n            for (i = 0; i < classes.length; i++) {\n                push.call(this, classes[i]);\n            }\n        }\n    };\n\n    window.DOMTokenList.prototype = {\n        add: function ( token ) {\n            if(this.contains(token)) { return; }\n            push.call(this, token);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        contains: function ( token ) {\n            return indexOf.call(this, token) !== -1;\n        },\n\n        item: function ( index ) {\n            return this[index] || null;\n        },\n\n        remove: function ( token ) {\n            var i = indexOf.call(this, token);\n            if (i === -1) {\n                return;\n            }\n            splice.call(this, i, 1);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        toString: function () {\n            return join.call(this, ' ');\n        },\n\n        toggle: function ( token ) {\n            if (!this.contains(token)) {\n                this.add(token);\n            } else {\n                this.remove(token);\n            }\n            return this.contains(token);\n        }\n    };\n\n    Object.defineProperty(Element.prototype, 'classList', {\n        get: function () {\n            return new window.DOMTokenList(this);\n        }\n    });\n}\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app     = require('spa-app/lib/core'),\n    metrics = require('app:metrics');\n\n\n// global link\napp.metrics = metrics[app.query.screenHeight] || metrics[screen.height] || metrics[720];\n\n// calculate and extend\napp.metrics.availHeight = app.metrics.height - (app.metrics.availTop  + app.metrics.availBottom);\napp.metrics.availWidth  = app.metrics.width  - (app.metrics.availLeft + app.metrics.availRight);\n\n\n// public\n//module.exports = app;\n","/**\n * Application geometry options.\n * Automatically loaded on application initialization and available as app.metrics.\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    480: {\n        // screen base dimension\n        height: 480,\n        width:  720,\n        // safe zone margins\n        availTop:    24,\n        availBottom: 24,\n        availRight:  32,\n        availLeft:   48\n        // project-specific vars\n        // put here ...\n    },\n\n    576: {\n        // screen base dimension\n        height: 576,\n        width:  720,\n        // safe zone margins\n        availTop:    24,\n        availBottom: 24,\n        availRight:  26,\n        availLeft:   54\n        // project-specific vars\n        // put here ...\n    },\n\n    720: {\n        // screen base dimension\n        height: 720,\n        width:  1280,\n        // safe zone margins\n        availTop:    30,\n        availBottom: 30,\n        availRight:  40,\n        availLeft:   40\n        // project-specific vars\n        // put here ...\n    },\n\n    1080: {\n        // screen base dimension\n        height: 1080,\n        width:  1920,\n        // safe zone margins\n        availTop:    45,\n        availBottom: 45,\n        availRight:  60,\n        availLeft:   60\n        // project-specific vars\n        // put here ...\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('spa-app/lib/core'),\n    //metrics = require('app:metrics'),\n    linkCSS;\n\n\n//window.core = window.parent.getCoreInstance(window, app);\n\n\nlinkCSS = document.createElement('link');\nlinkCSS.rel  = 'stylesheet';\nlinkCSS.href = window.core.theme.path + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\ndocument.head.appendChild(linkCSS);\n\n\n// public\nmodule.exports = linkCSS;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n *\n * @return {Gettext} gettext instance\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    // make it global\n    window.gettext  = window._ = gettext.gettext;\n    window.pgettext = gettext.pgettext;\n    window.ngettext = gettext.ngettext;\n\n    return gettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n *\n * @return {boolean} flag is ajax request was made\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        callback(null);\n\n        return false;\n    }\n\n    // yes\n    xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n        var json;\n\n        try {\n            json = JSON.parse(xhr.responseText);\n\n            prepare(json);\n            callback(null);\n\n            // there are some listeners\n            if ( loader.events['load'] ) {\n                // notify listeners\n                loader.emit('load');\n            }\n        } catch ( error ) {\n            xhr.onerror(error);\n        }\n    };\n\n    xhr.ontimeout = xhr.onerror = function ( error ) {\n        prepare();\n        callback(error);\n\n        // there are some listeners\n        if ( loader.events['error'] ) {\n            // notify listeners\n            loader.emit('error', error);\n        }\n    };\n\n    xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n    xhr.send(null);\n\n    return true;\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","/**\n * Array.prototype.findIndex polyfill\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\n */\n\n'use strict';\n\n/*eslint-disable*/\nif (!Array.prototype.findIndex) {\n    Array.prototype.findIndex = function(predicate) {\n        if (this == null) {\n            throw new TypeError('Array.prototype.findIndex called on null or undefined');\n        }\n        if (typeof predicate !== 'function') {\n            throw new TypeError('predicate must be a function');\n        }\n        var list = Object(this);\n        var length = list.length >>> 0;\n        var thisArg = arguments[1];\n        var value;\n\n        for (var i = 0; i < length; i++) {\n            value = list[i];\n            if (predicate.call(thisArg, value, i, list)) {\n                return i;\n            }\n        }\n        return -1;\n    };\n}\n","/**\n * Epg page implementation.\n *\n * @author Stoian Roman <stoyan.roman@gmail.com>\n */\n\n'use strict';\n\n/* eslint max-lines-per-function: 0 */\n\nvar Page = require('stb-component-page'),\n    // page = new Page({$node: document.getElementById('pageEpg')}),\n    // app = require('mag-app'),\n\n    tag = require('spa-dom').tag,\n    keys = require('stb-keys'),\n\n    Footer = require('mag-component-footer'),\n\n    ModalMessage = require('mag-component-modal'),\n    LayoutList = require('mag-component-layout-list'),\n    Layout = require('mag-component-layout'),\n    Scroll = require('stb-component-scrollbar'),\n\n    EpgGrid = require('./epg.grid'),\n\n    footer, actionModal, actionList,\n    headerLayout, contentLayout,\n    epgGrid,\n    scroll,\n    ICONS;\n\nif ( TARGET === 'android-app' || TARGET === 'android-stb' ) {\n    ICONS = {\n        realtime: 'theme-icon theme-icon-back',\n        record: 'theme-icon theme-icon-play'\n    };\n} else {\n    ICONS = {\n        realtime: 'theme-icon theme-icon-rc-f3',\n        record: 'theme-icon theme-icon-rc-f1'\n    };\n}\n\n\nfunction prepareChannels ( data ) {\n    var list = [],\n        items = [],\n        channel, schedule, censored,\n        index, $logo;\n\n    for ( index = 0; index < data.length; index++ ) {\n        $logo = tag('div', {className: 'logo'});\n        if ( data[index].logo ) {\n            $logo.style.backgroundImage = 'url(' + core.backend.host + data[index].logo + ')';\n        }\n\n        censored = data[index].censored || (data[index].genre && data[index].genre.censored);\n        items = [\n            {\n                className: 'number',\n                value: data[index].number.toString()\n            },\n            $logo,\n            {\n                className: 'name',\n                value: data[index].name\n            },\n            {\n                className: data[index].archive ? 'theme-icon theme-icon-timeshift disabled' : 'theme-icon hidden'\n            },\n            {\n                className: censored ? 'theme-icon theme-icon-lock disabled' : 'theme-icon hidden'\n            },\n            {\n                className: 'arrowLeft theme-epg-grid-arrow-left'\n            },\n            {\n                className: 'arrowRight theme-epg-grid-arrow-right'\n            },\n            {\n                className: 'theme-epg-grid-timeshift hidden'\n            }\n        ];\n\n        channel = new Layout({\n            focusable: false,\n            data: items,\n            className: 'channel theme-epg-grid-main',\n            events: {\n                click: function () {\n                    this.parent.emit('click');\n                }\n            }\n        });\n\n        schedule = new Layout({\n            focusable: false,\n            className: 'schedule',\n            data: [],\n            events: {\n                click: function () {\n                    this.parent.emit('click');\n                }\n            }\n        });\n\n        channel.listIndex = index;\n        schedule.listIndex = index;\n\n        list.push({\n            value: data[index],\n            items: [channel, schedule],\n            censored: censored\n        });\n    }\n\n    return list;\n}\n\n\n/**\n * Send intent ro record epg program\n */\nfunction sendRecordEpgIntent () {\n    var channel = epgGrid.$focusItem.data.value,\n        epg;\n\n    if ( epgGrid.epgLastFocused ) {\n        epg = epgGrid.epgLastFocused.data;\n    }\n\n    core.intent({\n        action: 'record',\n        data: {\n            uri: channel.url,\n            name: channel.name,\n            epgName: channel.name,\n            startTime: epg ? epg.start : epgGrid.time,\n            endTime: epg ? epg.end : epgGrid.time + epgGrid.timeStep,\n            id: channel.id,\n            pvr: {\n                server: channel.pvr,\n                local:  channel.local_pvr\n            }\n        }\n    }, function ( ) { /**/ });\n}\n\n\n/**\n * Epg page implementation.\n *\n * @constructor\n * @extends stb-component-page\n *\n * @param {Object} [config={}] - init parameters (all inherited from the parent)\n * @param {Object} config.apiProvider - api provider to get Epg\n *\n * Epg item click event.\n *\n * @event epg:click\n *\n * @type {Object}\n * @property {number} channelIndex focus channel index\n * @property {Object} epg focus epg item data\n *\n * Channel item click event.\n *\n * @event channel:click\n *\n * @type {Object}\n * @property {number} channelIndex focus channel index\n *\n * Click back button event.\n *\n * @event back\n *\n * @type {Element} focus item\n */\nfunction EpgPage ( config ) {\n    var self = this;\n\n    config.className = 'magcore-page-epg' + (config.className ? ' ' + config.className : '');\n    Page.call(this, config);\n\n    this.addListener('show', function ( event ) {\n        epgGrid.focusIndex(event.data.index);\n        epgGrid.focus();\n        epgGrid.startCheck();\n    });\n\n    this.addListener('keydown', function ( event ) {\n        switch ( event.code ) {\n            case keys.back:\n                epgGrid.stopCheck();\n                self.emit('back', epgGrid.$focusItem);\n                break;\n        }\n    });\n\n    headerLayout = new Layout({\n        focusable: false,\n        data: [\n            {\n                name: '$title',\n                className: 'title',\n                value: gettext('TV Guide')\n            },\n            {\n                name: '$current',\n                className: 'current'\n            },\n            {\n                name: '$description',\n                className: 'description'\n            }\n        ],\n        className: 'header-layout theme-epg-grid-main'\n    });\n    this.add(headerLayout);\n\n    contentLayout = new Layout({\n        focusable: false,\n        data: [\n            {\n                className: 'time'\n            },\n            {\n                name: '$timeline',\n                className: 'timeline theme-epg-grid-timeline'\n            }\n        ],\n        className: 'content'\n    });\n    this.add(contentLayout);\n\n    epgGrid = new EpgGrid({\n        className: 'epg-list',\n        size: require('./metrics').epgGrid,\n        events: {\n            'click:item': function ( event ) {\n                var item = event.$item;\n\n                if ( item.data.value.epgItems.length ) {\n                    if ( item.data.value.epgItems[item.data.value.epgFocus] ) {\n                        if ( item.data.value.archive && item.data.value.epgItems[item.data.value.epgFocus].data.archive ) {\n                            self.emit('epg:click', {channelIndex: item.index, epg: item.data.value.epgItems[item.data.value.epgFocus].data});\n                        } else {\n                            self.emit('channel:click', {channelIndex: item.index});\n                        }\n                    }\n                } else {\n                    self.emit('channel:click', {channelIndex: item.index});\n                }\n            },\n            'focus:item': function ( data ) {\n                var item = data.$curr,\n                    list = [];\n\n                data = {\n                    left: {},\n                    middle: [],\n                    label: {\n                        code: keys.menu,\n                        title: gettext('Hold OK button to open Options menu'),\n                        action: function () {\n                            actionModal.show();\n                            actionModal.focus();\n                        }\n                    }\n                };\n\n                if ( item.data.value.pvr || item.data.value.local_pvr ) {\n                    data.middle.push({\n                        code: keys.f1,\n                        title: gettext('Record'),\n                        action: sendRecordEpgIntent\n                    });\n\n                    list.push({\n                        items: [\n                            {\n                                className: ICONS.record\n                            },\n                            {\n                                className: 'title',\n                                value: gettext('Record')\n                            }\n                        ],\n                        click: function () {\n                            actionModal.hide();\n                            sendRecordEpgIntent();\n                        }\n                    });\n                }\n\n                list.push({\n                    items: [\n                        {\n                            className: ICONS.realtime\n                        },\n                        {\n                            className: 'title',\n                            value: gettext('To real time')\n                        }\n                    ],\n                    click: function () {\n                        actionModal.hide();\n                        epgGrid.goToRealTime();\n                    }\n                });\n\n                data.middle.push({\n                    code: keys.f3,\n                    title: gettext('To real time'),\n                    action: function () {\n                        epgGrid.goToRealTime();\n                    }\n                });\n                data.left = {\n                    code: keys.menu,\n                    action: function () {\n                        actionModal.show();\n                        actionModal.focus();\n                    }\n                };\n                footer.init(data);\n                actionList.init({\n                    data: list,\n                    size: list.length,\n                    focusIndex: 0\n                });\n            }\n        },\n        noData: gettext('No Channels'),\n        apiProvider: config.apiProvider,\n        focusIndex: 0,\n        scroll: scroll = new Scroll(),\n        //epg config\n        $timeBlock: contentLayout.$node.children[0],\n        $programDescription: headerLayout.links.$description,\n        $programName: headerLayout.links.$current,\n        $timeLine: contentLayout.links.$timeline\n    });\n\n    contentLayout.add(epgGrid);\n    contentLayout.add(scroll);\n\n    if ( DEVELOP ) {\n        window.epgGrid = epgGrid;\n    }\n\n    footer = new Footer({visible: false, parent: this});\n    footer.init({\n        left: {\n            code: keys.menu,\n            action: function () {\n                actionModal.show();\n                actionModal.focus();\n            }\n        },\n        middle: [\n            {\n                code: keys.f1,\n                title: gettext('Record'),\n                action: sendRecordEpgIntent\n            },\n            {\n                code: keys.f3,\n                title: gettext('To real time'),\n                action: function () {\n                    epgGrid.goToRealTime();\n                }\n            }\n        ],\n        label: {\n            code: keys.menu,\n            title: gettext('Hold OK button to open Options menu'),\n            action: function () {\n                actionModal.show();\n                actionModal.focus();\n            }\n        }\n    });\n    footer.show();\n\n    this.add(\n        actionModal = new ModalMessage({\n            title: gettext('Actions'),\n            className: 'width2x',\n            events: {\n                show: function () {\n                    footer.hide();\n                    this.children[0].focus();\n                },\n                hide: function () {\n                    footer.show();\n                    epgGrid.focus();\n                }\n            },\n            children: [\n                actionList = new LayoutList({\n                    size: 2,\n                    focusIndex: 0,\n                    cycle: true,\n                    data: [\n                        {\n                            items: [\n                                {\n                                    className: ICONS.record\n                                },\n                                {\n                                    className: 'title',\n                                    value: gettext('Record')\n                                }\n                            ],\n                            click: function () {\n                                actionModal.hide();\n                                sendRecordEpgIntent();\n                            }\n                        },\n                        {\n                            items: [\n                                {\n                                    className: ICONS.realtime\n                                },\n                                {\n                                    className: 'title',\n                                    value: gettext('To real time')\n                                }\n                            ],\n                            click: function () {\n                                actionModal.hide();\n                                epgGrid.goToRealTime();\n                            }\n                        }\n                    ],\n                    events: {\n                        keydown: function ( event ) {\n                            LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                            switch ( event.code ) {\n                                case keys.menu:\n                                case keys.back:\n                                    actionModal.hide();\n                                    event.stop = true;\n                                    break;\n                            }\n                        }\n                    }\n                })\n            ]\n        })\n    );\n}\n\n\nEpgPage.prototype = Object.create(Page.prototype);\nEpgPage.prototype.constructor = EpgPage;\n\n\n/**\n * Set channel list.\n *\n * @param {Array} data - channels\n */\nEpgPage.prototype.setChannels = function ( data ) {\n    epgGrid.setData({\n        data: prepareChannels(data),\n        focusIndex: 0\n    });\n    epgGrid.updateEpg();\n};\n\n\nmodule.exports = EpgPage;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('spa-component');\n\n\n/**\n * Base page implementation.\n *\n * A full-screen top-level layer that can operate as an independent separate entity.\n * It is added to the document body on creation if not already linked.\n *\n * @constructor\n * @extends Component\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n *\n * @example\n * var Page = require('stb/ui/page'),\n *     page = new Page({\n *         $node: document.getElementById(id)\n *     });\n *\n * page.addListener('show', function show () {\n *     // page is visible now\n * });\n */\nfunction Page ( config ) {\n    // sanitize\n    config = config || {};\n\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n    }\n\n    /**\n     * Page visibility/active state flag.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.active = false;\n\n    /**\n     * Link to the currently active component with focus.\n     *\n     * @readonly\n     * @type {Component}\n     */\n    this.activeComponent = null;\n\n    // set default className if classList property empty or undefined\n    //config.className = 'page ' + (config.className || '');\n\n    // parent constructor call\n    Component.call(this, config);\n\n    // state flag\n    this.active = this.$node.classList.contains('active');\n\n    // correct DOM parent/child connection if necessary\n    if ( this.$node.parentNode === null ) {\n        document.body.appendChild(this.$node);\n    }\n\n    // always itself\n    this.page = this;\n}\n\n\n// inheritance\nPage.prototype = Object.create(Component.prototype);\nPage.prototype.constructor = Page;\n\n// set component name\nPage.prototype.name = 'spa-component-page';\n\n\n// public\nmodule.exports = Page;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n// public\nmodule.exports = require('spa-component-modal');\n\n// correct component name\nmodule.exports.prototype.name = 'stb-component-modal';\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('spa-component');\n\n\n/**\n * Base modal window implementation.\n *\n * @constructor\n * @extends Component\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n */\nfunction Modal ( config ) {\n    // sanitize\n    config = config || {};\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n        if ( config.$body ) {\n            throw new Error(__filename + ': config.$body should not be provided manually');\n        }\n    }\n\n    // create centered div\n    config.$body = document.createElement('div');\n    config.$body.className = 'body';\n\n    // parent constructor call\n    Component.call(this, config);\n\n    // add table-cell wrapper\n    this.$node.appendChild(document.createElement('div').appendChild(this.$body).parentNode);\n}\n\n\n// inheritance\nModal.prototype = Object.create(Component.prototype);\nModal.prototype.constructor = Modal;\n\n// set component name\nModal.prototype.name = 'spa-component-modal';\n\n\n// public\nmodule.exports = Modal;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('spa-component');\n\n\n/**\n * Base scroll bar implementation.\n *\n * @constructor\n * @extends Component\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {number} [config.value=0] initial thumb position\n * @param {number} [config.realSize=100] actual scroll size\n * @param {number} [config.viewSize=10] visible area size\n * @param {number} [config.type] direction\n *\n * @example\n * var ScrollBar = require('stb/ui/scroll.bar'),\n *     scrollBar = new ScrollBar({\n *         viewSize: 5,\n *         realSize: 25,\n *         events: {\n *             done: function () {\n *                 debug.log('ScrollBar: done');\n *             },\n *             change: function ( data ) {\n *                 debug.log('ScrollBar: change to ' + data.curr + ' from ' + data.prev);\n *             }\n *         }\n *     });\n */\nfunction ScrollBar ( config ) {\n    // sanitize\n    config = config || {};\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n        if ( config.type && Number(config.type) !== config.type ) {\n            throw new Error(__filename + ': config.type must be a number');\n        }\n    }\n\n    /**\n     * Visible area size.\n     *\n     * @type {number}\n     */\n    this.viewSize = 10;\n\n    /**\n     * Scroll area actual height or width (if scroll is horizontal).\n     *\n     * @type {number}\n     */\n    this.realSize = 100;\n\n    /**\n     * Scroll thumb position.\n     *\n     * @type {number}\n     */\n    this.value = 0;\n\n    /**\n     * Component orientation.\n     *\n     * @type {number}\n     */\n    this.type = this.TYPE_VERTICAL;\n\n    /**\n     * Geometry of the scroll thumb element.\n     *\n     * @type {ClientRect}\n     */\n    this.thumbRect = null;\n\n    /**\n     * Geometry of the scroll track element.\n     *\n     * @type {ClientRect}\n     */\n    this.trackRect = null;\n\n    // can't accept focus\n    config.focusable = config.focusable || false;\n\n    // set default className if classList property empty or undefined\n    //config.className = 'scrollBar ' + (config.className || '');\n\n    // horizontal or vertical\n    if ( config.type ) {\n        // apply\n        this.type = config.type;\n    }\n\n    if ( this.type === this.TYPE_HORIZONTAL ) {\n        config.className += ' horizontal';\n    }\n\n    // parent constructor call\n    Component.call(this, config);\n\n    // insert thumb line\n    this.$thumb = this.$body.appendChild(document.createElement('div'));\n\n    // correct CSS class name\n    this.$thumb.className = 'thumb';\n\n    // component setup\n    this.init(config);\n}\n\n\n// inheritance\nScrollBar.prototype = Object.create(Component.prototype);\nScrollBar.prototype.constructor = ScrollBar;\n\n// set component name\nScrollBar.prototype.name = 'spa-component-scrollbar';\n\nScrollBar.prototype.TYPE_VERTICAL   = 1;\nScrollBar.prototype.TYPE_HORIZONTAL = 2;\n\n\n/**\n * Init or re-init realSize/viewSize/value parameters.\n *\n * @param {Object} config init parameters (subset of constructor config params)\n */\nScrollBar.prototype.init = function ( config ) {\n    config = config || {};\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n    }\n\n    // set actual scroll size\n    if ( config.realSize !== undefined ) {\n        if ( DEVELOP ) {\n            if ( Number(config.realSize) !== config.realSize ) {\n                throw new Error(__filename + ': config.realSize value must be a number');\n            }\n        }\n\n        // apply\n        this.realSize = config.realSize;\n    }\n\n    // set visible area size\n    if ( config.viewSize !== undefined ) {\n        if ( DEVELOP ) {\n            if ( Number(config.viewSize) !== config.viewSize ) {\n                throw new Error(__filename + ': config.viewSize value must be a number');\n            }\n            if ( config.viewSize < 0 ) {\n                throw new Error(__filename + ': config.viewSize value must be greater than 0');\n            }\n        }\n\n        // apply\n        this.viewSize = config.viewSize;\n    }\n\n    // show or hide thumb\n    if ( this.viewSize >= this.realSize ) {\n        this.$thumb.classList.add('hidden');\n    } else {\n        this.$thumb.classList.remove('hidden');\n    }\n\n    // set thumb position\n    if ( config.value !== undefined ) {\n        // apply\n        this.scrollTo(config.value);\n    }\n\n    // set thumb size\n    if ( this.type === this.TYPE_VERTICAL ) {\n        this.$thumb.style.height = (this.viewSize / this.realSize * 100) + '%';\n    } else {\n        this.$thumb.style.width = (this.viewSize / this.realSize * 100) + '%';\n    }\n\n    // geometry\n    this.thumbRect = this.$thumb.getBoundingClientRect();\n    this.trackRect = this.$node.getBoundingClientRect();\n};\n\n\n/**\n * Set position of the given value.\n * Does nothing in case when scroll is in the end and passed value is more than scroll bar length.\n *\n * @param {number} value new value to set\n * @return {boolean} operation result\n *\n * @fires module:stb/ui/scroll.bar~ScrollBar#done\n * @fires module:stb/ui/scroll.bar~ScrollBar#change\n */\nScrollBar.prototype.scrollTo = function ( value ) {\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( Number(value) !== value ) {\n            throw new Error(__filename + ': value must be a number');\n        }\n        if ( this.realSize > this.viewSize && value > this.realSize - this.viewSize ) {\n            throw new Error(__filename + ': value is greater than this.realSize-this.viewSize');\n        }\n        if ( value < 0 ) {\n            throw new Error(__filename + ': value is less then 0');\n        }\n    }\n\n    // value has changed\n    if ( this.value !== value ) {\n        // track and thumb geometry was not set\n        if ( this.thumbRect.height === 0 || this.thumbRect.width === 0 ) {\n            // apply\n            this.trackRect = this.$node.getBoundingClientRect();\n            this.thumbRect = this.$thumb.getBoundingClientRect();\n        }\n\n        // set scroll bar width\n        if ( this.type === this.TYPE_VERTICAL ) {\n            this.$thumb.style.marginTop = ((this.trackRect.height - this.thumbRect.height) * value / (this.realSize - this.viewSize)) + 'px';\n        } else {\n            this.$thumb.style.marginLeft = ((this.trackRect.width - this.thumbRect.width) * value / (this.realSize - this.viewSize)) + 'px';\n        }\n\n        // there are some listeners\n        if ( this.events['change'] ) {\n            /**\n             * Update scroll value.\n             *\n             * @event module:stb/ui/scroll.bar~ScrollBar#change\n             *\n             * @type {Object}\n             * @property {number} prev old/previous scroll value\n             * @property {number} curr new/current scroll value\n             */\n            this.emit('change', {curr: value, prev: this.value});\n        }\n\n        // is it the end?\n        if ( value >= this.realSize ) {\n            value = this.realSize;\n\n            // there are some listeners\n            if ( this.events['done'] ) {\n                /**\n                 * Set scroll to its maximum value.\n                 *\n                 * @event module:stb/ui/scroll.bar~ScrollBar#done\n                 */\n                this.emit('done');\n            }\n        }\n\n        // set new value\n        this.value = value;\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n// public\nmodule.exports = ScrollBar;\n","/**\n * Epg list implementation.\n *\n * @author Stoian Roman <stoyan.roman@gmail.com>\n */\n\n'use strict';\n\n/* eslint max-lines-per-function: 0 */\n\nvar dom = require('spa-dom'),\n    keys = require('stb-keys'),\n\n    Layout     = require('mag-component-layout'),\n    LayoutList = require('mag-component-layout-list'),\n    metrics    = require('./metrics'),\n\n    fullMonthNames = [\n        gettext('January'),\n        gettext('February'),\n        gettext('March'),\n        gettext('April'),\n        gettext('May'),\n        gettext('June'),\n        gettext('July'),\n        gettext('August'),\n        gettext('September'),\n        gettext('October'),\n        gettext('November'),\n        gettext('December')\n    ],\n    fullDaysOfWeek = [\n        gettext('Sunday '),\n        gettext('Monday '),\n        gettext('Tuesday '),\n        gettext('Wednesday '),\n        gettext('Thursday '),\n        gettext('Friday '),\n        gettext('Saturday ')\n    ];\n\n\nfunction EpgGrid ( config ) {\n    this.scheduleWidth = metrics.scheduleWidth;\n\n    /**\n     * Link to the object for limited scopes.\n     *\n     * @type {DVBList}\n     */\n    this.time = null;\n    this.day = 0;\n    this.timeStep = metrics.timeStep;\n    this.countOfSteps = metrics.countOfSteps;\n    this.scheduleBlock = this.scheduleWidth / this.timeStep;\n    this.step = this.timeStep / this.countOfSteps;\n\n    this.timeLineMargin = metrics.timeLineMargin;\n\n    this.itemHeight = metrics.itemHeight;\n\n    this.timeLineTop = metrics.timeLineTop;\n\n    this.$timeBlock = config.$timeBlock;\n    this.$programDescription = config.$programDescription;\n    this.$programName = config.$programName;\n    this.$timeLine = config.$timeLine;\n\n    this.$timeLine.appendChild(dom.tag('div', {className: 'timemark theme-epg-grid-timemark'}));\n\n    this.timers = {};\n    this.internal = {};\n    // 0- real time 1- in focus\n    this.epgMode = 0;\n    this.epgFocusTime = null;\n    this.epgLastFocused = null;\n    if ( !config.events ) {\n        config.events = {};\n    }\n    if ( !config.events.keydown ) {\n        config.events.keydown = function ( event ) {\n            switch ( event.code ) {\n                case keys.right:\n                case keys.left:\n                    this.moveEpg(event.code);\n                    break;\n                case keys.up:\n                case keys.down:\n                case keys.pageUp:\n                case keys.pageDown:\n                case keys.home:\n                case keys.end:\n                    // cursor move only on arrow keys\n                    this.move(event.code);\n                    break;\n                case keys.enter:\n                    // there are some listeners\n                    event.stop = true;\n                    this.pressOk();\n                    break;\n            }\n        };\n    }\n    this.apiProvider = config.apiProvider;\n\n    LayoutList.call(this, config);\n}\n\n\nEpgGrid.prototype = Object.create(LayoutList.prototype);\nEpgGrid.prototype.constructor = EpgGrid;\n\n\nEpgGrid.prototype.renderItem = function ( $item, config ) {\n    var self = this,\n        layout, domLinks, layoutConfig;\n\n    while ( $item.firstChild ) {\n        $item.removeChild($item.firstChild);\n    }\n\n    layoutConfig = {\n        focusable: false,\n        data: config.items\n    };\n\n    if ( config.className ) {\n        layoutConfig.className = config.className;\n    }\n\n    if ( config.events ) {\n        layoutConfig.events = config.events;\n    } else {\n        layoutConfig.events = {\n            click: function () {\n                self.focusItem($item);\n                self.pressOk();\n            }\n        };\n    }\n\n    layout = new Layout(layoutConfig);\n\n    $item.appendChild(layout.$node);\n    $item.layout = layout;\n    layout.parent = this;\n    layout.$parentItem = $item;\n\n    domLinks = config.items[0].value.$node.children;\n\n    $item.censored = config.censored;\n\n    // on init list save needed links\n    $item.domLinks = {\n        $number: domLinks[0],\n        $icon: domLinks[1],\n        $title: domLinks[2],\n        $archiveIcon: domLinks[3],\n        $lockIcon: domLinks[4],\n        $archiveLine: domLinks[7]\n    };\n\n    if ( config.click ) {\n        this.handlers[$item.index] = config.click;\n    }\n    // item is rendered\n    $item.ready = true;\n    // }\n    $item.value = config.value || {};\n    if ( config.value.archive ) {\n        config.value.$archiveLine = $item.domLinks.$archiveLine;\n        $item.domLinks.$archiveLine.classList.remove('hidden');\n    } else {\n        config.value.$archiveLine = null;\n        $item.domLinks.$archiveLine.classList.add('hidden');\n    }\n    if ( config ) {\n        this.fillItem($item, config);\n    }\n};\n\n\nEpgGrid.prototype.setData = function ( config ) {\n    LayoutList.prototype.setData.call(this, config);\n\n    if ( this.data.length < this.size ) {\n        this.$timeLine.style.height = (this.itemHeight * this.data.length) + this.timeLineTop + 'px';\n    } else {\n        this.$timeLine.style.height = (this.itemHeight * this.size) + this.timeLineTop + 'px';\n    }\n};\n\n\nEpgGrid.prototype.moveEpg = function ( code ) {\n    switch ( code ) {\n        case keys.left:\n            this.subPrev();\n            break;\n        case keys.right:\n            this.subNext();\n            break;\n    }\n};\n\n\nEpgGrid.prototype.pressOk = function () {\n    if ( this.events['click:item'] && this.$focusItem ) {\n        // notify listeners\n        this.emit('click:item', {$item: this.$focusItem, event: event});\n    }\n};\n\n\n/**\n * on Focus event.\n *\n * @param {Object} event - event data\n */\nEpgGrid.prototype.onFocus = function ( event ) {\n    var self = this,\n        focus = 0,\n        index, data;\n\n    this.repositionTimeLine();\n    if ( this.timers.onFocus ) {\n        clearTimeout(this.timers.onFocus);\n    }\n    if ( this.epgMode ) {\n        this.timers.onFocus = setTimeout(function () {\n            data = event.$curr.data;\n            if ( data.value.epgItems.length ) {\n                for ( index = 0; index < data.value.epgItems.length; index++ ) {\n                    if ( self.epgFocusTime >= data.value.epgItems[index].data.start && self.epgFocusTime < data.value.epgItems[index].data.end ) {\n                        focus = index;\n                        break;\n                    }\n                }\n                data.value.epgFocus = focus;\n                self.focusEpg(data.value.epgItems[data.value.epgFocus], true);\n            } else {\n                if ( self.epgLastFocused ) {\n                    self.epgLastFocused.classList.remove('theme-epg-grid-focused');\n                    self.epgLastFocused.focused = false;\n                }\n                self.epgLastFocused = null;\n            }\n        }, core.environment.onFocusDebounceTimeout);\n\n    }\n};\n\n\nEpgGrid.prototype.onOverflow = function () {\n    var self = this;\n\n    if ( this.timers.onOverflow ) {\n        clearTimeout(this.timers.onOverflow);\n    }\n    this.timers.onOverflow = setTimeout(function () {\n        self.updateEpg();\n    }, core.environment.onFocusDebounceTimeout);\n};\n\n\nEpgGrid.prototype.init = function ( config ) {\n    LayoutList.prototype.init.call(this, config);\n\n    this.addListener('focus:item', this.onFocus);\n    this.addListener('move:view', this.onOverflow);\n};\n\n\nEpgGrid.prototype.startCheck = function () {\n    this.checkingTime();\n};\n\n\nEpgGrid.prototype.stopCheck = function () {\n    var key;\n\n    for ( key in this.internal ) {\n        clearInterval(this.internal[key]);\n    }\n\n    for ( key in this.timers ) {\n        clearTimeout(this.timers[key]);\n    }\n};\n\n\nEpgGrid.prototype.fillItem = function ( $item, config ) {\n    var width = 0,\n        epgItems = [],\n        before = this.time,\n        margin = 2,\n        $epgItem, index, data;\n\n    dom.clear(config.items[1].value.$node);\n\n    if ( (!$item.censored || core.accessControl.state) && config.value.epgGrid && config.value.epgGrid.length ) {\n        for ( index = 0; index < config.value.epgGrid.length; index++ ) {\n            data = config.value.epgGrid[index];\n            if ( data.start >= this.time + this.timeStep - 60 ) {\n                break;\n            }\n\n            if ( data.end > this.time ) {\n                if ( data.start >= before + 60 ) {\n                    $epgItem = dom.tag('div', {className: 'program theme-epg-grid-noData'},\n                        dom.tag('div', {className: 'text', data: {focusable: false}}, gettext('No data')));\n\n                    width = (data.start - before) * this.scheduleBlock;\n                    width = Math.floor(width) - margin;\n                    $epgItem.children[0].style.width = width + 'px';\n                    dom.add(config.items[1].value.$node, $epgItem);\n                    before = data.start;\n                }\n                data.focusable = true;\n\n                $epgItem = dom.tag('div', {className: 'program theme-epg-grid-default'},\n                    dom.tag('div', {className: 'text', data: data}, data.title));\n\n                if ( data.end < this.time + this.timeStep ) {\n                    width = (data.end - before) * this.scheduleBlock;\n                } else {\n                    width = (this.time + this.timeStep - before) * this.scheduleBlock;\n                }\n                width = Math.floor(width) - margin;\n                before = data.end;\n                $epgItem.children[0].style.width = width + 'px';\n                $epgItem.data = data;\n                dom.add(config.items[1].value.$node, $epgItem);\n                epgItems.push($epgItem);\n            }\n            config.value.epgItems = epgItems;\n        }\n        if ( before < this.time + this.timeStep ) {\n            width = (this.time + this.timeStep - before) * this.scheduleBlock;\n            if ( width > 2 * margin ) {\n                $epgItem = dom.tag('div', {className: 'program theme-epg-grid-noData'},\n                    dom.tag('div', {className: 'text', data: {focusable: false}}, gettext('No data')));\n                width = Math.floor( width ) - margin;\n                $epgItem.children[0].style.width = width + 'px';\n                dom.add(config.items[1].value.$node, $epgItem);\n            }\n        }\n    } else {\n        $epgItem = dom.tag('div', {className: 'program theme-epg-grid-noData'},\n            dom.tag('div', {className: 'text', data: {focusable: false}}, gettext('No data')));\n        $epgItem.children[0].style.width = this.scheduleWidth - margin + 'px';\n        dom.add(config.items[1].value.$node, $epgItem);\n        config.value.epgItems = [];\n    }\n};\n\n\nEpgGrid.prototype.checkCurrent = function () {\n    var self = this,\n        $item = this.$focusItem,\n        time = Date.now() / 1000,\n        data, left, check,\n        index, child;\n\n    function checkData ( epgItem, focusIndex ) {\n        if ( check && epgItem.data && time > epgItem.data.start && time < epgItem.data.end ) {\n            epgItem.classList.add('theme-epg-grid-current');\n            check = false;\n            if ( !self.epgMode && child === $item ) {\n                self.focusEpg(epgItem, true);\n                $item.data.value.epgFocus = focusIndex;\n            }\n        } else {\n            epgItem.classList.remove('theme-epg-grid-current');\n            if ( !self.epgMode && self.$body.children[focusIndex] === $item ) {\n                epgItem.classList.remove('theme-epg-grid-focused');\n            }\n        }\n    }\n\n    for ( index = 0; index < this.$body.children.length; index++ ) {\n        check = true;\n        child = this.$body.children[index];\n        if ( child.data && child.data.value.epgItems && child.data.value.epgItems.length ) {\n            data = child.data.value.epgItems;\n            data.forEach(checkData);\n        }\n    }\n\n    if ( $item && $item.data.value.$archiveLine ) {\n        if ( $item.data.value.epgGrid && $item.data.value.epgGrid.length ) {\n            if ( (this.time + this.timeStep) > time ) {\n                if ( time >= this.time ) {\n                    left = Math.ceil((time - this.time) * this.scheduleBlock);\n                    $item.data.value.$archiveLine.style.width = left + 'px';\n                    $item.data.value.$archiveLine.style.display = '';\n                } else {\n                    $item.data.value.$archiveLine.style.display = 'none';\n                }\n            } else {\n                $item.data.value.$archiveLine.style.width = this.scheduleWidth + 'px';\n            }\n        } else {\n            $item.data.value.$archiveLine.style.display = 'none';\n        }\n    }\n};\n\n\nEpgGrid.prototype.setCurrentProgram = function () {\n    if ( this.epgLastFocused && this.epgLastFocused.data ) {\n        this.$programDescription.innerText = this.epgLastFocused.data.description || '';\n        this.$programName.innerText = this.epgLastFocused.data.title || '';\n    } else {\n        this.$programDescription.innerText = '';\n        this.$programName.innerText = '';\n    }\n};\n\n\nEpgGrid.prototype.repositionTimeLine = function () {\n    var newTime = new Date(),\n        left = 0,\n        time = Math.ceil(newTime.getTime() / 1000);\n\n    if ( time >= this.time && this.time + this.timeStep > time ) {\n        left = Math.ceil((time - this.time) / this.timeStep * this.scheduleWidth);\n        left += this.timeLineMargin;\n        this.$timeLine.style.display = 'block';\n        this.$timeLine.style.left = left + 'px';\n    } else {\n        this.$timeLine.style.display = 'none';\n    }\n    this.checkCurrent();\n};\n\n\n/**\n * Checking EPG in time.\n *\n * @param {boolean} state - epgMode\n */\nEpgGrid.prototype.epgModeChange = function ( state ) {\n    var self = this;\n\n    this.epgMode = !!state;\n\n    if ( this.timers.epgModeChange ) {\n        clearTimeout(this.timers.epgModeChange);\n    }\n\n    if ( this.epgMode ) {\n        this.timers.epgModeChange = setTimeout(function () {\n            self.goToRealTime();\n        }, 3 * 60 * 1000);\n    }\n};\n\n\n/**\n * Checking EPG in time.\n */\nEpgGrid.prototype.checkingTime = function () {\n    var newTime = this.getStartTime(),\n        self = this;\n\n    if ( this.internal.checkingTime ) {\n        clearInterval(this.internal.checkingTime);\n    }\n    if ( this.epgMode ) {\n\n        return;\n    }\n\n    if ( this.time !== newTime ) {\n        this.time = newTime;\n    }\n    this.initTimeBlock();\n    // this.repositionTimeLine();\n    this.internal.checkingTime = setInterval(function () {\n        if ( !self.epgMode  ) {\n            newTime = self.getStartTime();\n            if ( self.time !== newTime ) {\n                self.time = newTime;\n                self.initTimeBlock();\n            }\n        }\n        self.repositionTimeLine();\n    }, 60 * 1000);\n};\n\n\nEpgGrid.prototype.initTimeBlock = function ( last, first ) {\n    var time, dayName, min,\n        hour, month, day,\n        ms, dateText, index;\n\n    if ( this.time === null ) {\n        this.time = this.getStartTime();\n    }\n\n    ms = this.time - (this.step / 2);\n    time = new Date(ms * 1000);\n    dayName = fullDaysOfWeek[time.getDay()];\n    min = time.getMinutes();\n    hour = time.getHours();\n    month = time.getMonth() + 1;\n    day = time.getDate();\n    dateText = dayName + ', ' + day + ' ' + fullMonthNames[month - 1];\n\n    dom.clear(this.$timeBlock);\n    dom.add(this.$timeBlock, dom.tag('div', {className: 'date theme-epg-grid-date'}, dateText));\n    for ( index = 2; index <= 2 * this.countOfSteps; index += 2 ) {\n        time.setTime((ms + (index * this.step / 2)) * 1000);\n        min = time.getMinutes();\n        hour = time.getHours();\n        dom.add(this.$timeBlock, dom.tag('div', {className: 'hours theme-epg-grid-date ' + (min === 30 ? 'halfhour' : 'hour')},\n            (hour < 10 ? '0' + hour : hour) + ':' + (min < 10 ? '0' + min : min),\n            dom.tag('div', {className: 'hourmark theme-epg-grid-hourmark'})));\n    }\n    this.updateEpg(last, first);\n};\n\n\n/**\n * Get start time.\n *\n * @return {number} start time\n */\nEpgGrid.prototype.getStartTime = function () {\n    var date = new Date(),\n        time, delta, sec;\n\n    sec = Math.floor(date.getTime() / 1000);\n    time = date.getMinutes() * 60;\n    delta = time % (2 * this.step);\n\n    if ( delta < this.step ) {\n        return sec - delta - (this.step / 2);\n    }\n\n    return  sec - delta + (this.step / 2);\n};\n\n\nEpgGrid.prototype.updateEpg = function ( last, first ) {\n    var channelList = [],\n        config = {},\n        self = this,\n        index, childrenLength, dataLength;\n\n    for ( index = 0; index < this.$body.children.length; index++ ) {\n        if ( this.$body.children[index].data ) {\n            channelList.push(this.$body.children[index].data.value);\n        }\n    }\n\n    if ( channelList.length === 0 ) {\n        return;\n    }\n\n    config.channels = channelList;\n    if ( !this.time ) {\n        this.time = this.getStartTime();\n    }\n    config.from = this.time * 1000;\n    config.to = config.from + (this.timeStep * 1000);\n    if ( this.request ) {\n        this.request.abort();\n    }\n\n    childrenLength = this.$body.children.length;\n    dataLength = this.data.length;\n    for ( index = 0; index < childrenLength; index++ ) {\n        if ( this.$body.children[index].index < dataLength ) {\n            dom.clear(this.data[this.$body.children[index].index].items[1].value.$node);\n        } else {\n            break;\n        }\n    }\n\n    this.request = this.apiProvider.getChannelsEpg(config, function ( error, data ) {\n        if ( !error ) {\n            for ( index = 0; index < channelList.length; index++ ) {\n                if ( data[channelList[index].id] ) {\n                    channelList[index].epgGrid = data[channelList[index].id];\n                } else {\n                    channelList[index].epgGrid = null;\n                }\n            }\n        }\n        for ( index = 0; index < self.$body.children.length; index++ ) {\n            if ( self.$body.children[index].data ) {\n                self.fillItem(self.$body.children[index], self.data[self.$body.children[index].index]);\n            }\n        }\n        self.checkCurrent();\n        if ( self.epgMode ) {\n            data = self.$focusItem.data;\n            if ( data.value.epgItems.length ) {\n                if ( last ) {\n                    data.value.epgFocus = data.value.epgItems.length - 1;\n                } else if ( first ) {\n                    data.value.epgFocus = 0;\n                } else {\n                    data.value.epgFocus = 0;\n                    for ( index = 0; index < data.value.epgItems.length; index++ ) {\n                        if ( self.epgFocusTime >= data.value.epgItems[index].data.start && self.epgFocusTime < data.value.epgItems[index].data.end ) {\n                            data.value.epgFocus = index;\n                            break;\n                        }\n                    }\n                }\n                self.focusEpg(data.value.epgItems[data.value.epgFocus], true);\n            } else {\n                self.focusEpg(self.epgLastFocused, false);\n            }\n        }\n    });\n    this.repositionTimeLine();\n};\n\n\n/**\n * Handle focus state for the given item.\n * Also removes the focus from the previously focused item.\n *\n * @param {Node} item - the element to be processed\n * @param {boolean} [state=true] - flag of the state\n */\nEpgGrid.prototype.focusEpg = function ( item, state ) {\n    state = !!state;\n\n    // valid html element given, enabled and visible\n    if ( item.focused !== state ) {\n        if ( state ) {\n            if ( this.epgLastFocused ) {\n                this.epgLastFocused.classList.remove('theme-epg-grid-focused');\n                this.epgLastFocused.focused = false;\n\n            }\n            item.classList.add('theme-epg-grid-focused');\n            item.focused = true;\n            this.epgLastFocused = item;\n            this.epgFocusTime = item.data.start;\n            this.setCurrentProgram();\n            // this.repositionTimeLine();\n        } else {\n            item.classList.remove('theme-epg-grid-focused');\n            item.focused = false;\n            if ( this.epgLastFocused === item ) {\n                this.epgLastFocused = null;\n                this.epgFocusTime = this.time;\n                this.setCurrentProgram();\n                // this.repositionTimeLine();\n            }\n        }\n    }\n};\n\n\n/**\n * Set focus on next sub element.\n */\nEpgGrid.prototype.subNext = function () {\n    var data = this.$focusItem.data;\n\n    this.epgModeChange(true);\n    if ( data.value.epgItems.length && data.value.epgFocus + 1 < data.value.epgItems.length ) {\n        data.value.epgFocus++;\n        this.focusEpg(data.value.epgItems[data.value.epgFocus], true);\n    } else {\n        this.time += this.timeStep - this.step;\n        this.initTimeBlock(false, true);\n    }\n};\n\n\n/**\n * Set focus on prev sub element,\n */\nEpgGrid.prototype.subPrev = function () {\n    var data = this.$focusItem.data;\n\n    this.epgModeChange(true);\n    if ( data.value.epgItems.length > 0 && data.value.epgFocus > 0 ) {\n        data.value.epgFocus--;\n        this.focusEpg(data.value.epgItems[data.value.epgFocus], true);\n    } else {\n        this.time -= this.timeStep - this.step;\n        this.initTimeBlock(true);\n    }\n};\n\n\n/**\n * Go to real time position.\n */\nEpgGrid.prototype.goToRealTime = function () {\n    var time = this.getStartTime();\n\n    if ( this.epgMode ) {\n        this.epgModeChange(false);\n        if ( this.time !== time ) {\n            this.time = time;\n            this.initTimeBlock();\n        }\n    }\n};\n\n\nmodule.exports = EpgGrid;\n","/**\n * @author Aleynikov Boris <alynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n/*eslint no-use-before-define:0*/\n/*eslint no-lonely-if:0*/\n/*eslint no-negated-condition:0*/\n/*eslint max-lines:0*/\n\n\nvar Page = require('stb-component-page'),\n    page = new Page({$node: document.getElementById('pageChannels')}),\n    app = require('mag-app'),\n    format = require('cjs-format'),\n    utils = require('../modules/utils'),\n    PanelSet = require('mag-component-panel-set'),\n    Panel = require('mag-component-panel'),\n    LayoutList = require('mag-component-layout-list'),\n    RadioList = require('mag-component-radio-list'),\n    ModalMessage = require('mag-component-modal'),\n    ScrollBar = require('stb-component-scrollbar'),\n    Footer = require('mag-component-footer'),\n    provider = app.provider,\n    keys = require('stb-keys'),\n    // lastSendCtx,\n    scrollbars = {\n        channelList: new ScrollBar(),\n        categoryList: new ScrollBar(),\n        epg: new ScrollBar()\n    },\n    iconList = require('../modules/modal.icons'),\n    appUIPanels = [],\n    //\n    //channels = [],\n    keyblock = false,\n    //HIDE_FLAG = false,\n    KEYBLOCK_REVERT_TIMOUT = 1500,\n    keyblockRevertTimeout = null,\n    titleWidget = require('../modules/title.widget'),\n    tv = {\n        config: {\n            favorite: false,\n            byName: false,\n            genre: false,\n            search: ''\n        },\n        lastActiveState: {\n            config: {\n                favorite: false,\n                byName: false,\n                genre: false,\n                search: ''\n            }\n        },\n        list: [],\n        epg: {\n            list: [],\n            currentPlayIndex: 0\n        },\n        current: null,\n        currentIndex: undefined,\n        // timeout to update epg program\n        epgTimeout: null,\n        footerInitDelay: null,\n        // timeout to reinit epg list\n        epgUpdateTimeout: null,\n        context: null,\n        lastChannelTimeout: null,\n        channelFooterTimeout: null,\n        channelListEpgTimeout: null,\n        channelListEpgInterval: null\n    },\n    menuItems,\n    mainSet,  categoryModalList,\n    channelList, programList, menuList, leftPanel, channelPanel, epgPanel,\n    categoryList, sortList, channelActionModal, footer, epgMenu, actionModalList, exitModal, resetModal,\n    $channelsCount = document.createElement('div'),\n    $channelsCountWrapper = document.createElement('div'),\n    $nowDate = document.createElement('div'),\n    $noEpg = document.createElement('div'),\n    // const\n    CURRENT_EPG_UPDATE_INTERVAL = 60000 * 5,\n    antennaEnable = !!app.provider.antennaPower,\n    // how long notification will be shown\n    CHANNELS_UPDATE_NOTIFICATION_TIMEOUT = 7000,\n    // damn hardcode flag turn on after pip\n    NEED_SILENCE = false,\n    LAST_CHANNEL_TIMEOUT = 1000;\n\n\nfunction closeOpenedIntents ( intents ) {\n    // close existing osd intents\n    intents.forEach(function ( intent ) {\n        if ( intent !== null ) {\n            intent.close();\n        }\n    });\n}\n\n\n/**\n * State of app is in foreground\n * @type {boolean} state\n */\napp.foreground = true;\n\nif ( TARGET === 'dvb' ) {\n    app.provider.addListener('scanning:stop', function () {\n        updateChannelList();\n    });\n    app.provider.addListener('channels:update', function () {\n        updateChannelList();\n    });\n    app.provider.addListener('epg:update', function () {\n        if ( channelList.$focusItem ) {\n            channelList.$focusItem.data.value.getEpg(null, renderEpgList);\n        }\n    });\n    app.provider.addListener('antennaPower', function ( enable ) {\n        antennaEnable = enable;\n        initFooterOnChannelSelect();\n        renderActionModal();\n        menuList.$body.children[2].children[0].children[0].className = 'theme-icon ' +\n            ( antennaEnable ? 'theme-icon-dvb-power-on' : 'theme-icon-dvb-power-off' );\n    });\n}\n\n// need to stop player if app was closed by task manager\n// @deprecated\ncore.addListener('close', onExitAppHandler);\ncore.addListener('exit', onExitAppHandler);\n\ncore.addListener('hide', function ( event ) {\n    console.log('tv-app hide', 'event.action:' + event.source);\n    if ( event.source === core.SOURCES.INTENT && event.data && event.data.intent && event.data.intent.action === 'play' ) {\n        // do nothing\n        console.log(event, 'core.SOURCES.INTENT');\n        app.foreground = false;\n    } else {\n        console.log('tv-app emit exit');\n        if ( app.lastIntent ) {\n            app.lastIntent.emit('exit');\n        }\n        if ( isSortingDifferent() ) {\n            resetFilters(tv.lastActiveState.config);\n\n            tv.config.favorite = tv.lastActiveState.config.favorite;\n            tv.config.genre = tv.lastActiveState.config.genre;\n            tv.config.search = tv.lastActiveState.config.search;\n            tv.config.byName = tv.lastActiveState.config.byName;\n        }\n    }\n});\n\ncore.addListener('show', function ( event ) {\n    var silentState = app.foreground,\n        contextState = app.foreground ? tv.context : null;\n\n    console.log('SHOW!!!');\n    console.log(event);\n\n    if ( (event.source === core.SOURCES.INTENT && event.data && event.data.intent && event.data.intent.action === 'play')\n        || (event.source === core.SOURCES.SYSTEM && event.data && event.data.intent && event.data.intent.action !== 'record')\n    ) {\n        app.foreground = true;\n        // app shown by intent.show() , it's just swap\n        // hide osd intent if present\n        if ( app.intents.osdTv ) {\n            app.intents.osdTv.close();\n            app.intents.osdTv = null;\n        }\n        channelList.focusIndex(tv.currentIndex);\n\n        // update epg for visible channels in list and epg of current channel\n        updateChannelListEpg();\n        clearTimeout(tv.epgTimeout);\n        if ( !channelList.$focusItem ) {\n            return;\n        }\n        tv.epgTimeout = setTimeout(function () {\n            if ( !channelList.$focusItem ) {\n                return;\n            }\n            tv.list[channelList.$focusItem.index].getEpg(null, function ( error, data ) {\n                renderEpgList(error, data);\n                initFooterOnEpgSelect();\n            });\n        }, 800);\n    } else {\n        if ( tv.list[tv.currentIndex] && !tv.list[tv.currentIndex].censored &&\n            ( !tv.list[tv.currentIndex].genre || !tv.list[tv.currentIndex].genre.censored )) {\n            setChannel(tv.currentIndex, {silent: silentState, context: contextState, force: true});\n        } else {\n            tv.currentIndex = null;\n            tv.current = null;\n        }\n    }\n});\n\npage.add(\n    categoryList = new ModalMessage({\n        visible: false,\n        title: gettext('Categories'),\n        className: 'categoryList',\n        events: {\n            show: function () {\n                this.focus();\n                this.children[0].focus();\n                setTimeout(function () {\n                    footer.hide();\n                }, 0);\n            },\n            hide: function () {\n                leftPanel.focus();\n            }\n        },\n        children: [\n            categoryModalList =  new LayoutList({\n                size: 5,\n                cycle: true,\n                // fixedData: true,\n                scroll: scrollbars.categoryList,\n                className: 'padded',\n                events: {\n                    'click:item': function ( event ) {\n                        var $icon = menuList.$body.children[2].children[0].children[0];\n\n                        categoryList.hide();\n\n                        tv.config.genre = event.$item.data.value.id;\n                        // left menu list\n                        leftPanel.children[0].$focusItem.layout.$node.children[1].innerText = event.$item.data.value.name;\n                        if ( event.$item.index ) {\n                            $icon.classList.add('active');\n                        } else {\n                            $icon.classList.remove('active');\n                        }\n                        updateChannelList(function () {\n                            // categoryList.hide();\n                            leftPanel.focus();\n                        });\n                    },\n                    keydown: function ( event ) {\n                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                        switch ( event.code ) {\n                            case keys.back:\n                            case keys.menu:\n                                categoryList.hide();\n                                event.stop = true;\n                                break;\n                            case keys.f1:\n                                event.stop = true;\n                                break;\n                        }\n                    }\n                }\n            })\n        ]\n    }),\n    sortList = new ModalMessage({\n        visible: false,\n        title: gettext('Sort'),\n        events: {\n            show: function () {\n                this.focus();\n                this.children[0].focus();\n                footer.hide();\n            },\n            hide: function () {\n                leftPanel.focus();\n            }\n        },\n        children: [\n            new RadioList({\n                focusIndex: 0,\n                size: 2,\n                cycle: true,\n                data: [\n                    {\n                        state: true,\n                        title: gettext('By number'),\n                        value: false\n                    },\n                    {\n                        state: false,\n                        title: gettext('By name'),\n                        value: true\n                    }\n                ],\n                events: {\n                    select: function ( $item ) {\n                        leftPanel.children[0].$focusItem.layout.$node.children[1].innerText = $item.data.title;\n                        tv.config.byName =  $item.data.value;\n                        updateChannelList();\n                    },\n                    'click:item': function () {\n                        sortList.hide();\n                        leftPanel.focus();\n                    },\n                    keydown: function ( event ) {\n                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                        switch ( event.code ) {\n                            case keys.back:\n                            case keys.menu:\n                                sortList.hide();\n                                event.stop = true;\n                                break;\n                            case keys.f1:\n                                event.stop = true;\n                                break;\n                        }\n                    }\n                }\n            })\n        ]\n    })\n);\n\npage.once('show', function () {\n    app.pages.epg.addListener('channel:click', function ( data ) {\n        console.log(data);\n        setChannel(data.channelIndex);\n    });\n    app.pages.epg.addListener('epg:click', sendEpgPlayIntent);\n});\n\nfooter = new Footer({\n    parent: page,\n    data: {\n        middle: []\n    }\n});\nfooter.show();\n\nmenuItems = [\n    {\n        name: 'search',\n        items: [\n            {\n                className: 'theme-icon theme-icon-search',\n                name: '$icon'\n            },\n            {\n                value: gettext('Search'),\n                name: '$text'\n            }\n        ],\n        click: function () {\n            core.intent({\n                action: 'keyboard',\n                data: {\n                    type: 'text',\n                    icon: null,\n                    title: gettext('TV channel search'),\n                    value: tv.config.search\n                },\n                events: {\n                    done: function ( event ) {\n                        if ( event.value && tv.config.search !== event.value ) {\n                            tv.config.search = event.value;\n                            menuList.links.search.links.$text.innerText = event.value;\n                            menuList.links.search.links.$icon.classList.add('active');\n                            updateChannelList();\n                        } else if ( !event.value || !event.value.trim() ) {\n                            menuList.links.search.links.$text.innerText = gettext('Search');\n                            menuList.links.search.links.$icon.classList.remove('active');\n                            if ( tv.config.search !== event.value ) {\n                                tv.config.search = event.value;\n                                updateChannelList();\n                            }\n                        }\n\n\n                    }\n                }\n            });\n        }\n    },\n    {\n        name: 'favorite',\n        items: [\n            {\n                className: 'theme-icon theme-icon-favorite',\n                name: '$icon'\n            },\n            {\n                value: gettext('Favorite'),\n                name: '$text'\n            }\n        ],\n        click: function () {\n            if ( tv.config.favorite ) {\n                menuList.links.favorite.links.$icon.className = 'theme-icon theme-icon-favorite';\n            } else {\n                menuList.links.favorite.links.$icon.className = 'theme-icon theme-icon-favorite-active active';\n            }\n            tv.config.favorite = !tv.config.favorite;\n            updateChannelList();\n        }\n    },\n    {\n        name: 'sort',\n        items: [\n            {\n                className: 'theme-icon theme-icon-sort-az',\n                name: '$icon'\n            },\n            {\n                value: gettext('By number'),\n                className: 'theme-item-more',\n                name: '$text'\n            }\n        ],\n        click: function () {\n            mainSet.blur();\n            sortList.show();\n        }\n    },\n    {\n        items: [\n            {\n                className: 'theme-icon theme-icon-exit'\n            },\n            {\n                value: gettext('Exit')\n            }\n        ],\n        click: function () {\n            mainSet.blur();\n            exitModal.show();\n        }\n    }\n];\n\n// add ability to sort by categories\nif ( MODE === 'MINISTRA' ) {\n    menuItems.splice(2, 0, {\n        name: 'categories',\n        items: [\n            {\n                className: 'theme-icon theme-icon-categories',\n                name: '$icon'\n            },\n            {\n                value: gettext('All categories'),\n                className: 'theme-item-more',\n                name: '$text'\n            }\n        ],\n        click: function () {\n            leftPanel.blur();\n            categoryList.show();\n            setTimeout(function () {\n                categoryList.show();\n            }, 50);\n        }\n    });\n}\n\nif ( TARGET === 'android-stb' || TARGET === 'android-app' ) {\n    menuItems.splice(4, 0, {\n        name: 'resetFilters',\n        items: [\n            {\n                className: 'theme-icon theme-icon-reset-filters',\n                name: '$icon'\n            },\n            {\n                value: gettext('Reset filters'),\n                name: '$text'\n            }\n        ],\n        click: resetFilters\n    });\n}\n\nif ( TARGET === 'dvb' ) {\n    menuItems.splice(2, 0, {\n        items: [\n            {\n                className: 'theme-icon ' + ( antennaEnable ? 'theme-icon-dvb-power-on' : 'theme-icon-dvb-power-off' )\n            },\n            {\n                value: gettext('Scan DVB channels'),\n                className: 'theme-item-more'\n            }\n        ],\n        click: function () {\n            app.route(app.pages.scanOptions);\n        }\n    });\n}\n\n\n// channels count prepare html\n$channelsCountWrapper.className = 'amountContainer';\n$channelsCount.className = 'amount';\n$channelsCount.innerText = 0;\n$channelsCountWrapper.appendChild($channelsCount);\n$nowDate.id = 'currentDate';\n\n\nappUIPanels = [\n    leftPanel = new Panel({\n        title: gettext('Menu'),\n        events: {\n            focus: function ( event ) {\n                Panel.prototype.defaultEvents.focus.call(this, event);\n\n                updateFooterLater(\n                    {\n                        middle: [\n                            {\n                                code: keys.f1,\n                                title: gettext('Reset filters'),\n                                action: function () {\n                                    resetFilters(null, true);\n                                }\n                            }\n                        ],\n                        left: {\n                            code: keys.menu,\n                            action: function () {\n                                resetModal.show();\n                            }\n                        }\n                    }\n                );\n                footer.show();\n                //footer.hide();\n            }\n        },\n        children: [\n            menuList = new LayoutList({\n                focusIndex: 0,\n                cycle: true,\n                data: menuItems,\n                size: menuItems.length\n            })\n        ]\n    })\n];\n\nmenuList.addListener('keydown', keydownHandlerForOsdInput);\n\nappUIPanels = appUIPanels.concat(\n    [\n        channelPanel = new Panel({\n            title: [{value: gettext('Channel list'), className: 'name'}, $channelsCountWrapper],\n            main: true,\n            className: 'channelPanel',\n            events: {\n                focus: function ( event ) {\n                    Panel.prototype.defaultEvents.focus.call(this, event);\n                    initFooterOnChannelSelect();\n                }\n            }\n        }),\n        epgPanel = new Panel({\n            title: [gettext('TV program'), $nowDate],\n            children: [\n                programList = new LayoutList({\n                    size: 7,\n                    className: 'programList',\n                    // fixedData: true, // something went wrong when try to scroll list to the end\n                    noData: $noEpg,\n                    scroll: scrollbars.epg,\n                    //cycle: true,\n                    events: {\n                        keydown: function ( event ) {\n                            var current = programList.$focusItem,\n                                next;\n\n                            switch ( event.code ) {\n                                case keys.up:\n                                    next = programList.data[current.index - 1];\n                                    if ( current.index > 0 && next && next.value ) {\n                                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                                    } else if ( programList.data[current.index - 2]) {\n                                        programList.focusIndex(current.index - 2);\n                                    }\n                                    if ( programList.$focusItem && programList.$focusItem.data.value && programList.$focusItem &&\n                                        programList.$focusItem.data && programList.$focusItem.data.value &&\n                                        $nowDate.innerText !== utils.getCurrentDate(programList.$focusItem.data.value.start * 1000) ) {\n                                        $nowDate.innerText = utils.getCurrentDate(programList.$focusItem.data.value.start * 1000);\n                                    }\n                                    initFooterOnEpgSelect();\n                                    break;\n                                case keys.down:\n                                    next = programList.data[current.index + 1];\n                                    if ( next && next.value ) {\n                                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                                    } else if ( next && !next.value && programList.data[current.index + 2] ) {\n                                        programList.focusIndex(current.index + 2);\n                                    }\n                                    initFooterOnEpgSelect();\n                                    if ( programList.$focusItem && programList.$focusItem.data.value &&\n                                        $nowDate.innerText !== utils.getCurrentDate(programList.$focusItem.data.value.start * 1000) ) {\n                                        $nowDate.innerText = utils.getCurrentDate(programList.$focusItem.data.value.start * 1000);\n                                    }\n                                    break;\n                                default:\n                                    LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                                    break;\n                            }\n\n                            keydownHandlerForOsdInput(event);\n                        },\n                        'click:item': function ( event ) {\n                            var epg;\n\n                            if ( event && event.$item && event.$item.value ) {\n                                epg = event.$item.value;\n\n                                if ( epg.archive ) {\n                                    // play epg\n                                    sendEpgPlayIntent(channelList.$focusItem.index, epg);\n                                } else if ( epg.channel.local_pvr || epg.channel.pvr ) {\n                                    sendRecordEpgIntent();\n                                }\n\n                            }\n                        }\n                    }\n                })\n            ],\n            events: {\n                focus: function ( event ) {\n                    Panel.prototype.defaultEvents.focus.call(this, event);\n                    initFooterOnEpgSelect();\n                }\n            }\n        })\n    ]\n);\n\nmainSet = new PanelSet({\n    panels: appUIPanels\n});\n\npage.add(mainSet);\n//mainSet.drawShadow();\n\nchannelPanel.$body.appendChild(scrollbars.channelList.$node);\ncategoryList.$body.appendChild(scrollbars.categoryList.$node);\nepgPanel.$body.appendChild(scrollbars.epg.$node);\nprogramList.$noData.classList.add('disabled');\nchannelPanel.add(channelList = new LayoutList({\n    size: 7,\n    focusIndex: 0,\n    cycle: true,\n    noData: gettext('No channels'),\n    data: [],\n    render: require('../modules/channel.list.item.render'),\n    fixedData: true,\n    className: 'channelList',\n    scroll: scrollbars.channelList,\n    events: {\n        keydown: function ( event ) {\n            var nowTime = utils.getCurrentDate(),\n                self = this;\n\n            if ( keyblock ) {\n                return;\n            }\n\n            LayoutList.prototype.defaultEvents.keydown.call(this, event);\n            switch ( event.code ) {\n                case keys.up:\n                case keys.down:\n                    if ( $nowDate.innerText !== nowTime ) {\n                        $nowDate.innerText = nowTime;\n                    }\n                    initFooterOnChannelSelect();\n                    clearTimeout(tv.epgTimeout);\n                    if ( !self.$focusItem ) { return; }\n                    tv.epgTimeout = setTimeout(function () {\n                        if ( !self.$focusItem ) { return; }\n                        tv.list[self.$focusItem.index].getEpg(null, function ( error, data ) {\n                            renderEpgList(error, data);\n                            if ( app.activePage.activeComponent === programList ) {\n                                /// update footer if we go to program list\n                                initFooterOnEpgSelect();\n                            }\n                        });\n                    }, 800);\n                    break;\n                case keys.menu:\n                    /*mainSet.blur();\n                    renderActionModal();\n                    channelActionModal.show();*/\n                    break;\n            }\n\n            keydownHandlerForOsdInput(event);\n        },\n        'click:item': function ( event ) {\n            setChannel(event.$item.index, {compareState: true, silent: NEED_SILENCE});\n        },\n        'focus:item': function () {\n            if ( mainSet.focusIndex === 1 ) {\n                initFooterOnChannelSelect();\n            }\n        },\n        'move:view': updateChannelListEpg\n    }\n}));\n\n// if ( DEVELOP ) {\n//     window.channelList = channelList;\n// }\n\npage.add(\n    channelActionModal = new ModalMessage({\n        title: gettext('Actions'),\n        className: 'width2x',\n        events: {\n            show: function () {\n                this.focus();\n                this.children[0].focus();\n                footer.hide();\n            },\n            hide: function () {\n                channelPanel.focus();\n                footer.show();\n            }\n        },\n        children: [\n            actionModalList = new LayoutList({\n                className: 'actionsModal',\n                size: 2,\n                cycle: true,\n                focusIndex: 0,\n                data: [\n                    {\n                        items: makeItem(iconList.record, gettext('Record')),\n                        click: function () {\n                            sendRecordIntent();\n                            channelActionModal.hide();\n                        }\n                    },\n                    {\n                        items: makeItem('theme-icon theme-icon-rc-f2', antennaEnable ? gettext('Antenna power off') : gettext('Antenna power on')),\n                        click: function () {\n                            antennaPower();\n                            channelActionModal.hide();\n                        }\n                    },\n                    {\n                        items: makeItem(iconList.favorite, gettext('Favorite')),\n                        click: function () {\n                            toggleFavorite({index: channelList.$focusItem.index, item: channelList.$focusItem},\n                                function () { channelActionModal.hide(); });\n                        }\n                    },\n                    {\n                        items: makeItem(iconList.tvGuide, gettext('TV guide')),\n                        click: function () {\n                            app.route(app.pages.epg, channelList.$focusItem);\n                        }\n                    }\n                ],\n                events: {\n                    keydown: function ( event ) {\n                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                        switch ( event.code ) {\n                            case keys.back:\n                            case keys.menu:\n                                channelActionModal.hide();\n                                event.stop = true;\n                                break;\n                        }\n                    }\n                }\n            })\n        ]\n    }),\n    epgMenu = new ModalMessage({\n        title: gettext('Actions'),\n        events: {\n            show: function () {\n                this.focus();\n                this.children[0].focus();\n                footer.hide();\n            },\n            hide: function () {\n                programList.focus();\n                footer.show();\n            }\n        },\n        children: [\n            new LayoutList({\n                data: [],\n                size: 1,\n                cycle: true,\n                events: {\n                    keydown: function ( event ) {\n                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                        switch ( event.code ) {\n                            case keys.back:\n                            case keys.menu:\n                                epgMenu.hide();\n                                event.stop = true;\n                                break;\n                        }\n                    }\n                }\n            })\n        ]\n    }),\n    exitModal = new ModalMessage({\n        title: gettext('Exit'),\n        events: {\n            show: function () {\n                this.focus();\n                this.children[0].focus();\n                footer.hide();\n            },\n            hide: function () {\n                mainSet.focus();\n                footer.show();\n            }\n        },\n        children: [\n            new LayoutList({\n                className: 'padded',\n                focusIndex: 0,\n                data: [\n                    {\n                        items: [\n                            {\n                                value: gettext('Yes')\n                            }\n                        ],\n                        click: function () {\n                            // exit\n                            exitModal.hide();\n                            app.exit();\n                        }\n                    },\n                    {\n                        items: [\n                            {\n                                value: gettext('No')\n                            }\n                        ],\n                        click: function () {\n                            exitModal.hide();\n                        }\n                    }\n                ],\n                size: 2,\n                cycle: true,\n                events: {\n                    keydown: function ( event ) {\n                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                        switch ( event.code ) {\n                            case keys.back:\n                            case keys.menu:\n                                exitModal.hide();\n                                event.stop = true;\n                                break;\n                        }\n                    }\n                }\n            })\n        ]\n    }),\n    resetModal = new ModalMessage({\n        title: gettext('Actions'),\n        events: {\n            show: function () {\n                this.children[0].focus();\n                footer.hide();\n            },\n            hide: function () {\n                mainSet.focus();\n                footer.show();\n            }\n        },\n        children: [\n            new LayoutList({\n                focusIndex: 0,\n                data: [\n                    {\n                        items: makeItem('theme-icon theme-icon-rc-f1', gettext('Reset filters')),\n                        click: function () {\n                            //reset filters\n                            resetFilters();\n                            resetModal.hide();\n                        }\n                    }\n                ],\n                size: 1,\n                cycle: true,\n                events: {\n                    keydown: function ( event ) {\n                        LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                        switch ( event.code ) {\n                            case keys.back:\n                            case keys.menu:\n                                resetModal.hide();\n                                event.stop = true;\n                                break;\n                        }\n                    }\n                }\n            })\n        ]\n    })\n);\n\n\nfunction prepareChannels ( data ) {\n    var index,\n        channel,\n        result = [],\n        titleWrap,\n        title,\n        epgName,\n        epg;\n\n    if ( !data || data.length < 1 ) {\n        return [];\n    }\n\n    for ( index = 0; index < data.length; index++ ) {\n        titleWrap = document.createElement('div');\n        title = document.createElement('div');\n        title.className = 'name';\n        epg = document.createElement('div');\n        epg.className = 'epg' + (data[index].currentEpg ? ' visible' : '');\n        title.innerText = data[index].name;\n        if ( data[index].currentEpg && data[index].currentEpg.title ) {\n            epg.innerText = data[index].currentEpg.title;\n            epgName = data[index].currentEpg.title;\n        } else {\n            epg.innerText = '';\n            epgName = '';\n        }\n\n        titleWrap.appendChild(title);\n        titleWrap.appendChild(epg);\n        channel = {\n            items: [\n                {\n                    className: 'number' + (data[index]['monitoring_status'] ? '' : ' monitoringFail'),\n                    value: data[index].number.toString()\n                }\n            ],\n            value: data[index]\n        };\n\n\n        channel.items = channel.items.concat([\n            {\n                className: 'title' + (data[index]['monitoring_status'] ? '' : ' monitoringFail'),\n                value: titleWrap,\n                htmlInstance: true,\n                realValue: {name: data[index].name, epg: epgName}\n            },\n            {\n                className: ((data[index].censored || data[index].genre.censored ) ? 'theme-icon theme-icon-lock disabled' : '')\n            },\n            {\n                className: ((data[index].archive || data[index].local_timeshift ) ? 'theme-icon theme-icon-timeshift disabled' : '')\n            },\n            {\n                className: (data[index].favorite ? 'theme-icon theme-icon-favorite-active active' : '')\n            }\n        ]);\n\n        result.push(channel);\n    }\n\n    return result;\n}\n\n\npage.addListener('show', function ( data ) {\n    channelPanel.focus();\n    if ( data && data.data ) {\n        channelList.focusIndex(data.data.index);\n    }\n});\n\npage.addListener('keydown', function ( event ) {\n    if ( keyblock ) {\n        return;\n    }\n\n    switch ( event.code ) {\n        case keys.back:\n            //setChannel(tv.currentIndex, {context:null});\n            returnToPlayer();\n            break;\n        case keys.exit:\n            if ( app.lastIntent ) {\n                app.lastIntent.emit('exit');\n            }\n\n            // hack to set that app is minimized\n            app.minimized = true;\n            break;\n        case keys.web:\n            // hack to set that app is minimized\n            app.minimized = true;\n            break;\n        case keys.channelNext:\n            // nextChannelCallback({osd: false, skipCensored: false});\n            break;\n        case keys.channelPrev:\n            // prevChannelCallback({osd: false, skipCensored: false});\n            break;\n    }\n});\n\nstartApp();\n\n\nfunction updateChannelList ( callback ) {\n    provider.getChannels(tv.config, function ( error, data ) {\n    // render new list\n        if ( !error  ) {\n            channelList.setData({\n                data: prepareChannels(data),\n                focusIndex: 0\n            });\n\n            tv.list = data;\n            $channelsCount.innerText = data.length;\n\n            setTimeout(function () {\n                app.pages.epg.setChannels(data);\n                // app.emit('channels:load', data);\n            }, 0);\n\n            if ( callback ) {\n                callback();\n            }\n\n            if ( channelList.$focusItem ) {\n                channelList.$focusItem.data.value.getEpg(null, renderEpgList);\n            } else {\n                renderEpgList(false, []);\n            }\n        } else {\n            console.log('error getting channels');\n        }\n    });\n}\n\n\nfunction nextChannelCallback ( config ) {\n    var index = ++tv.currentIndex,\n        skipCensored = true,\n        showOsd = true;\n\n    config = config || {};\n\n    if ( config.osd !== undefined ) {\n        showOsd = config.osd;\n    }\n\n    if ( config.skipCensored !== undefined ) {\n        skipCensored = config.skipCensored;\n    }\n\n    if ( index > tv.list.length - 1 ) {\n        index = 0;\n        tv.currentIndex = 0;\n    }\n\n    // skip censored channel in fullscreen mode\n    if ( skipCensored && (tv.list[index].censored || ( tv.list[index].genre && tv.list[index].genre.censored )) ) {\n        nextChannelCallback();\n\n        return;\n    }\n    setChannel(index, {osd: showOsd});\n}\n\n\nfunction prevChannelCallback ( config ) {\n    var index = --tv.currentIndex,\n        skipCensored = true,\n        showOsd = true;\n\n    config = config || {};\n\n    if ( config.osd !== undefined ) {\n        showOsd = config.osd;\n    }\n\n    if ( config.skipCensored !== undefined ) {\n        skipCensored = config.skipCensored;\n    }\n    if ( index < 0 ) {\n        index = tv.currentIndex = tv.list.length - 1;\n    }\n\n    // skip censored channel in fullscreen mode\n    if ( skipCensored && (tv.list[index].censored || ( tv.list[index].genre && tv.list[index].genre.censored )) ) {\n        prevChannelCallback(config);\n    } else {\n        setChannel(index, {osd: showOsd});\n    }\n}\n\n\n/**\n * Send intent to record channel\n */\nfunction sendRecordIntent () {\n    var channel;\n\n    if ( !channelList.$focusItem.data.value.pvr && !channelList.$focusItem.data.value.local_pvr ) {\n        return;\n    }\n\n    channel = channelList.$focusItem.data.value;\n\n    if ( (channel.censored || ( channel.genre && channel.genre.censored )) &&\n        ( core.accessControl && !core.accessControl.state ) ) {\n\n        // close existing intents on osd\n        closeOpenedIntents([app.intents.osdInput, app.intents.osdTv]);\n        app.intents.osdInput = app.intents.osdTv = null;\n\n        core.accessControl.request(function ( error ) {\n            if ( !error ) {\n                core.intent({\n                    action: 'record',\n                    data: {\n                        uri: channel.url,\n                        name: channel.name,\n                        id: channel.id,\n                        pvr: {\n                            server: channel.pvr,\n                            local:  channel.local_pvr\n                        }\n                    }\n                });\n            }\n        });\n    } else {\n        core.intent({\n            action: 'record',\n            data: {\n                uri: channel.url,\n                name: channel.name,\n                id: channel.id,\n                pvr: {\n                    server: channel.pvr,\n                    local: channel.local_pvr\n                }\n            }\n        });\n    }\n}\n\n/**\n * Send intent ro record epg program\n */\nfunction sendRecordEpgIntent () {\n    var channel = channelList.$focusItem.data.value,\n        epg = programList.$focusItem.data.value;\n\n    app.foreground = false;\n\n    core.intent({\n        action: 'record',\n        data: {\n            uri: channel.url,\n            name: channel.name,\n            epgName: channel.name,\n            startTime: epg.start,\n            endTime: epg.end,\n            id: channel.id,\n            pvr: {\n                server: channel.pvr,\n                local:  channel.local_pvr\n            }\n        }\n    });\n}\n\nfunction antennaPower () {\n    app.provider.antennaPower = !antennaEnable;\n}\n\n/**\n * Send intent to show osd-input.\n *\n * @param {number} startCode - startCode to init intent\n * @param {boolean} osdState - osdState to show osd-tv\n * @param {boolean} compareState - compareState to call compare tv list config or not\n */\nfunction sendOsdInputIntent ( startCode, osdState, compareState ) {\n    keyblock = true;\n    clearTimeout(keyblockRevertTimeout);\n    keyblockRevertTimeout = setTimeout(function () {\n        keyblock = false;\n    }, KEYBLOCK_REVERT_TIMOUT);\n\n    app.intents.osdInput = core.intent({\n        action: 'osd-input',\n        data: {\n            type: 'numbers',\n            length: 4,\n            startChar: startCode\n        },\n        events: {\n            done: function ( value ) {\n                var channel,\n                    focusIndex,\n                    index;\n\n                if ( value && tv.current && tv.current.number && tv.current.number === Number(value) ) {\n                    // the same channel\n                    return;\n                }\n\n                // check in current list\n                for ( index = 0; index < tv.list.length; index++ ) {\n                    channel = tv.list[index];\n                    if ( channel.number === Number(value) ) {\n                        focusIndex = index;\n                        break;\n                    }\n                }\n\n                if ( focusIndex !== undefined ) {\n                    channelList.focusIndex(focusIndex);\n                    setChannel(focusIndex, {osd: osdState, silent: true, compareState: compareState});\n                    channelList.$focusItem.data.value.getEpg(null, function ( error, data ) {\n                        renderEpgList(error, data);\n                        initFooterOnEpgSelect();\n                    });\n                } else {\n                    core.notify({\n                        title: gettext('No such channel number'),\n                        icon: 'alert',\n                        type: 'warning',\n                        timeout: 1000\n                    });\n                }\n\n                keyblock = false;\n            }\n        }\n    });\n}\n\n\nfunction sendEpgPlayIntent ( channelIndex, epgObject ) {\n    var  channel = tv.list[channelIndex];\n\n    channelList.focusIndex(channelIndex);\n\n    if ( DEVELOP ) {\n        console.log(channel, 'chan');\n        console.log(epgObject, 'epgObj');\n    }\n\n    channel.getEpg(null, function (error, data) {\n        var index,\n            epgIndex,\n            focusIndex;\n\n        renderEpgList(error, data);\n        if ( DEVELOP ) {\n            console.log(error, 'error');\n        }\n\n        if ( data.length ) {\n            for ( index = 0; index < tv.epg.list.length; index++ ) {\n                if ( tv.epg.list[index].id === epgObject.id ) {\n                    epgIndex = index;\n                }\n            }\n\n            for ( focusIndex = 0; focusIndex < programList.data.length; focusIndex++ ) {\n                if ( programList.data[focusIndex] && programList.data[focusIndex].value &&\n                    programList.data[focusIndex].value.id && programList.data[focusIndex].value.id === epgObject.id ) {\n                    programList.focusIndex(focusIndex);\n                }\n            }\n\n            if ( epgIndex ) {\n                tv.epg.currentPlayIndex = epgIndex;\n\n                tv.epg.currentPlayIndex = epgIndex;\n                epgObject.getLink(function ( error, epgData ) {\n                    var nextHandler,\n                        prevHandler;\n\n                    if ( error ) {\n                        console.log(error);\n                    }\n\n                    if ( epgData && epgData.url ) {\n                        if ( tv.epg.list[tv.epg.currentPlayIndex - 1]\n                            && tv.epg.list[tv.epg.currentPlayIndex - 1].archive ) {\n                            prevHandler = function () {\n                                programList.emit('keydown', {code: keys.up});\n                                sendEpgPlayIntent(channelIndex, tv.epg.list[--tv.epg.currentPlayIndex]);\n                            };\n                        }\n\n                        if (  tv.epg.list[tv.epg.currentPlayIndex + 1] &&\n                            tv.epg.list[tv.epg.currentPlayIndex + 1].archive ) {\n                            nextHandler = function () {\n                                programList.emit('keydown', {code: keys.down});\n                                sendEpgPlayIntent(channelIndex, tv.epg.list[++tv.epg.currentPlayIndex]);\n                            };\n                        } else {\n                            nextHandler = function () {\n                                setChannel(channelIndex, {force: true});\n                            };\n                        }\n\n                        tv.current = null;\n                        app.lastIntent = core.intent({\n                            action: 'play',\n                            mime: 'content/video',\n                            context: null,\n                            data: {\n                                uri: epgData.url,\n                                solution: epgData.solution,\n                                resource: 'tv-archive',\n                                title: epgObject.title,\n                                persistent: true,\n                                mediaId: epgData['media_id'],\n                                exitWithConfirm: true\n                            },\n                            events: {\n                                close: function () {\n                                    // clear context to show player after new channel select\n                                    tv.context = null;\n                                    // app.foreground = true;\n                                    // need to hide osd-tv if player intent is closed\n                                    if ( app.intents.osdTv ) {\n                                        app.intents.osdTv.close();\n                                        app.intents.osdTv = null;\n                                    }\n                                },\n                                next: nextHandler,\n                                prev: prevHandler,\n                                nextChannel: nextChannelCallback,\n                                prevChannel: prevChannelCallback,\n                                stop: function ( event ) {\n                                    event = event || {};\n\n                                    if ( event.manual ) {\n                                        // playChannel\n                                        setChannel(channelIndex, {\n                                            force: true\n                                        });\n                                    }\n                                },\n                                onPip: function () {\n                                    NEED_SILENCE = true;\n                                    tv.context = null;\n                                    tv.current = null;\n                                    tv.currentIndex = null;\n                                },\n                                end: nextHandler\n                            }\n                        }, function ( error, context ) {\n                            if ( error ) {\n                                console.log(error);\n                            }\n\n                            tv.context = context;\n                            tv.currentIndex = channelIndex;\n                            tv.current = tv.list[channelIndex];\n                        });\n\n                    } else {\n                        // notify if can't get epg link\n                        notifyError(gettext('Error getting EPG'));\n                    }\n                });\n            } else {\n                // notify error here. we cant find index of program\n                notifyError(gettext('Error getting EPG'));\n            }\n        } else {\n            // notify error here\n            notifyError(gettext('Error getting EPG for ') + channel.name);\n        }\n    });\n}\n\n\n// app.sendEpgPlayIntent = sendEpgPlayIntent;\n\n/**\n * Init footer when select epg program\n */\nfunction initFooterOnEpgSelect () {\n    var nowTime = new Date() / 1000;\n\n    if ( page.activeComponent !== programList ) {\n        return;\n    }\n\n    if ( !programList.$focusItem || (programList.$focusItem && !programList.$focusItem.data.value ) ) {\n        // updateFooterLater([]);\n        footer.hide();\n\n        return;\n    }\n\n    if ( programList.$focusItem.data.value.archive ) {\n        updateFooterLater(\n            {\n                left: {\n                    code: keys.menu,\n                    action: showEpgMenu\n                },\n                middle: [\n                    {\n                        title: gettext('Play'),\n                        code: keys.f2,\n                        action: function () {\n                            sendEpgPlayIntent(channelList.$focusItem.index, programList.$focusItem.data.value);\n                        }\n                    }\n                ],\n                label: {\n                    code: keys.menu,\n                    title: gettext('Hold OK button to open Options menu'),\n                    action: showEpgMenu\n                }\n            }\n            /*[\n            {code: keys.menu, action: showEpgMenu},\n            {\n                title: _('Play'),\n                code: keys.f2,\n                action: function () {\n                    sendEpgPlayIntent(channelList.$focusItem.index, programList.$focusItem.data.value);\n                }\n            }]*/);\n        //footer.show();\n    } else {\n        if ( (programList.$focusItem.data.value.start > nowTime ||\n            ( programList.$focusItem.data.value.start < nowTime && programList.$focusItem.data.value.end > nowTime )) &&\n            channelList.$focusItem && channelList.$focusItem.data && channelList.$focusItem.value &&\n            ( channelList.$focusItem.data.value.pvr || channelList.$focusItem.data.value.local_pvr ) ) {\n            updateFooterLater(\n                {\n                    left: {\n                        code: keys.menu,\n                        action: showEpgMenu\n                    },\n                    middle: [\n                        {\n                            title: gettext('Record'),\n                            code: keys.f1,\n                            action: function () {\n                                if ( !programList.$focusItem ) {\n                                    return;\n                                }\n                                sendRecordEpgIntent();\n                            }\n                        }\n                    ],\n                    label: {\n                        code: keys.menu,\n                        title: gettext('Hold OK button to open Options menu'),\n                        action: showEpgMenu\n                    }\n                }\n            );\n        } else {\n            footer.hide();\n        }\n    }\n}\n\nfunction initFooterOnChannelSelect () {\n    var initData = {\n        left: {\n            code: keys.menu,\n            action: function () {\n                mainSet.blur();\n                renderActionModal();\n                channelActionModal.show();\n            }\n        },\n        middle: [],\n        label: {\n            code: keys.menu,\n            title: gettext('Hold OK button to open Options menu'),\n            action: function () {\n                mainSet.blur();\n                renderActionModal();\n                channelActionModal.show();\n            }\n        }\n    };\n\n    if ( channelList.$focusItem ) {\n        if ( channelList.$focusItem.data.value.pvr || channelList.$focusItem.data.value.local_pvr ) {\n            initData.middle.push(\n                {\n                    code: keys.f1,\n                    title: gettext('Record'),\n                    action: function () {\n                        sendRecordIntent();\n                    }\n                }\n            );\n        }\n    }\n\n    if ( TARGET === 'dvb' ) {\n        initData.middle.push(\n            {\n                code: keys.f2,\n                title: antennaEnable ? gettext('Antenna power off') : gettext('Antenna power on'),\n                action: function () {\n                    antennaPower();\n                }\n            }\n        );\n    }\n\n    if ( channelList.$focusItem ) {\n        initData.middle.push(\n            {\n                code: keys.f3,\n                title: gettext('Favorite'),\n                action: function () {\n                    toggleFavorite({index: channelList.$focusItem.index, item: channelList.$focusItem},\n                        function () { debug.log('toggle favorite'); });\n                }\n            }\n        );\n\n        initData.middle.push({\n            code: keys.f4,\n            title: gettext('TV guide'),\n            action: function () {\n                app.route(app.pages.epg, channelList.$focusItem);\n            }\n        });\n    }\n\n    updateFooterLater(initData);\n}\n\n\n/**\n * Show epg menu modal message\n */\nfunction showEpgMenu () {\n    var list = epgMenu.children[0],\n        currentEpg,\n        nowTime = new Date() / 1000,\n        renderData = [];\n\n    if ( programList.$focusItem ) {\n        currentEpg = programList.$focusItem.data.value;\n    } else {\n        return;\n    }\n\n    if ( currentEpg.archive ) {\n        renderData[0] = {\n            items: makeItem(iconList.play, gettext('Play')),\n            click: function () {\n                sendEpgPlayIntent(channelList.$focusItem.index, programList.$focusItem.data.value);\n                epgMenu.hide();\n            }\n        };\n    } else if ( (currentEpg.start > nowTime || ( currentEpg.start < nowTime && currentEpg.end > nowTime ))\n        && (channelList.$focusItem.data.value.pvr || channelList.$focusItem.data.value.local_pvr) ) {\n        renderData[0] = {\n            items: makeItem(iconList.record, gettext('Record')),\n            click: function () {\n                sendRecordEpgIntent();\n                epgMenu.hide();\n            }\n        };\n    } else { return; }\n\n    list.init({\n        data: renderData,\n        size: renderData.length,\n        focusIndex: 0\n    });\n    epgMenu.show();\n}\n\nif ( DEVELOP ) {\n    window.tv = tv;\n}\n\n\n/**\n * Base function to start app, get last channel or get channel list\n */\nfunction startApp () {\n    var categories = [],\n        isHome = core.applicationState.home;\n\n    $nowDate.innerText = utils.getCurrentDate();\n    $nowDate.style.height = window.getComputedStyle($nowDate).height;\n\n    provider.updateChannelsList(function ( error ) {\n        if ( error ) {\n            // do smth\n        }\n\n        provider.getLastChannelId(function ( error, id ) {\n            var index, channel, focusIndex;\n\n            setTimeout(function () {\n                console.log('TV APP START');\n                app.ready();\n                app.loaded = true;\n                app.emit('ready');\n                if ( provider.startBackgroundCheck ) {\n                    provider.startBackgroundCheck();\n                }\n            }, 100);\n\n            if ( error && !id ) {\n                updateChannelList(function () {\n                    if ( channelList.$focusItem ) {\n                        //setChannel(channelList.$focusItem.index, {silent: true});\n                    }\n                });\n            } else {\n                updateChannelList(function () {\n                    for ( index = 0; index < tv.list.length; index++ ) {\n                        channel = tv.list[index];\n                        if ( channel.id === Number(id) ) {\n                            focusIndex = index;\n                            break;\n                        }\n                    }\n\n                    focusIndex = focusIndex || 0;\n                    if ( tv.list.length === 0 ) {\n                        return;\n                    }\n\n                    channelList.focusIndex(focusIndex);\n\n                    if (\n                        channelList.$focusItem.data.value\n                        && ( channelList.$focusItem.data.value.censored\n                        || (channelList.$focusItem.data.value.genre && channelList.$focusItem.data.value.genre.censored))\n                    ) {\n                        // channel is under parrent password, need to do something\n                        console.log('channel is censored');\n                    } else {\n                        core.once('show', function () {\n                            if ( core.applicationState.visible ) {\n                                if ( isHome ) {\n                                    setChannel(focusIndex, {silent: false, context: null});\n                                } else {\n                                    setChannel(focusIndex, {silent: false});\n                                }\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    });\n\n    // get and generate category list :)\n    if ( MODE === 'MINISTRA' && TARGET !== 'dvb' ) {\n        categories[0] = {\n            items: [\n                {\n                    value: gettext('All categories'),\n                    className: 'title'\n                }\n            ],\n            value: {id: false, name: gettext('All categories')}\n        };\n\n        provider.getCategories(function ( error, data ) {\n            if ( !error ) {\n                data.forEach(function (genre) {\n                    categories.push({\n                        items: [\n                            {\n                                value: genre.name,\n                                className: 'title'\n                            }\n                        ],\n                        value: genre\n                    });\n                });\n            }\n            categoryList.children[0].init({\n                data: categories,\n                focusIndex: 0\n            });\n        });\n    }\n\n    provider.addListener('channels:delete', deleteChannelsCallback);\n    provider.addListener('channels:add', addChannelsCallback);\n    provider.addListener('channels:modified', updateChannelsCallback);\n    provider.addListener('update', fullUpdateChannelsCallback);\n}\n\n// Callback on 'channels:delete' event\nfunction deleteChannelsCallback ( event ) {\n    core.notify({\n        title: format(window.ngettext('{0} channel was deleted', '{0} channels were deleted', event.data.length), event.data.length),\n        icon: 'alert',\n        type: 'warning',\n        timeout: CHANNELS_UPDATE_NOTIFICATION_TIMEOUT\n    });\n    updateRender();\n}\n\n// Callback on 'channels:add' event\nfunction addChannelsCallback ( event ) {\n    console.log('Add Channels');\n\n    if (event.data.length > 1 ) {\n        core.notify({\n            title: format(gettext('{0} channels were added'), event.data.length),\n            icon: 'info',\n            type: 'success',\n            timeout: CHANNELS_UPDATE_NOTIFICATION_TIMEOUT\n        });\n    } else if ( event.data.length === 1 ) {\n        core.notify({\n            title:  format(gettext('Channel {0} was added'), event.data[0].name),\n            icon: 'info',\n            type: 'success',\n            timeout: CHANNELS_UPDATE_NOTIFICATION_TIMEOUT\n        });\n    }\n\n    updateRender();\n}\n\n/**\n * Full update channel list if get message from server\n */\nfunction fullUpdateChannelsCallback () {\n    console.log('Channels were updated____');\n\n    // notify only if app is visible\n    if ( core.applicationState.visible ) {\n        core.notify({\n            title: gettext('Channels were updated'),\n            icon: 'info',\n            type: 'success',\n            timeout: CHANNELS_UPDATE_NOTIFICATION_TIMEOUT\n        });\n    }\n    updateRender();\n}\n\n/**\n * Callback on channels:modified event\n *\n */\nfunction updateChannelsCallback () {\n    provider.getChannels(tv.config, function ( error, data ) {\n        var index;\n\n        if ( error ) {\n            console.log(error);\n        }\n\n        tv.list = data;\n        channelList.data = prepareChannels(data);\n        for ( index = 0; index < channelList.$body.children.length; index++ ) {\n            channelList.renderItem(channelList.$body.children[index], channelList.data[channelList.$body.children[index].index]);\n        }\n    });\n}\n\n/**\n * Rerender channel list after callbacks\n */\nfunction updateRender () {\n    provider.getChannels(tv.config, function (error, data) {\n        var focusId = channelList.$focusItem.data.value.id,\n            index, newIndex,\n            newFocusIndex;\n\n        if ( error ) {\n            console.log(error);\n        }\n\n        channelList.setData({\n            data: prepareChannels(data),\n            focusIndex: 0\n        });\n        tv.list = data;\n        $channelsCount.innerText = data.length;\n        app.pages.epg.setChannels(data);\n        // app.emit('channels:load', data);\n        if ( tv.current && tv.current.id ) {\n            for ( index = 0; index < tv.list.length; index++ ) {\n                if ( tv.list[index].id === tv.current.id ) {\n                    newIndex = index;\n                    break;\n                }\n            }\n        }\n\n        for ( index = 0; index < tv.list.length; index++ ) {\n            if ( tv.list[index].id === focusId ) {\n                newFocusIndex = index;\n                break;\n            }\n        }\n\n        newIndex = newIndex || 0;\n        newFocusIndex = newFocusIndex || 0;\n\n        tv.currentIndex = newIndex;\n        channelList.focusIndex(newFocusIndex);\n\n        tv.list[channelList.$focusItem.index].getEpg(null, renderEpgList);\n    });\n}\n\nfunction updateChannelListEpg () {\n    clearTimeout(tv.channelListEpgTimeout);\n    tv.channelListEpgTimeout = setTimeout(update, core.environment.onFocusDebounceTimeout || 400);\n\n    clearInterval(tv.channelListEpgInterval);\n    tv.channelListEpgInterval = setInterval(update, CURRENT_EPG_UPDATE_INTERVAL);\n\n    function update () {\n        var index,\n            channelArray = [];\n\n        for ( index = 0; index < channelList.$body.children.length; index++ ) {\n            if ( channelList.$body.children[index].data ) {\n                channelArray.push(channelList.$body.children[index].data.value);\n            }\n        }\n        provider.getChannelsEpg({channels: channelArray}, function ( error, data ) {\n            var channel;\n\n            if ( !error ) {\n                for ( index = 0; index < channelList.$body.children.length; index++ ) {\n                    if ( channelList.$body.children[index].data ) {\n                        channel = channelList.$body.children[index].data.value;\n                    }\n\n                    if ( channel && data[channel.id] ) {\n                        channel.currentEpg = data[channel.id][0];\n                    }\n                }\n                channelList.data = prepareChannels(tv.list);\n\n                for ( index = 0; index < channelList.$body.children.length; index++ ) {\n                    if (channelList.$body.children[index].data) {\n                        channelList.renderItem(channelList.$body.children[index], channelList.data[channelList.$body.children[index].index]);\n                    }\n                }\n            }\n        });\n    }\n}\n\n\n/**\n * Render EPG list.\n *\n * @param {boolean} error - error state\n * @param {Array} data - data of epg programs\n */\nfunction renderEpgList ( error, data ) { // eslint-disable-line\n    var time = '',\n        stateClassName = '',\n        renderData = [],\n        nowTime = new Date() / 1000,\n        prog, config, index, timeIconClassName,\n        channel,\n        currentIndex,\n        viewIndex;\n\n    if ( error ) {\n        console.log(error);\n    }\n\n    if ( !channelList.$focusItem ) {\n        $nowDate.innerText = utils.getCurrentDate();\n\n        return;\n    }\n\n    tv.epg.list = data;\n    channel = channelList.$focusItem.data.value;\n\n    if ( channel && ( channel.censored || (channel.genre && channel.genre.censored)) && ( !tv.current || tv.current.id !== channel.id ) &&\n        (core.accessControl && !core.accessControl.state) ) {\n        // hide epg if channel in under parent control and nor current\n        programList.init({data: []});\n        programList.$noData.classList.remove('disabled');\n\n        return;\n    }\n\n    programList.$noData.classList.add('disabled');\n\n    // insert date items\n    data = insertDays(data);\n    for ( index = 0; index < data.length; index++ ) {\n        prog = data[index];\n        timeIconClassName = 'time';\n        // this is realy epg program\n        if ( prog.systemDate ) {\n            renderData.push({\n                items: [\n                    {\n                        value: prog.title,\n                        className: 'system-date'\n                    }\n                ],\n                value: null\n            });\n        } else {\n            if ( prog.start ) {\n                time = new Date(prog.start * 1000);\n                time = ( '0' + time.getHours()).slice(-2) + ':' + ( '0' + time.getMinutes()).slice(-2);\n            }\n\n            if ( prog.archive) {\n                timeIconClassName += ' green';\n            } else if ((channelList.$focusItem.data.value.pvr || channelList.$focusItem.data.value.local_pvr) &&\n                (prog.start > nowTime || ( prog.start < nowTime && prog.end > nowTime )) ) {\n                timeIconClassName += ' red';\n            }\n            if ( prog.end < nowTime ) {\n                stateClassName = ' theme-text-disabled';\n            } else if ( prog.start < nowTime && prog.end > nowTime ) {\n                stateClassName = ' current';\n            } else {\n                stateClassName = ' coming';\n            }\n            renderData.push({\n                items: [\n                    {className: timeIconClassName + stateClassName, value: time},\n                    {className: 'title' + stateClassName, value: prog.title}\n                ],\n                value: prog\n            });\n        }\n    }\n\n    config = {\n        data: renderData,\n        size: 7\n    };\n\n    if ( data.length ) {\n        config.focusIndex = 0;\n    }\n\n    programList.init(config);\n\n    viewIndex =  data.findIndex(function ( object ) {\n        return (!object.systemDate && object.start < nowTime && object.end > nowTime);\n    });\n\n    if ( viewIndex && viewIndex > 6 ) {\n        if ( data.length - viewIndex - 4 > 0 ) {\n            programList.renderView(viewIndex - 3);\n        } else {\n            programList.renderView(data.length - 7);\n        }\n    }\n\n    currentIndex = programList.data.findIndex(function ( program ) {\n        return (program.value && program.value.start < nowTime && program.value.end > nowTime);\n    });\n\n    if ( currentIndex && currentIndex > 0 ) {\n        programList.focusIndex(currentIndex);\n    } else {\n        if ( programList.$focusItem && !programList.$focusItem.data.value ) {\n            if ( programList.data[programList.$focusItem.index + 1] ) {\n                programList.focusIndex(programList.$focusItem.index + 1);\n            } else if ( programList.data[programList.$focusItem.index - 1] ) {\n                programList.focusIndex(programList.$focusItem.index - 1);\n            }\n        }\n    }\n\n    if ( programList.$focusItem && programList.$focusItem.data.value &&\n        $nowDate.innerText !== utils.getCurrentDate(programList.$focusItem.data.value.start * 1000) ) {\n        $nowDate.innerText = utils.getCurrentDate(programList.$focusItem.data.value.start * 1000);\n    }\n}\n\nfunction insertDays ( data ) {\n    var length = data.length,\n        result = [],\n        current,\n        next,\n        index;\n\n    if ( !data || length === 0 ) {\n        return [];\n    }\n\n    result.push({\n        systemDate: true,\n        title: utils.getCurrentDate(data[0].start * 1000)\n    });\n\n    for ( index = 0; index < length - 1; index++ ) {\n        current = data[index];\n        next = data[index + 1];\n        result.push(current);\n\n        // check if next epg program has biggest start date\n        if ( new Date(current.start * 1000).getDate() < new Date(next.start * 1000).getDate() ||\n             new Date(current.start * 1000).getMonth() < new Date(next.start * 1000).getMonth() ) {\n            result.push({\n                systemDate: true,\n                title: utils.getCurrentDate(next.start * 1000)\n            });\n        }\n    }\n\n    result.push(data[length - 1]);\n\n    return result;\n}\n\n/**\n * Render channel action modal menu\n */\nfunction renderActionModal () {\n    var data = [],\n        channel = channelList.$focusItem.data.value;\n\n    if ( channelList.$focusItem && (channelList.$focusItem.data.value.pvr || channelList.$focusItem.data.value.local_pvr ) ) {\n        data.push({\n            items: makeItem(iconList.record, gettext('Record')),\n            click: function () {\n                sendRecordIntent();\n                channelActionModal.hide();\n            }\n        });\n    }\n\n    if ( TARGET === 'dvb' ) {\n        data.push({\n            items: makeItem('theme-icon theme-icon-rc-f2', antennaEnable ? gettext('Antenna power off') : gettext('Antenna power on')),\n            click: function () {\n                antennaPower();\n                channelActionModal.hide();\n            }\n        });\n    }\n\n    if ( channel.favorite ) {\n        data.push({\n            items: makeItem(iconList.favoriteActive, gettext('Remove from favorites')),\n            click: function () {\n                toggleFavorite({index: channelList.$focusItem.index, item: channelList.$focusItem},\n                    function () {\n                        channelActionModal.hide();\n                    });\n            }\n        });\n    } else {\n        data.push({\n            items: makeItem(iconList.favorite, gettext('Add to favorite')),\n            click: function () {\n                toggleFavorite({index: channelList.$focusItem.index, item: channelList.$focusItem},\n                    function () {\n                        channelActionModal.hide();\n                    });\n            }\n        });\n    }\n\n    data.push({\n        items: makeItem(iconList.tvGuide, gettext('TV guide')),\n        click: function () {\n            channelActionModal.hide();\n            setTimeout(function () {\n                app.route(app.pages.epg, channelList.$focusItem);\n            });\n        }\n    });\n\n    if ( !provider.local ) {\n        // add some actions for local channels storage\n        data = data.concat([]);\n    }\n\n    actionModalList.init({\n        data: data,\n        size: data.length > 5 ? 5 : data.length,\n        focusIndex: 0\n    });\n}\n\n\nfunction toggleFavorite ( config, callback ) {\n    var index = config.index;\n\n    tv.list[index].toggleFavorite(function ( error, state ) {\n        // rerender list or element if no error\n        if ( !error ) {\n            channelList.data[index].value.favorite = state;\n            if ( state ) {\n                channelList.data[index].items[4].className = 'icon theme-icon-favorite-active active';\n            } else {\n                channelList.data[index].items[4].className = 'icon theme-icon-favorite disabled';\n            }\n            if ( config.item ) {\n                channelList.renderItem(config.item, prepareChannels([tv.list[index]])[0]);\n            }\n\n            // set current channel state if needed\n            if ( tv.current && tv.current.id === tv.list[index].id ) {\n                titleWidget.set(tv.list[index]);\n            }\n        } else {\n            return;\n        }\n\n        if ( callback ) {\n            callback();\n        }\n    });\n}\n\n\n/**\n * Reset selected filters and update channel list.\n *\n * @param {Object} [config] - config object to set filters\n * @param {boolean} [resetLastConfig] - reset last config flag to reset previous played config\n * @param {Function} [callback] - callback after reset\n */\nfunction resetFilters ( config, resetLastConfig, callback ) {\n    var favoriteIco  = menuList.$body.children[1].children[0].children[0],\n        categoryItem = menuList.$body.children[2].children[0].children[1],\n        categoryIcon = menuList.$body.children[2].children[0].children[0],\n        searchItem   = menuList.$body.children[0].children[0].children[1],\n        searchIcon   = menuList.$body.children[0].children[0].children[0],\n        genreIndex;\n\n    config = config || {};\n\n    if ( !tv.config.search && !tv.config.favorite && !tv.config.genre && !Object.keys(config).length ) {\n        return;\n    }\n\n    console.log('RESET FILTERS');\n    console.log(config);\n    if ( config.favorite ) {\n        // $item.layout.$body.childNodes[0].className = 'theme-icon theme-icon-favorite-active active';\n        favoriteIco.className = 'theme-icon theme-icon-favorite-active active';\n    } else {\n        favoriteIco.className = 'theme-icon theme-icon-favorite';\n    }\n    tv.config.favorite = config.favorite || false;\n\n    searchItem.innerText = config.search || gettext('Search');\n    tv.config.search = config.search || false;\n    if ( !tv.config.search ) {\n        searchIcon.classList.remove('active');\n    } else {\n        searchIcon.classList.add('active');\n    }\n\n    if ( TARGET !== 'dvb' ) {\n        if ( config.genre !== undefined ) {\n            genreIndex = categoryModalList.data.findIndex(function ( genre ) { return genre.value.id === config.genre; });\n            categoryItem.innerText = categoryModalList.data[genreIndex].value.name;\n            tv.config.genre = config.genre;\n            categoryModalList.focusIndex(genreIndex);\n            if ( config.genre ) {\n                categoryIcon.classList.add('active');\n            } else {\n                categoryIcon.classList.remove('active');\n            }\n        } else {\n            categoryItem.innerText = gettext('All categories');\n            categoryIcon.classList.remove('active');\n            tv.config.genre = false;\n            categoryModalList.focusIndex(0);\n        }\n    }\n\n    updateChannelList(callback);\n\n    // reset last config and search current channel in total list\n    if ( resetLastConfig ) {\n        console.log('resetLastConfig');\n        tv.lastActiveState.config = {\n            favorite: false,\n            byName: false,\n            genre: false,\n            search: false\n        };\n\n        channelList.focusIndex(tv.list.indexOf(tv.current));\n    }\n}\n\nfunction updateFooterLater ( data, delay ) {\n    delay = delay || core.environment.onFocusDebounceTimeout || 400;\n    data = data || {middle: []};\n\n    clearTimeout(tv.footerInitDelay);\n\n    tv.footerInitDelay = setTimeout(function () {\n        footer.init(data);\n        if ( data ) {\n            footer.show();\n        }\n    }, delay);\n}\n\n/**\n * Set channel to play.\n *\n * @param {number} index - index of channel to play\n * @param {Object} [config] - config data\n */\nfunction setChannel ( index, config ) {\n    var channel;\n\n    config = config || {};\n    channel = tv.list[index];\n\n    // show tv-osd if no silent play\n    if ( config.osd ) {\n        sendOsdTvIntent(channel, false);\n    }\n\n    // false to deactivate\n    if ( (channel.censored || channel.genre.censored) ) {\n        if ( tv.current !== null && channel.id === tv.current.id && !config.force ) {\n            process();\n\n            return;\n        }\n\n        // close existing osd intents\n        closeOpenedIntents([app.intents.osdInput, app.intents.osdTv]);\n        app.intents.osdInput = app.intents.osdTv = null;\n\n        core.accessControl.request(function ( error ) {\n            debug.warn(error);\n            if ( !error ) {\n                process({forceEpg: true});\n            }\n        });\n    } else {\n        process();\n    }\n\n    // need to rename\n    function process ( params ) {\n        params = params || {};\n\n        if ( channel['monitoring_status'] ) {\n            channel.getUrl(function (error, data) {\n                if ( error ) {\n                    core.notify({\n                        title: 'Error getting channel link',\n                        icon: 'alert',\n                        type: 'warning',\n                        timeout: 2000\n                    });\n                } else {\n                    sendIntent(channel, data.url, data.solution );\n                }\n            });\n        } else {\n            core.notify({\n                title: gettext('Channel is temporary unavailable'),\n                icon: 'alert',\n                type: 'warning',\n                timeout: 2000\n            });\n        }\n\n        titleWidget.set(channel);\n\n        function sendIntent ( channelToSend, url, solution ) { /*eslint no-else-return:0*/\n            var isSame = ( tv.current === channelToSend && !config.force ),\n                context,\n                modalMenuConfig,\n                viewportConfig;\n\n            if ( isSame ) {\n                url = '';\n            }\n\n            app.foreground = !isSame;\n\n\n            if ( isSame ) {\n                returnToPlayer({force: true});\n\n                return;\n            } else {\n                context = config.context !== undefined ? config.context : tv.context;\n            }\n\n            if ( channelToSend.pvr || channelToSend.local_pvr ) {\n                modalMenuConfig = [\n                    {\n                        icon: 'f1',\n                        title: 'Record',\n                        handler: function () {\n                            channelList.focusIndex(tv.currentIndex);\n                            if ( app.intents.osdTv ) {\n                                app.intents.osdTv.close();\n                                app.intents.osdTv = null;\n                            }\n                            sendRecordIntent();\n                        }\n                    }\n                ];\n            }\n\n            app.lastIntent = core.intent({\n                action: 'play',\n                mime: 'content/video',\n                silent: config.silent,\n                data: {\n                    uri: url,\n                    title: channelToSend.name,\n                    solution: solution || 'auto',\n                    // don't show control at start playing\n                    headless: true,\n                    // don't stop playback if player hide\n                    persistent: true,\n                    modalMenu: modalMenuConfig,\n                    mediaId: channelToSend.id,\n                    tvChannel: channelToSend,\n                    viewport: viewportConfig,\n                    extra: channelToSend.extra,\n                    exitWithConfirm: true,\n                    retryOnError: true,\n                    // we play streams\n                    stream: true,\n                    // set channel volume correction if need\n                    volumeCorrection: channelToSend['volume_correction']\n                },\n                context: context,\n                events: playIntentEventsWrapper(channelToSend, index)\n            }, function ( error, newContext ) {\n                if ( error ) {\n                    debug.log('error');\n                }\n\n                tv.context = newContext;\n            });\n            tv.current = channelToSend;\n            tv.currentIndex = index;\n            if ( params.forceEpg && channelList.$focusItem ) {\n                channelList.$focusItem.data.value.getEpg(null, renderEpgList);\n            }\n        }\n    }\n\n    // save and compare previous tv list config\n    // if user try to hide tv and go to full screen player we should ask to reset filters (^^_)\n    if ( config.compareState ) {\n        if ( tv.config.favorite !== tv.lastActiveState.config.favorite ||\n            tv.config.genre !== tv.lastActiveState.config.genre ||\n            tv.config.search !== tv.lastActiveState.config.search ||\n            tv.config.byName !== tv.lastActiveState.config.byName ) {\n            // now we should save config to restore it in feature\n            tv.lastActiveState.config.favorite = tv.config.favorite;\n            tv.lastActiveState.config.genre = tv.config.genre;\n            tv.lastActiveState.config.search = tv.config.search;\n            tv.lastActiveState.config.byName = tv.config.byName;\n        }\n    }\n\n    if ( NEED_SILENCE ) {\n        NEED_SILENCE = false;\n    }\n}\n\n\nfunction keydownHandlerForOsdInput ( event ) {\n    var codes = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57];\n\n    event = event || {};\n\n    if ( codes.indexOf(event.code) > -1 ) {\n        sendOsdInputIntent(String.fromCharCode(event.code), false, true);\n    }\n}\n\n\nfunction playIntentEventsWrapper ( channel, index ) {\n    return {\n        nextChannel: tv.list.length > 1 ? nextChannelCallback : false,\n        prevChannel: tv.list.length > 1 ? prevChannelCallback : false,\n        onInfoPress: function () {\n            sendOsdTvIntent(channel, true);\n        },\n        close: function () {\n            channelList.focusIndex(tv.currentIndex);\n            tv.context = null;\n            app.lastIntent.silent = false;\n            // update some additional info\n            // initFooterOnChannelSelect();\n            clearTimeout(tv.epgTimeout);\n            if ( !channelList.$focusItem ) {\n                return;\n            }\n\n            tv.epgTimeout = setTimeout(function () {\n                if ( !channelList.$focusItem ) {\n                    return;\n                }\n\n                tv.list[channelList.$focusItem.index].getEpg(null, renderEpgList);\n            }, 800);\n\n            if ( app.intents.osdTv ) {\n                app.intents.osdTv.close();\n                app.intents.osdTv = null;\n            }\n        },\n        onNumberPress: function ( event ) {\n            sendOsdInputIntent(event.number, true);\n        },\n        start: function () {\n            clearTimeout(tv.lastChannelTimeout);\n            tv.lastChannelTimeout = setTimeout(function () {\n                tv.list[index].setLast();\n            }, LAST_CHANNEL_TIMEOUT);\n        },\n        onPip: function () {\n            NEED_SILENCE = true;\n            tv.context = null;\n            tv.current = null;\n            tv.currentIndex = null;\n        }\n    };\n}\n\n\nfunction sendOsdTvIntent ( channel, attach ) {\n    app.intents.osdTv = core.intent({\n        action: 'osd-tv',\n        data: {\n            name: channel.name,\n            number: channel.number,\n            favorite: channel.favorite,\n            pvr: (channel.local_pvr || channel.pvr),\n            timeshift: channel.local_timeshift,\n            censored: channel.censored || ( channel.genre && channel.genre.censored ),\n            // stay on display\n            attach: attach\n        }\n    }, function () { debug.log('send osd intent'); });\n}\n\n/**\n * Check if current channel list sorting is the same as played sorted list\n *\n * @return {boolean} state of sorting\n */\nfunction isSortingDifferent () {\n    return (\n        tv.config.favorite !== tv.lastActiveState.config.favorite\n        || tv.config.genre !== tv.lastActiveState.config.genre\n        || tv.config.search !== tv.lastActiveState.config.search\n        || tv.config.byName !== tv.lastActiveState.config.byName\n    );\n}\n\nfunction returnToPlayer ( config ) {\n\n    if ( !tv.current || tv.currentIndex === undefined ) {\n        // here check if playback do not start when app start with last censored channel\n        // just exit app\n        console.log('we do not know current channel');\n        mainSet.blur();\n        exitModal.show();\n\n        return;\n    }\n\n    config = config || {};\n\n    // compare lastPlayed config and current and if it's not equal we must restore it\n    if ( isSortingDifferent() && !config.force ) {\n        core.notify({\n            title: gettext('Reset filters') + ' ?',\n            icon: 'alert',\n            buttons: [\n                {\n                    value: gettext('Cancel'),\n                    click: function () {\n                        // do nothing, magcore-core automatically hide notification and focus tv\n                    }\n                },\n                {\n                    // just take first word from reset filter translation :)\n                    value: gettext('Reset filters').split(' ')[0],\n                    click: function () {\n                        resetFilters(tv.lastActiveState.config);\n\n                        tv.config.favorite = tv.lastActiveState.config.favorite;\n                        tv.config.genre = tv.lastActiveState.config.genre;\n                        tv.config.search = tv.lastActiveState.config.search;\n                        tv.config.byName = tv.lastActiveState.config.byName;\n\n                        app.lastIntent.show(app.lastIntent.receiver);\n                        app.foreground = false;\n                    }\n                }\n            ],\n            timeout: 5000\n        });\n    } else {\n        app.lastIntent.show(app.lastIntent.receiver);\n        app.foreground = false;\n    }\n}\n\n\ncore.addListener('play:channel', function ( data ) {\n    var index,\n        indexToPlay;\n\n    function findAndPlay ( number ) {\n        for ( index = 0; index < tv.list.length; index++ ) {\n            if ( tv.list[index].number === number ) {\n                indexToPlay = index;\n                break;\n            }\n        }\n\n        if ( indexToPlay !== undefined ) {\n            // if channel to play is not censored we should play\n            if (\n                !tv.list[indexToPlay].censored\n                && tv.list[indexToPlay].genre\n                && !tv.list[indexToPlay].censored\n            ) {\n                setChannel(indexToPlay);\n                channelList.focusIndex(indexToPlay);\n                app.lastIntent.show(app.lastIntent.receiver);\n            }\n        }\n    }\n\n    function processAndPlay ( number ) {\n        if ( app.loaded ) {\n            findAndPlay(number);\n        } else {\n            app.once('ready', function () {\n                findAndPlay(number);\n            });\n        }\n    }\n\n    // if we have some filters we should reset it first\n    if (\n        tv.config.favorite\n        || tv.config.byName\n        || tv.config.genre\n        || tv.config.search\n    ) {\n        resetFilters(false, false, function () {\n            processAndPlay(data.number);\n        });\n    } else {\n        processAndPlay(data.number);\n    }\n});\n\n// if livereload is happened we should clear provider's event handlers\nif ( DEVELOP ) {\n    window.addEventListener('unload', function () {\n        Object.keys(app.provider.events).forEach(function ( eventName ) {\n            app.provider.events[eventName] = [];\n        });\n        Object.keys(window.core.events).forEach(function ( eventName ) {\n            window.core.events[eventName] = [];\n        });\n    } );\n}\n\n\nfunction onExitAppHandler () {\n    if ( app.lastIntent ) {\n        app.lastIntent.emit('exit');\n    }\n\n    if ( app.intents.osdTv ) {\n        app.intents.osdTv.close();\n        app.intents.osdTv = null;\n    }\n\n    provider.removeListener('channels:delete', deleteChannelsCallback);\n    provider.removeListener('channels:add', addChannelsCallback);\n    provider.removeListener('channels:modified', updateChannelsCallback);\n    provider.removeListener('update', fullUpdateChannelsCallback);\n    provider.stopBackgroundCheck();\n    exitModal.hide();\n    if ( provider.destroy ) {\n        provider.destroy();\n    }\n}\n\n//-----------------------------------------------------------\nfunction makeItem ( icon, text ) {\n    return  [\n        {\n            className: icon\n        },\n        {\n            value: text\n        }\n    ];\n}\n\n\nfunction notifyError ( text, duration ) {\n    duration = duration || 3000;\n\n    core.notify({\n        title: text,\n        icon: 'alert',\n        type: 'warning',\n        timeout: duration\n    });\n}\n\nmodule.exports = page;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Do string substitution according to the given format.\n * http://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format\n *\n * @param {string} format string substitution format\n *\n * @return {string} result data\n */\nmodule.exports = function ( format ) {\n    var args = Array.prototype.slice.call(arguments, 1),\n        expr = /{(\\d+)}/g;\n\n    if ( DEVELOP ) {\n        if ( !format ) {\n            throw new Error(__filename + ': format string is empty');\n        }\n        if ( args.length === 0 ) {\n            throw new Error(__filename + ': no arguments');\n        }\n        if ( !expr.test(format) ) {\n            throw new Error(__filename + ': format string does not have substitutions: ' + format);\n        }\n    }\n\n    return format.replace(expr, function ( match, number ) {\n        return args[number] === undefined ? match : args[number];\n    });\n};\n","/**\n *\n * @author Aleynikov Boris <alynikov.boris@gmail.com>.\n */\n\n'use strict';\n\nvar utils = {},\n    months = [\n        gettext('January'),\n        gettext('February'),\n        gettext('March'),\n        gettext('April'),\n        gettext('May'),\n        gettext('June'),\n        gettext('July'),\n        gettext('August'),\n        gettext('September'),\n        gettext('October'),\n        gettext('November'),\n        gettext('December')\n    ];\n\nutils.getCurrentDate = function ( setDate ) {\n    var date = new Date(),\n        month, result;\n\n    if ( setDate ) {\n        date = new Date(setDate);\n    }\n\n    month = months[date.getMonth()];\n\n    if ( core.environment.language === 'en' ) {\n        result = month + ' ' + date.getDate();\n    } else {\n        result = date.getDate() + ' ' + month;\n    }\n\n    return result;\n};\n\nmodule.exports = utils;\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n\nif ( TARGET === 'android-stb' || TARGET === 'android-app' ) {\n    module.exports = {\n        record: 'theme-icon theme-icon-play',\n        play: 'theme-icon theme-icon-play',\n        favorite: 'theme-icon theme-icon-favorite',\n        favoriteActive: 'theme-icon theme-icon-favorite-active active',\n        tvGuide: 'theme-icon theme-icon-menu'\n    };\n} else {\n    module.exports = {\n        record: 'theme-icon theme-icon-rc-f1',\n        play: 'theme-icon theme-icon-rc-f2',\n        favorite: 'theme-icon theme-icon-rc-f3',\n        favoriteActive: 'theme-icon theme-icon-rc-f3',\n        tvGuide: 'theme-icon theme-icon-rc-f4'\n    };\n}\n","/**\n *\n * @author Aleynikov Boris <alynikov.boris@gmail.com>.\n */\n\n'use strict';\n\nvar $node = document.getElementById('titleWidget'),\n    title = {},\n    $number = document.getElementById('titleWidgetNumber'),\n    $title = document.getElementById('titleWidgetName'),\n    $favorite = document.getElementById('icon-favorite'),\n    $time = document.getElementById('titleWidgetTime'),\n    timer;\n\n\ntitle.set = function ( ch ) {\n    ch = ch || {};\n    $title.innerText  = ch.name || '';\n    $number.innerText = ch.number || '';\n    // $favorite.innerText = ch.favorite ? 'C' : ' ';\n    if ( ch.favorite ) {\n        $favorite.classList.remove('hidden');\n    } else {\n        $favorite.classList.add('hidden');\n    }\n\n    if ( ch.epg ) {\n        $title.innerText += '\\n' + ch.epg;\n    }\n};\n\nfunction doTime () {\n    var time = new Date();\n\n    $time.innerText = ( '0' + time.getHours()).slice(-2) + ':' + ( '0' + time.getMinutes()).slice(-2);\n}\n\ntitle.display = function ( config, time ) {\n    time = time || 5000;\n    if ( !title.visible ) {\n        title.show();\n    }\n    if ( config.background ) {\n        $node.classList.add('bg');\n    }\n    clearTimeout(timer);\n\n    timer = setTimeout(function () {\n        if ( config.background ) {\n            //$node.classList.remove('bg');\n            //title.hide();\n        }\n    }, time);\n};\n\ndoTime();\n\nsetInterval(doTime, 35000);\n\nmodule.exports = title;\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n\nvar Layout = require('mag-component-layout');\n\n\n/**\n * Render item function for tv channel list.\n *\n * @param {HTMLElement} $item - $item to render\n * @param {Object} config - config of new data\n */\nmodule.exports = function ( $item, config ) {\n    var layout,\n        currentNode,\n        currentData,\n        hardcodeDomValue,\n        index,\n        layoutConfig;\n\n    if ( $item.ready && true ) {\n        for ( index = 0; index < config.items.length; index++ ) {\n            currentData = config.items[index];\n            if ( typeof currentData.value === 'string' || currentData.value === undefined ) {\n                currentNode = $item.layout.$node.childNodes[index];\n                currentNode.innerText = currentData.value || '';\n                currentNode.className = currentData.className || '';\n            } else if ( currentData.htmlInstance ) {\n                currentNode = $item.layout.$node.childNodes[index];\n                $item.domLinks.$title.innerText = currentData.realValue.name;\n                $item.domLinks.$epg.innerText = currentData.realValue.epg || '';\n            }\n        }\n    } else {\n        // clear inner content\n        while ( $item.firstChild ) {\n            $item.removeChild($item.firstChild);\n        }\n\n        layoutConfig = {\n            focusable: false,\n            data: config.items\n        };\n\n        if ( config.className ) {\n            layoutConfig.className = config.className;\n        }\n\n        layout = new Layout(layoutConfig);\n\n        hardcodeDomValue = config.items[1].value;\n\n\n        // on init list save needed links\n        $item.domLinks = {\n            $title: hardcodeDomValue.firstChild,\n            $epg: hardcodeDomValue.firstChild.nextSibling\n        };\n\n        $item.appendChild(layout.$node);\n        $item.layout = layout;\n        layout.parent = this;\n        layout.$parentItem = $item;\n\n        // focus layoutList if click on layout\n        layout.addListener('click', function () {\n            /*eslint no-invalid-this:0*/\n            // add inner property to set that event comes from inner component\n            this.parent.emit('click:item', {$item: $item, inner: true});\n        });\n\n        if ( config.click ) {\n            this.handlers[$item.index] = config.click;\n        }\n        // item is rendered\n        $item.ready = true;\n    }\n    $item.value = config.value || {};\n};\n","'use strict';\n\nvar id            = 'pageScanOptions',\n    Page          = require('stb-component-page'),\n    app           = require('mag-app'),\n    page          = new Page({$node: document.getElementById(id)}),\n    PanelSet      = require('mag-component-panel-set'),\n    PanelExtended = require('mag-component-panel'),\n    LayoutList    = require('mag-component-layout-list'),\n    ModalMessage  = require('mag-component-modal'),\n    RadioList     = require('mag-component-radio-list'),\n    dom           = require('spa-dom'),\n    keys          = require('stb-keys'),\n    Scrollbar     = require('stb-component-scrollbar'),\n    Footer        = require('mag-component-footer'),\n    // Flicker       = require('spa-component-flicker'),\n    Button        = require('stb-component-button'),\n    modalScroll   = new Scrollbar(),\n\n    symbolRateRange = {\n        start: 870,\n        end: 7200,\n        fefaultState: 6875\n    },\n\n    frequencyRange = {\n        start: 50000,\n        end: 858000,\n        step: 500\n    },\n\n    scanConfig = {\n        manual: false,\n        more: false,\n        currentType: {},\n        symbolRate: 6850,\n        modulation: 0,\n        frequencyStart: 50000,\n        frequencyEnd: 858000,\n        frequency: 50000,\n        bandwidth: 8,\n        network: ''\n    },\n\n    scanType = {\n        name: 'scanType',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('Scanning type') + ':'\n            },\n            {\n                name: '$text',\n                className: 'text',\n                value: gettext('Auto')\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalScan.show();\n            page.modalScan.focus();\n        }\n    },\n\n    typeItemText,\n    typeItem = {\n        name: 'type',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('DVB type') + ':'\n            },\n            typeItemText = {\n                name: '$text',\n                className: 'text',\n                value: ''\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalTypes.show();\n            page.modalTypes.focus();\n        }\n    },\n\n    symbolRateText,\n    symbolRate = {\n        name: 'symbolRate',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('Symbol rate') + ':'\n            },\n            symbolRateText = {\n                name: '$text',\n                className: 'text',\n                value: '' + scanConfig.symbolRate\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalSymbolRate.show();\n            page.modalSymbolRate.focus();\n        }\n    },\n\n    modulationText,\n    modulation = {\n        name: 'modulation',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('Modulation') + ':'\n            },\n            modulationText = {\n                name: '$text',\n                className: 'text',\n                value: gettext('Auto')\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalModulation.show();\n            page.modalModulation.focus();\n        }\n    },\n\n    scanTypeManual = {\n        items: [\n            {\n                className: 'name theme-subhead-color',\n                value: gettext('Scanning type') + ':'\n            },\n            {\n                className: 'text',\n                value: gettext('Manual')\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalScan.show();\n            page.modalScan.focus();\n        }\n    },\n\n    frequencyStartText,\n    frequencyStart = {\n        name: 'frequencyStart',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('Start frequency (KHz)') + ':'\n            },\n            frequencyStartText = {\n                name: '$text',\n                className: 'text',\n                value: '' + scanConfig.frequencyStart\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalFrequencyStart.show();\n            page.modalFrequencyStart.focus();\n            page.footer.hide();\n        },\n        manualEdit: true,\n        configValue: 'frequencyStart'\n    },\n\n    frequencyEndText,\n    frequencyEnd = {\n        name: 'frequencyEnd',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('End frequency (KHz)') + ':'\n            },\n            frequencyEndText = {\n                name: '$text',\n                className: 'text',\n                value: '' + scanConfig.frequencyEnd\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalFrequencyEnd.show();\n            page.modalFrequencyEnd.focus();\n            page.footer.hide();\n        },\n        manualEdit: true,\n        configValue: 'frequencyEnd'\n    },\n\n    bandwidthText,\n    bandwidth = {\n        name: 'bandwidth',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('Bandwidth (MHz)') + ':'\n            },\n            bandwidthText = {\n                name: '$text',\n                className: 'text',\n                value: scanConfig.bandwidth + ''\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalBand.show();\n            page.modalBand.focus();\n        }\n    },\n\n    frequencyItemText,\n    frequencyItem = {\n        name: 'frequency',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('Frequency (KHz)') + ':'\n            },\n            frequencyItemText = {\n                name: '$text',\n                className: 'text',\n                value: '' + scanConfig.frequency\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            page.panelSet.blur();\n            page.modalFrequency.show();\n            page.modalFrequency.focus();\n            page.footer.hide();\n        },\n        manualEdit: true,\n        configValue: 'frequency'\n    },\n\n    networkID = {\n        name: 'networkID',\n        items: [\n            {\n                name: '$name',\n                className: 'name theme-subhead-color',\n                value: gettext('Network ID') + ':'\n            },\n            {\n                name: '$text',\n                className: 'text',\n                value: '' + scanConfig.network\n            }\n        ],\n        className: 'theme-item-more',\n        click: function () {\n            window.core.intent({\n                action: 'keyboard',\n                data: {\n                    value: scanConfig.network,\n                    title: gettext('Network ID'),\n                    mode: 'number'\n                },\n                events: {\n                    done: function ( event ) {\n                        if ( event.value ) {\n                            try {\n                                scanConfig.network = parseInt(event.value, 10);\n                            } catch ( error ) {\n                                event.stop = true;\n                                window.core.notify({\n                                    title: 'Network ID is not correct',\n                                    icon: 'alert',\n                                    type: 'warning',\n                                    timeout: 5000\n                                });\n                            }\n                        }\n                    }\n                }\n            }, function ( error ) {\n                console.log(error);\n            });\n\n        }\n    },\n\n    autoList = [scanType, typeItem, symbolRate, modulation],\n    manualList = [scanTypeManual, typeItem, frequencyStart, frequencyEnd, bandwidth],\n    manualMoreList = [scanTypeManual, typeItem, symbolRate, modulation, frequencyItem, networkID],\n\n    $channelsCountWrapper, $channelsCount,\n    listData, index, focusIndex,\n    typesList, middleList;\n\n\nfunction editManual () {\n    var activeItem =  middleList.$focusItem;\n\n    if ( DEVELOP ) {\n        window.activeItem = activeItem;\n    }\n    core.intent({\n        action: 'keyboard',\n        data: {\n            mode: 'number',\n            icon: null,\n            title: activeItem.links.$name.innerText,\n            value: activeItem.links.$text.innerText\n        },\n        events: {\n            done: function ( event ) {\n                var frequency;\n\n                try {\n                    frequency = parseInt(event.value, 10);\n                } catch ( error ) {\n                    core.notify({\n                        title: gettext('Value is incorrect'),\n                        icon: 'alert',\n                        type: 'error',\n                        timeout: 3000\n                    });\n                }\n\n                if ( frequency >= frequencyRange.start && frequency <= frequencyRange.end ) {\n                    activeItem.links.$text.innerText = frequency + '';\n                    scanConfig[activeItem.data.configValue] = frequency;\n                } else {\n                    core.notify({\n                        title: gettext('Value is incorrect'),\n                        icon: 'alert',\n                        type: 'error',\n                        timeout: 3000\n                    });\n                }\n            }\n        }\n    });\n}\n\n\n$channelsCountWrapper = dom.tag('div', {className: 'amountContainer'}, $channelsCount = dom.tag('div', {className: 'amount'}, '0'));\n\n\npage.modalScan = new ModalMessage({\n    visible: false,\n    title: gettext('Scanning types'),\n    events: {\n        show: function () {\n            this.focus();\n            page.footer.hide();\n        }\n    },\n    children: [\n        new RadioList({\n            focusIndex: 0,\n            size: 2,\n            cycle: true,\n            data: [\n                {\n                    state: true,\n                    title: gettext('Auto'),\n                    value: false\n                },\n                {\n                    state: false,\n                    title: gettext('Manual'),\n                    value: true\n                }\n            ],\n            events: {\n                'click:item': function () {\n                    page.modalScan.hide();\n                    page.middlePanel.focus();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalScan.hide();\n                        page.middlePanel.focus();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.manual = item.data.value;\n                    page.middlePanel.reset();\n                }\n            }\n        })\n    ]\n});\npage.add(page.modalScan);\n\n\npage.modalTypes = new ModalMessage({\n    visible: false,\n    title: gettext('DVB types'),\n    events: {\n        show: function () {\n            var list = app.provider.types.current,\n                selectedIndex = 0,\n                data = [],\n                typeIndex;\n\n            for ( typeIndex = 0; typeIndex < list.length; typeIndex++ ) {\n                data.push({\n                    state: list[typeIndex].type === scanConfig.currentType.type,\n                    title: list[typeIndex].name,\n                    value: list[typeIndex]\n                });\n                if ( list[typeIndex].type === scanConfig.currentType.type ) {\n                    selectedIndex = typeIndex;\n                }\n            }\n            typesList.init({data: data, size: data.length, focusIndex: selectedIndex});\n            this.focus();\n        },\n        hide: function () {\n            page.panelSet.focus();\n        }\n    },\n    children: [\n        typesList = new RadioList({\n            cycle: true,\n            scroll: modalScroll,\n            data: [],\n            events: {\n                'click:item': function () {\n                    page.modalTypes.hide();\n                    page.middlePanel.focus();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalTypes.hide();\n                        page.middlePanel.focus();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.currentType = item.data.value;\n                    middleList.links.type.links.$text.innerText = scanConfig.currentType.name;\n                    typeItemText.value = scanConfig.currentType.name;\n                }\n            }\n        }),\n        modalScroll\n    ]\n});\npage.add(page.modalTypes);\n\n\npage.footer = new Footer({\n    visible: true,\n    parent: page,\n    data: [\n        {\n            code: keys.f1,\n            title: gettext('Manual correction'),\n            action: editManual\n        },\n        {\n            code: keys.menu,\n            action: function () {\n                page.modalActions.show();\n            }\n        }\n    ]\n});\n\n\npage.modalActions = new ModalMessage({\n    visible: false,\n    title: gettext('actions'),\n    events: {\n        show: function () {\n            page.panelSet.blur();\n            this.focus();\n        },\n        hide: function () {\n            page.panelSet.focus();\n            if ( middleList.$focusItem.data.manualEdit ) {\n                page.footer.show();\n            }\n        }\n    },\n    children: [\n        new LayoutList({\n            cycle: true,\n            size: 1,\n            focusIndex: 0,\n            data: [\n                {\n                    items: [\n                        {className: 'theme-icon theme-icon-rc-f1', value: ''},\n                        {value: gettext('Manual correction')}\n                    ],\n                    click: function () {\n                        editManual();\n                        page.modalActions.hide();\n                    }\n                }\n            ],\n            events: {\n                keydown: function ( event ) {\n                    LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back || event.code === keys.menu ) {\n                        event.stop = true;\n                        page.modalActions.hide();\n                    }\n                }\n            }\n        })\n    ]\n});\npage.add(page.modalActions);\n\n\nlistData = [];\nfor ( index = symbolRateRange.start; index <= symbolRateRange.end; index++ ) {\n    listData.push(\n        {\n            state: index === symbolRateRange.fefaultState,\n            value: index,\n            title: index\n        }\n    );\n}\nfocusIndex = symbolRateRange.fefaultState - symbolRateRange.start;\npage.modalSymbolRate = new ModalMessage({\n    visible: false,\n    title: gettext('Symbol rate'),\n    children: [\n        new RadioList({\n            cycle: true,\n            size: 5,\n            data: listData,\n            scroll: modalScroll = new Scrollbar(),\n            focusIndex: focusIndex,\n            events: {\n                'click:item': function () {\n                    page.modalSymbolRate.hide();\n                    page.middlePanel.focus();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalSymbolRate.hide();\n                        page.middlePanel.focus();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.symbolRate = item.data.value;\n                    middleList.links.symbolRate.links.$text.innerText = scanConfig.symbolRate;\n                    symbolRateText.value = scanConfig.symbolRate + '';\n                }\n            }\n        }),\n        modalScroll\n    ]\n});\npage.add(page.modalSymbolRate);\n\n\npage.modalModulation = new ModalMessage({\n    visible: false,\n    title: gettext('Modulation'),\n    children: [\n        new RadioList({\n            cycle: true,\n            size: 5,\n            focusIndex: 0,\n            data: [\n                {\n                    state: true,\n                    value: 0,\n                    title: gettext('Auto')\n                },\n                {\n                    value: 1,\n                    title: '16 QAM'\n                },\n                {\n                    value: 2,\n                    title: '32 QAM'\n                },\n                {\n                    value: 3,\n                    title: '64 QAM'\n                },\n                {\n                    value: 4,\n                    title: '128 QAM'\n                },\n                {\n                    value: 5,\n                    title: '256 QAM'\n                }\n            ],\n            events: {\n                'click:item': function () {\n                    page.modalModulation.hide();\n                    page.middlePanel.focus();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalModulation.hide();\n                        page.middlePanel.focus();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.modulation = item.data.value;\n                    middleList.links.modulation.links.$text.innerText = item.data.title;\n                    modulationText.value = item.data.title;\n                }\n            }\n        })\n    ]\n});\npage.add(page.modalModulation);\n\n\npage.modalBand = new ModalMessage({\n    visible: false,\n    title: gettext('Modulation'),\n    children: [\n        new RadioList({\n            cycle: true,\n            size: 3,\n            focusIndex: 2,\n            data: [\n                {\n                    value: 6,\n                    title: '6'\n                },\n                {\n                    value: 7,\n                    title: '7'\n                },\n                {\n                    value: 8,\n                    title: '8',\n                    state: true\n                }\n            ],\n            events: {\n                'click:item': function () {\n                    page.modalBand.hide();\n                    page.middlePanel.focus();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalBand.hide();\n                        page.middlePanel.focus();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.bandwidth = item.data.value;\n                    middleList.links.bandwidth.links.$text.innerText = item.data.title;\n                    bandwidthText.value = item.data.title;\n                }\n            }\n        })\n    ]\n});\npage.add(page.modalBand);\n\n\nlistData = [];\nfor ( index = frequencyRange.start; index <= frequencyRange.end; index += frequencyRange.step ) {\n    listData.push({\n        state: index === scanConfig.frequencyStart,\n        value: index,\n        title: index\n    });\n}\nfocusIndex = (scanConfig.frequencyStart - frequencyRange.start) / frequencyRange.step;\n\npage.modalFrequencyStart = new ModalMessage({\n    visible: false,\n    title: gettext('Start frequency (KHz)'),\n    children: [\n        new RadioList({\n            cycle: true,\n            size: 5,\n            data: listData,\n            scroll: modalScroll = new Scrollbar(),\n            focusIndex: focusIndex,\n            events: {\n                'click:item': function () {\n                    page.footer.show();\n                    page.modalFrequencyStart.hide();\n                    page.middlePanel.focus();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalFrequencyStart.hide();\n                        page.middlePanel.focus();\n                        page.footer.show();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.frequencyStart = item.data.value;\n                    middleList.links.frequencyStart.links.$text.innerText = scanConfig.frequencyStart;\n                    frequencyStartText.value = scanConfig.frequencyStart + '';\n                }\n            }\n        }),\n        modalScroll\n    ]\n});\npage.add(page.modalFrequencyStart);\n\n\nlistData = [];\nfor ( index = frequencyRange.start; index <= frequencyRange.end; index += frequencyRange.step ) {\n    listData.push(\n        {\n            state: index === scanConfig.frequencyEnd,\n            value: index,\n            title: index\n        }\n    );\n}\nfocusIndex = (scanConfig.frequencyEnd - frequencyRange.start) / frequencyRange.step;\n\npage.modalFrequencyEnd = new ModalMessage({\n    visible: false,\n    title: gettext('End frequency (KHz)'),\n    children: [\n        new RadioList({\n            cycle: true,\n            size: 5,\n            data: listData,\n            scroll: modalScroll = new Scrollbar(),\n            focusIndex: focusIndex,\n            events: {\n                'click:item': function () {\n                    page.modalFrequencyEnd.hide();\n                    page.middlePanel.focus();\n                    page.footer.show();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalFrequencyEnd.hide();\n                        page.middlePanel.focus();\n                        page.footer.show();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.frequencyEnd = item.data.value;\n                    middleList.links.frequencyEnd.links.$text.innerText = scanConfig.frequencyEnd;\n                    frequencyEndText.value = scanConfig.frequencyEnd + '';\n                }\n            }\n        }),\n        modalScroll\n    ]\n});\npage.add(page.modalFrequencyEnd);\n\n\nlistData = [];\nfor ( index = frequencyRange.start; index <= frequencyRange.end; index += frequencyRange.step ) {\n    listData.push(\n        {\n            state: index === scanConfig.frequency,\n            value: index,\n            title: index\n        }\n    );\n}\nfocusIndex = (scanConfig.frequency - frequencyRange.start) / frequencyRange.step;\n\npage.modalFrequency = new ModalMessage({\n    visible: false,\n    title: gettext('Frequency (KHz)'),\n    children: [\n        new RadioList({\n            cycle: true,\n            size: 5,\n            data: listData,\n            scroll: modalScroll = new Scrollbar(),\n            focusIndex: focusIndex,\n            events: {\n                'click:item': function () {\n                    page.modalFrequency.hide();\n                    page.middlePanel.focus();\n                    page.footer.show();\n                },\n                keydown: function ( event ) {\n                    RadioList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back ) {\n                        event.stop = true;\n                        page.modalFrequency.hide();\n                        page.middlePanel.focus();\n                        page.footer.show();\n                    }\n                },\n                select: function ( item ) {\n                    scanConfig.frequency = item.data.value;\n                    middleList.links.frequency.links.$text.innerText = scanConfig.frequency;\n                    frequencyItemText.value = scanConfig.frequency + '';\n                }\n            }\n        }),\n        modalScroll\n    ]\n});\npage.add(page.modalFrequency);\n\n\n// middle panel (list)\npage.middlePanel = new PanelExtended({\n    title: [{value: gettext('Scan DVB channels'), className: 'name'}, $channelsCountWrapper],\n    main: true,\n    children: [],\n    className: 'middlePanel'\n});\n\n\npage.middlePanel.scroll = new Scrollbar();\n\npage.middlePanel.add(middleList = new LayoutList({\n    cycle: true,\n    focusIndex: 0,\n    size: 6,\n    className: 'padded',\n    scroll: page.middlePanel.scroll,\n    events: {\n        overflow: function () {\n            middleList.$focusItem.classList.remove('focus');\n            page.middlePanel.scroll.hide();\n            page.middlePanel.button.focus();\n        },\n        keydown: function ( event ) {\n            LayoutList.prototype.defaultEvents.keydown.call(this, event);\n        },\n        'focus:item': function ( data ) {\n            if ( data.$curr.data.manualEdit ) {\n                page.footer.show();\n            } else {\n                page.footer.hide();\n            }\n        }\n    },\n    data: []\n}), page.middlePanel.scroll);\n\n\nif ( DEVELOP ) {\n    window.config = scanConfig;\n    window.middleList = middleList;\n    window.autoList = autoList;\n}\n\n\npage.middlePanel.add(page.middlePanel.button = new Button({\n    value: gettext('Start'),\n    className: 'bottom theme-footer',\n    $node: page.middlePanel.$node.appendChild(document.createElement('div')),\n    events: {\n        click: function () {\n            app.route(app.pages.scanning, scanConfig);\n        },\n        keydown: function ( event ) {\n            if ( event.code === keys.up ) {\n                middleList.focus();\n                page.middlePanel.scroll.show();\n                // restore taken focus class\n                middleList.$focusItem.classList.add('focus');\n                middleList.focusIndex(middleList.data.length - 1);\n            } else if ( event.code === keys.down ) {\n                middleList.focus();\n                page.middlePanel.scroll.show();\n                // restore taken focus class\n                middleList.$focusItem.classList.add('focus');\n                middleList.focusIndex(0);\n            } else if ( event.code === keys.ok ) {\n                if ( page.middlePanel.button.events['click'] ) {\n                    page.middlePanel.button.emit('click', {event: event});\n                }\n            }\n        }\n    }\n}));\n\n// panel set: main\npage.panelSet = new PanelSet({\n    visible: true,\n    $node: document.getElementById('panelSetInfo'),\n    focusIndex: 0,\n    panels: [page.middlePanel]\n});\npage.add(page.panelSet);\n\n\npage.middlePanel.reset = function () {\n    var data = [],\n        typeIndex,\n        type = app.provider.types.current;\n\n    scanConfig.more = app.provider.scanOptions.more;\n    for ( typeIndex = 0; typeIndex < type.length; typeIndex++ ) {\n        if ( type[typeIndex].type === scanConfig.currentType.type ) {\n            scanConfig.currentType = type[typeIndex];\n            break;\n        }\n    }\n    if ( !scanConfig.currentType.type ) {\n        scanConfig.currentType = type[0];\n    }\n\n    typeItemText.value = scanConfig.currentType.name;\n\n    if ( scanConfig.manual ) {\n        if ( scanConfig.more ) {\n            data = manualMoreList;\n        } else {\n            data = manualList;\n        }\n    } else if ( scanConfig.more ) {\n        data = autoList;\n    } else {\n        data = autoList.slice(0, 2);\n    }\n\n    $channelsCount.innerText = data.length;\n    middleList.setData({data: data, focusIndex: 0});\n};\n\npage.addListener('keydown', function ( event ) {\n    switch ( event.code ) {\n        case keys.back:\n            app.route(app.pages.main);\n            event.stop = true;\n            break;\n    }\n});\n\n\npage.addListener('show', function () {\n    page.middlePanel.reset();\n    page.panelSet.show();\n    page.panelSet.focus();\n});\n\n\n// public\nmodule.exports = page;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n// public\nmodule.exports = require('spa-component-button');\n\n// correct component name\nmodule.exports.prototype.name = 'stb-component-button';\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('spa-component'),\n    keys      = require('spa-keys');\n\n\n/**\n * Base button implementation.\n *\n * Has global options:\n *     Button.prototype.clickDuration - time to apply \"click\" class, does not apply if 0\n *\n * @constructor\n * @extends Component\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {string} [config.value] button caption text (generated if not set)\n * @param {string} [config.icon] button icon name\n *\n * @example\n * var Button = require('stb/ui/button'),\n *     btnSimple, btnIcon, btnDetached;\n *\n * btnSimple = new Button({\n *     $node: document.getElementById('btnSimple'),\n *     value: 'Simple button'\n * });\n *\n * btnIcon = new Button({\n *     $node: document.getElementById('btnIcon'),\n *     icon: 'menu'\n *     value: 'Button with icon'\n * });\n *\n * btnDetached = new Button({\n *     value: 'Button not added to the page',\n *     className: 'wide'\n * });\n */\nfunction Button ( config ) {\n    // current execution context\n    //var self = this;\n\n    // sanitize\n    config = config || {};\n\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n        if ( config.icon && typeof config.icon !== 'string' ) {\n            throw new Error(__filename + ': wrong or empty config.icon');\n        }\n        if ( config.value && typeof config.value !== 'string' ) {\n            throw new Error(__filename + ': wrong or empty config.value');\n        }\n    }\n\n    //config.name = 'spa-component-button' + (config.className || '');\n\n    // set default className if classList property empty or undefined\n    //config.className = this.name + ' ' + (config.className || '');\n\n    // parent constructor call\n    Component.call(this, config);\n\n    // optional dom\n    if ( config.icon ) {\n        // insert icon\n        this.$icon = this.$body.appendChild(document.createElement('div'));\n        this.$icon.className = 'icon ' + config.icon;\n    }\n\n    // insert caption placeholder\n    this.$text = this.$body.appendChild(document.createElement('div'));\n    this.$text.classList.add('text');\n\n    if ( config.value ) {\n        // fill it\n        this.$text.innerText = config.value;\n    }\n}\n\n\n// inheritance\nButton.prototype = Object.create(Component.prototype);\nButton.prototype.constructor = Button;\n\n// set component name\nButton.prototype.name = 'spa-component-button';\n\n\n// time to apply \"click\" class, does not apply if 0\nButton.prototype.clickDuration = 200;\n\n\n/**\n * List of all default event callbacks.\n *\n * @type {Object.<string, function>}\n */\nButton.prototype.defaultEvents = {\n    /**\n     * Default method to handle mouse click events.\n     */\n    click: function () {\n        // current execution context\n        var self = this;\n\n        this.$node.classList.add('click');\n\n        setTimeout(function () {\n            self.$node.classList.remove('click');\n        }, this.clickDuration);\n    },\n\n    /**\n     * Default method to handle keyboard keydown events.\n     *\n     * @param {Object} event generated event\n     */\n    keydown: function ( event ) {\n        if ( event.code === keys.enter ) {\n            // emulate click\n            // there are some listeners\n            if ( this.events['click'] ) {\n                /**\n                 * Mouse click event emulation.\n                 *\n                 * @event module:stb/ui/button~Button#click\n                 *\n                 * @type {Object}\n                 * @property {Event} event click event data\n                 */\n                this.emit('click', {event: event});\n            }\n        }\n    }\n};\n\n\n// public\nmodule.exports = Button;\n","'use strict';\n\nvar id           = 'pageScanning',\n    Page         = require('stb-component-page'),\n    app          = require('mag-app'),\n    LayoutList   = require('mag-component-layout-list'),\n    ModalMessage = require('mag-component-modal'),\n    Progress     = require('spa-component-progress-bar'),\n    keys         = require('stb-keys'),\n    Footer       = require('mag-component-footer'),\n\n    page         = new Page({\n        $node: document.getElementById(id),\n        className: 'theme-page-background'\n    }),\n\n    $frequency = document.getElementById('scanningFrequency'),\n    findCount = 0,\n    $count = document.getElementById('scanningCount'),\n    $channel = document.getElementById('scanningChannel'),\n    scanning = false;\n\n\nfunction stopScanning () {\n    app.provider.stopScan();\n    app.route(app.pages.scanOptions);\n}\n\n\nfunction onProgress ( info ) {\n    page.progress.set(info.progress);\n    page.progress.$percents.innerText = info.progress + '%';\n    $frequency.innerText = info.frequency;\n}\n\n\nfunction onFound ( info ) {\n    findCount++;\n    $count.innerText = findCount;\n    $channel.innerText = info.name;\n}\n\n\nfunction onEnd () {\n    page.progress.set(100);\n    page.progress.$percents.innerText = '100%';\n    scanning = false;\n    app.route(app.pages.main);\n}\n\n\ndocument.getElementById('scanningFrequencyTitle').innerText = gettext('Frequency');\ndocument.getElementById('scanningCountTitle').innerText = gettext('Found in total');\ndocument.getElementById('scanningChannelTitle').innerText = gettext('Last found');\ndocument.getElementById('scanningTitle').innerText = gettext('Finding DVB channels');\n\n\npage.footer = new Footer({\n    visible: true,\n    parent: page,\n    data: [\n        {\n            code: keys.f1,\n            title: gettext('Stop scanning'),\n            action: stopScanning\n        },\n        {\n            code: keys.menu,\n            action: function () {\n                page.modalActions.show();\n            }\n        }\n    ]\n});\n\n\npage.progress = new Progress({\n    $node: document.getElementById('scanningProgress'),\n    value: 0,\n    className: 'theme-progressbar'\n});\npage.progress.$percents = document.getElementById('scanningProgressValue');\n\n\npage.modalActions = new ModalMessage({\n    visible: false,\n    title: gettext('actions'),\n    events: {\n        show: function () {\n            this.focus();\n        }\n    },\n    children: [\n        new LayoutList({\n            cycle: true,\n            size: 1,\n            focusIndex: 0,\n            data: [\n                {\n                    items: [\n                        {className: 'theme-icon theme-icon-rc-f1', value: ''},\n                        {value: gettext('Stop scanning')}\n                    ],\n                    click: function () {\n                        stopScanning();\n                        page.modalActions.hide();\n                    }\n                }\n            ],\n            events: {\n                keydown: function ( event ) {\n                    LayoutList.prototype.defaultEvents.keydown.call(this, event);\n                    if ( event.code === keys.back || event.code === keys.menu ) {\n                        event.stop = true;\n                        page.modalActions.hide();\n                    }\n                }\n            }\n        })\n    ]\n});\npage.add(page.modalActions);\n\n\npage.addListener('keydown', function ( event ) {\n    switch ( event.code ) {\n        case keys.back:\n            event.stop = true;\n            if ( scanning ) {\n                core.notify({\n                    // grammar mistake: wont -> want. Fix grammar with\n                    title: gettext('Do you want to stop scanning?'),\n                    // translation keys in po files\n                    icon: 'info',\n                    type: '',\n                    buttons: [\n                        {\n                            value: gettext('Cancel'),\n                            click: function () { /* do nothing*/ }\n                        },\n                        {\n                            value: gettext('Stop'),\n                            click: stopScanning\n                        }\n                    ]\n                });\n            } else {\n                app.route(app.pages.scanOptions);\n            }\n            break;\n    }\n});\n\n\npage.addListener('show', function ( data ) {\n    var config = data.data;\n\n    page.config = {\n        type: config.currentType.type,\n        callbacks: {\n            onProgress: onProgress,\n            onFound: onFound,\n            onEnd: onEnd\n        }\n    };\n    scanning = true;\n    if ( app.lastIntent ) {\n        app.lastIntent.emit('playback:stop');\n    }\n    findCount = 0;\n    $count.innerText = '0';\n    $channel.innerText = '';\n    $frequency.innerText = '';\n    if ( config.manual ) {\n        if ( config.more ) {\n            page.config.netId = config.network;\n            page.config.frequency = config.frequency;\n            page.config.modulation = config.modulation;\n            page.config.symRate = config.symbolRate;\n        } else {\n            page.config.frequency = config.frequencyStart;\n            page.config.frequencyEnd = config.frequencyEnd;\n            page.config.band = config.band;\n        }\n        app.provider.startManualScan(page.config);\n    } else {\n        if ( config.more ) {\n            page.config.symRate = config.symbolRate;\n            page.config.modulation = config.modulation;\n        }\n        app.provider.startAutoScan(page.config);\n    }\n});\n\n\n// public\nmodule.exports = page;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('spa-component');\n\n\n/**\n * Base progress bar implementation.\n *\n * @constructor\n * @extends Component\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n * @param {number} [config.value=0] initial value\n * @param {number} [config.max=100] max progress value\n * @param {number} [config.min=0] min progress value\n */\nfunction ProgressBar ( config ) {\n    // sanitize\n    config = config || {};\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n    }\n\n    /**\n     * Max progress value.\n     *\n     * @type {number}\n     */\n    this.max = 100;\n\n    /**\n     * Min progress value.\n     *\n     * @type {number}\n     */\n    this.min = 0;\n\n    /**\n     * Initial progress position.\n     *\n     * @type {number}\n     */\n    this.value = 0;\n\n    /**\n     * Value of the one percent step\n     *\n     * @type {number}\n     */\n    this.step = 1;\n\n    // can't accept focus\n    config.focusable = config.focusable || false;\n\n    // set default className if classList property empty or undefined\n    //config.className = 'progressBar ' + (config.className || '');\n\n    // parent constructor call\n    Component.call(this, config);\n\n    // insert bar line\n    this.$value = this.$body.appendChild(document.createElement('div'));\n\n    // correct CSS class name\n    this.$value.className = 'value';\n\n    // component setup\n    this.init(config);\n}\n\n\n// inheritance\nProgressBar.prototype = Object.create(Component.prototype);\nProgressBar.prototype.constructor = ProgressBar;\n\n// set component name\nProgressBar.prototype.name = 'spa-component-progress-bar';\n\n\n/**\n * Set position of the given value.\n * Does nothing in case when progress is end and passed value is more than max value.\n *\n * @param {number} value new value to set\n * @return {boolean} operation result\n *\n * @fires module:stb/ui/progress.bar~ProgressBar#done\n * @fires module:stb/ui/progress.bar~ProgressBar#change\n */\nProgressBar.prototype.set = function ( value ) {\n    var prevValue = this.value;\n\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( Number(value) !== value ) {\n            throw new Error(__filename + ': value must be a number');\n        }\n    }\n\n    // value changed but in the given range\n    if ( this.value !== value && value <= this.max && value >= this.min ) {\n        // set new value\n        this.value = value;\n\n        // get value in percents\n        value = Math.abs(this.value - this.min) / this.step;\n\n        if ( value === 100 ) {\n            // there are some listeners\n            if ( this.events['done'] ) {\n                /**\n                 * Set progress to its maximum value.\n                 *\n                 * @event module:stb/ui/progress.bar~ProgressBar#done\n                 */\n                this.emit('done');\n            }\n        }\n\n        // set progress bar width\n        this.$value.style.width = value + '%';\n\n        // there are some listeners\n        if ( this.events['change'] ) {\n            /**\n             * Update progress value.\n             *\n             * @event module:stb/ui/progress.bar~ProgressBar#change\n             *\n             * @type {Object}\n             * @property {number} prev old/previous progress value\n             * @property {number} curr new/current progress value\n             */\n            this.emit('change', {curr: this.value, prev: prevValue});\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Init or re-init current max or/and min or/and value.\n *\n * @param {Object} config init parameters (subset of constructor config params)\n */\nProgressBar.prototype.init = function ( config ) {\n    if ( DEVELOP ) {\n        if ( arguments.length !== 1 ) {\n            throw new Error(__filename + ': wrong arguments number');\n        }\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n    }\n\n    // set max progress value\n    if ( config.max !== undefined ) {\n        if ( DEVELOP ) {\n            if ( Number(config.max) !== config.max ) {\n                throw new Error(__filename + ': config.max value must be a number');\n            }\n        }\n\n        // apply\n        this.max = config.max;\n    }\n\n    // set min progress value\n    if ( config.min !== undefined ) {\n        if ( DEVELOP ) {\n            if ( Number(config.min) !== config.min ) {\n                throw new Error(__filename + ': config.min value must be a number');\n            }\n        }\n\n        // apply\n        this.min = config.min;\n    }\n\n    if ( DEVELOP ) {\n        if ( this.min >= this.max ) {\n            throw new Error(__filename + ': this.min value must be less than this.max');\n        }\n    }\n\n    // set actual progress value\n    if ( config.value !== undefined ) {\n        if ( DEVELOP ) {\n            if ( Number(config.value) !== config.value ) {\n                throw new Error(__filename + ': config.value must be a number');\n            }\n            if ( config.value > this.max ) {\n                throw new Error(__filename + ': config.value more than config.maximum');\n            }\n            if ( config.value < this.min ) {\n                throw new Error(__filename + ': config.value less than config.minimum');\n            }\n        }\n\n        // apply\n        this.value = config.value;\n    }\n\n    this.step = Math.abs(this.max - this.min) / 100;\n\n    // init bar size, (this.min - this.value) - calculate distance from start\n    this.$value.style.width = (Math.abs(this.min - this.value) / this.step) + '%';\n};\n\n\n// public\nmodule.exports = ProgressBar;\n"],"sourceRoot":""}