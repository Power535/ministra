{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/spa-app/lib/core.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./node_modules/stb-app/lib/css.js","webpack:///./src/js/main.js","webpack:///./node_modules/mag-app/index.js","webpack:///./node_modules/mag-app/lib/main.js","webpack:///./node_modules/cjs-query/index.js","webpack:///./src/js/config.js","webpack:///./node_modules/spa-app/lib/events.js","webpack:///./node_modules/stb-shim-classlist/index.js","webpack:///./node_modules/stb-app/lib/metrics.js","webpack:///./src/js/metrics.js","webpack:///./node_modules/mag-app/lib/css.js","webpack:///./node_modules/spa-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/pages/main.js","webpack:///./node_modules/stb-component-page/index.js","webpack:///./node_modules/spa-component-page/index.js","webpack:///./node_modules/spa-component/index.js","webpack:///./src/js/modules/access.control.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","parse","app","query","document","location","search","substring","config","activePage","route","pageTo","data","page","pageFrom","active","id","$node","classList","remove","events","emit","add","showPage","this","from","to","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","index","event","Array","slice","constructor","link","createElement","rel","href","metrics","height","head","appendChild","gettext","pages","main","load","core","environment","language","parent","extendCorePrototype","window","getCoreInstance","platform","ready","exit","body","setAttribute","type","contextmenu","preventDefault","keys","forEach","addEventListener","split","part","decodeURIComponent","stringify","params","encodeURIComponent","join","DOMContentLoaded","unload","error","keydown","activeComponent","eventLocal","code","keyCode","stop","ctrlKey","altKey","shiftKey","propagate","keypress","mousewheel","documentElement","indexOf","splice","DOMTokenList","el","_element","className","_classCache","classes","replace","token","contains","item","toString","toggle","Element","screenHeight","screen","availHeight","availTop","availBottom","availWidth","width","availLeft","availRight","480","576","720","1080","linkCSS","theme","path","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","JSON","responseText","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval","getElementById","Component","Page","parentNode","counter","visible","focusable","$body","children","hide","defaultEvents","eventName","focus","stopPropagation","child","blur","removeChild","activeItem","show","setTimeout","instance","privateSettings","password","sessionTime","storageKey","isAllowedAccess","notification","keyboardIntent","intent","action","title","done","createDefaultSettings","backend","request","method","isEqual","settings","close","description","notify","icon","timeout","state","STATE_NOT_RESOLVED","update","updateRequired","isActive","Number","oldPassword","passwordUpdateRequired","session","userId","headers","Content-Type","async","storage","setItem","updatePassword","result","accessControl","updateResult","defineProperties","parent_password","response","exceptionError","getItem","parseInt"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    parse   = require('cjs-query').parse,\n    app     = new Emitter();\n\n\n/**\n * Make the given inactive/hidden page active/visible.\n * Pass some data to the page and trigger the corresponding event.\n *\n * @param {Page} page item to show\n * @param {*} [data] data to send to page\n *\n * @return {boolean} operation status\n */\nfunction showPage ( page, data ) {\n    // page available and can be hidden\n    if ( page && !page.active ) {\n        // apply visibility\n        page.$node.classList.add('active');\n        page.active = true;\n        app.activePage = page;\n\n        debug.info('show component ' + page.name + '#' + page.id, null, {\n            tags: ['show', 'component', page.name, page.id]\n        });\n        //console.log('component ' + page.name + '.' + page.id + ' show', 'green');\n\n        // there are some listeners\n        if ( page.events['show'] ) {\n            // notify listeners\n            page.emit('show', {data: data});\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n}\n\n\n/**\n * Make the given active/visible page inactive/hidden and trigger the corresponding event.\n *\n * @param {Page} page item to hide\n *\n * @return {boolean} operation status\n */\nfunction hidePage ( page ) {\n    // page available and can be hidden\n    if ( page && page.active ) {\n        // apply visibility\n        page.$node.classList.remove('active');\n        page.active  = false;\n        app.activePage = null;\n\n        debug.info('hide component ' + page.name + '#' + page.id, null, {\n            tags: ['hide', 'component', page.name, page.id]\n        });\n        //console.log('component ' + page.name + '.' + page.id + ' hide', 'grey');\n\n        // there are some listeners\n        if ( page.events['hide'] ) {\n            // notify listeners\n            page.emit('hide');\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n}\n\n\n// url request params\napp.query = parse(document.location.search.substring(1));\n\n\n// global application configuration\n// in config.js file in js root\napp.config = require('app:config');\n\n\n// the only visible page\napp.activePage = null;\n\n\n/**\n * Browse to a given page.\n * Do nothing if the link is invalid. Otherwise hide the current, show new and update the \"previous\" link.\n *\n * @param {Page} pageTo instance of the page to show\n * @param {*} [data] options to pass to the page on show\n *\n * @return {boolean} operation status\n */\napp.route = function ( pageTo, data ) {\n    var pageFrom = app.activePage;\n\n    if ( DEVELOP ) {\n        //if ( router.pages.length > 0 ) {\n        if ( !pageTo || typeof pageTo !== 'object' ) {\n            throw new Error(__filename + ': wrong pageTo type');\n        }\n        if ( !('active' in pageTo) ) {\n            throw new Error(__filename + ': missing field \"active\" in pageTo');\n        }\n        //}\n    }\n\n    // valid not already active page\n    if ( pageTo && !pageTo.active ) {\n        //debug.log('router.navigate: ' + pageTo.id, pageTo === pageFrom ? 'grey' : 'green');\n        debug.info('app route: ' + pageTo.name + '#' + pageTo.id, null, {tags: ['route', pageTo.name, pageTo.id]});\n\n        // update url\n        //location.hash = this.stringify(name, data);\n\n        // apply visibility\n        hidePage(app.activePage);\n        showPage(pageTo, data);\n\n        // there are some listeners\n        if ( this.events['route'] ) {\n            // notify listeners\n            this.emit('route', {from: pageFrom, to: pageTo});\n        }\n\n        // store\n        //this.history.push(pageTo);\n\n        return true;\n    }\n\n    //debug.warn('invalid page to route: ' + pageTo.id, null, {tags: ['route', 'page', pageTo.id]});\n    console.warn('invalid page to route: ' + pageTo.id);\n\n    // nothing was done\n    return false;\n};\n\n\n// public\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('spa-app/lib/core');\n//    metrics = require('app:metrics'),\n//    linkCSS;\n\n\n// global link\n//app.metrics = metrics[app.query.screenHeight] || metrics[screen.height] || metrics[720];\n\n// calculate and extend\n//app.metrics.availHeight = app.metrics.height - (app.metrics.availTop  + app.metrics.availBottom);\n//app.metrics.availWidth  = app.metrics.width  - (app.metrics.availLeft + app.metrics.availRight);\n\n// // set max browser window size\n// window.moveTo(0, 0);\n// window.resizeTo(metrics.width, metrics.height);\n\n// load CSS file base on resolution\n/*linkCSS = document.createElement('link');\nlinkCSS.rel  = 'stylesheet';\nlinkCSS.href = 'css/' + (DEVELOP ? 'develop.' : 'release.') + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\ndocument.head.appendChild(linkCSS);*/\n\n\n// public\nmodule.exports = function ( name ) {\n    var link = document.createElement('link');\n\n    link.rel  = 'stylesheet';\n    link.href = 'css/' + name + '.' + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\n    document.head.appendChild(link);\n};\n","/**\n * Main application entry point.\n *\n * @author Stanislav Kalashnik <sk@infomir.eu>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\nvar app     = require('mag-app'),\n    gettext = require('spa-gettext');\n\n\n// main application events\napp.once('load', function load () {\n    app.pages = {\n        main: require('./pages/main')\n    };\n\n    gettext.load({name: core.environment.language}, function () {\n        parent.extendCorePrototype('accessControl', require('./modules/access.control'));\n\n        app.route(app.pages.main);\n    });\n});\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nvar app = require('./lib/main');\n\n\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app    = require('spa-app/lib/core'),\n    events = require('spa-app/lib/events');\n\n\n// get instance\nwindow.core = window.parent.getCoreInstance(window, app);\n\n// shims\nrequire('stb-shim-classlist');\n\n// apply geometry\nrequire('stb-app/lib/metrics');\n\n// load sdk css\nrequire('stb-app/lib/css')('sdk');\n\n// load theme css\nrequire('./css');\n\n// load app css\nrequire('stb-app/lib/css')('app');\n\n/**\n * Specify platform name\n *\n * @type {string}\n */\napp.platform = 'mag';\n\n/**\n * Show app.\n */\napp.ready = function () {\n    // if ( this.events['show'] ) {\n    //     this.emit('show');\n    // }\n    window.core.call('app:ready');\n};\n\n\n/**\n * Exit from app.\n * Destroy all application instance.\n * If callback function provided, and callback returns boolean 'true', application will stay alive.\n *\n * @fires module:/stb/app#exit\n */\napp.exit = function () {\n    if ( app.events['exit'] ) {\n        app.emit('exit');\n    }\n\n    core.call('exit');\n};\n\n\nevents.load = function ( event ) {\n    //window.core = window.parent.getCoreInstanse(window, app);\n    document.body.setAttribute('platform', app.platform);\n\n    if ( core.ready ) {\n        if ( app.events['load'] ) {\n            // notify listeners\n            app.emit('load', {});\n        }\n    } else {\n        core.once('load', function () {\n            //core.ready = true;\n            if ( app.events[event.type] ) {\n                // notify listeners\n                app.emit(event.type, event);\n            }\n        });\n    }\n};\n\n\n// activate development mechanisms and tools\nif ( DEVELOP ) {\n    //require('stb-develop');\n    require('./develop/main');\n} else {\n    // disable context menu\n    events.contextmenu = function ( event ) {\n        event.preventDefault();\n    };\n}\n\n\n//apply DOM events\nObject.keys(events).forEach(function ( name ) {\n    window.addEventListener(name, events[name]);\n});\n\n\n// new way of string handling\n// all strings are in UTF-16\n// since stbapp 2.18\n// if ( window.gSTB && gSTB.SetNativeStringMode ) {\n//     /* eslint new-cap: 0 */\n//     gSTB.SetNativeStringMode(true);\n// }\n\n// public\nmodule.exports = app;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\nmodule.exports = {\n    /**\n     * Parse the given location search string into object.\n     *\n     * @param {string} query string to parse\n     *\n     * @return {Object.<string, string>} result data\n     */\n    parse: function ( query ) {\n        var data = {};\n\n        // parse and fill the data\n        query.split('&').forEach(function ( part ) {\n            part = part.split('=');\n            // valid number on params\n            if ( part.length === 2 ) {\n                data[part[0]] = decodeURIComponent(part[1]);\n            }\n        });\n\n        return data;\n    },\n\n\n    /**\n     * Make uri query part in a string form.\n     *\n     * @param {Object} params data to stringify\n     *\n     * @return {string} query string\n     */\n    stringify: function ( params ) {\n        var data = [];\n\n        Object.keys(params).forEach(function ( name ) {\n            data.push(name + '=' + encodeURIComponent(params[name]));\n        });\n\n        return data.join('&');\n    }\n};\n","/**\n * Global application configuration.\n * Can store run-time options, API urls, paths, execution flags and so on.\n * Automatically loaded on application initialization and available as app.config.\n */\n\n'use strict';\n\n// public\nmodule.exports = {};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('./core');\n\n\n// public\nmodule.exports = {\n    DOMContentLoaded: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // there are some listeners\n        if ( app.events['dom'] ) {\n            // notify listeners\n            app.emit('dom', event);\n            //console.log('DOMContentLoaded');\n        }\n    },\n\n    /**\n     * The load event is fired when a resource and its dependent resources have finished loading.\n     *\n     * Control flow:\n     *   1. Global handler.\n     *   2. Each page handler.\n     *   3. Application DONE event.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/load\n     *\n     * @param {Event} event generated object with event data\n     */\n    load: function ( event ) {\n        //var path;\n\n        //debug.event(event);\n        //console.log(event);\n\n        // time mark\n        //app.data.time.load = event.timeStamp;\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // global handler\n        // there are some listeners\n        if ( app.events[event.type] ) {\n            // notify listeners\n            app.emit(event.type, event);\n        }\n\n        // local handler on each page\n        /*router.pages.forEach(function forEachPages ( page ) {\n         debug.log('component ' + page.constructor.name + '.' + page.id + ' load', 'green');\n\n         // there are some listeners\n         if ( page.events[event.type] ) {\n         // notify listeners\n         page.emit(event.type, event);\n         }\n         });*/\n\n        // time mark\n        //app.data.time.done = +new Date();\n\n        // everything is ready\n        // and there are some listeners\n        // if ( app.events['done'] ) {\n        //     // notify listeners\n        //     app.emit('done', event);\n        // }\n    },\n\n    /**\n     * The unload event is fired when the document or a child resource is being unloaded.\n     *\n     * Control flow:\n     *   1. Each page handler.\n     *   2. Global handler.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/unload\n     *\n     * @param {Event} event generated object with event data\n     */\n    unload: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // global handler\n        // there are some listeners\n        if ( app.events[event.type] ) {\n            // notify listeners\n            app.emit(event.type, event);\n        }\n\n        // local handler on each page\n        /*router.pages.forEach(function forEachPages ( page ) {\n         debug.log('component ' + page.constructor.name + '.' + page.id + ' unload', 'red');\n\n         // there are some listeners\n         if ( page.events[event.type] ) {\n         // notify listeners\n         page.emit(event.type, event);\n         }\n         });*/\n    },\n\n    /**\n     * The error event is fired when a resource failed to load.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/error\n     *\n     * @param {Event} event generated object with event data\n     */\n    error: function ( event ) {\n        //debug.event(event);\n        //console.log(event);\n        //debug.fail('app event: ' + event.message, event, {tags: [event.type, 'event']});\n        console.error('app event: ' + event.message, event);\n    },\n\n    /**\n     * The keydown event is fired when a key is pressed down.\n     * Set event.stop to true in order to prevent bubbling.\n     *\n     * Control flow:\n     *   1. Current active component on the active page.\n     *   2. Current active page itself.\n     *   3. Application.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/keydown\n     *\n     * @param {Event} event generated object with event data\n     */\n    keydown: function ( event ) {\n        var page = app.activePage,\n            eventLocal = {\n                code: event.keyCode,\n                stop: false\n            },\n            activeComponent;\n\n        if ( DEVELOP ) {\n            if ( !page ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        // filter phantoms\n        //if ( event.keyCode === 0 ) { return; }\n\n        // combined key code\n        //event.code = event.keyCode;\n\n        // apply key modifiers\n        if ( event.ctrlKey )  { eventLocal.code += 'c'; }\n        if ( event.altKey )   { eventLocal.code += 'a'; }\n        if ( event.shiftKey ) { eventLocal.code += 's'; }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type + ' - ' + eventLocal.code, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type + ' - ' + eventLocal.code, event);\n\n        // page.activeComponent can be set to null in event handles\n        activeComponent = page.activeComponent;\n\n        // current component handler\n        if ( activeComponent && activeComponent !== page ) {\n            // component is available and not page itself\n            if ( activeComponent.events[event.type] ) {\n                // there are some listeners\n                activeComponent.emit(event.type, eventLocal, event);\n            }\n\n            // todo: bubble event recursively\n            // bubbling\n            if (\n                !eventLocal.stop &&\n                activeComponent.propagate &&\n                activeComponent.parent &&\n                activeComponent.parent.events[event.type]\n            ) {\n                activeComponent.parent.emit(event.type, eventLocal, event);\n            }\n        }\n\n        // page handler\n        if ( !eventLocal.stop ) {\n            // not prevented\n            if ( page.events[event.type] ) {\n                // there are some listeners\n                page.emit(event.type, eventLocal, event);\n            }\n\n            // global app handler\n            if ( !event.stop ) {\n                // not prevented\n                if ( app.events[event.type] ) {\n                    // there are some listeners\n                    app.emit(event.type, eventLocal, event);\n                }\n            }\n        }\n\n        //// suppress non-printable keys in stb device (not in your browser)\n        //if ( app.data.host && keyCodes[event.code] ) {\n        //    event.preventDefault();\n        //}\n    },\n\n    /**\n     * The keypress event is fired when press a printable character.\n     * Delivers the event only to activeComponent at active page.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/keypress\n     *\n     * @param {Event} event generated object with event data\n     * @param {string} event.char entered character\n     */\n    keypress: function ( event ) {\n        var page = app.activePage;\n\n        if ( DEVELOP ) {\n            if ( page === null || page === undefined ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type + ' - ' + event.key, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type + ' - ' + event.key, event);\n\n        // current component handler\n        if ( page.activeComponent && page.activeComponent !== page ) {\n            // component is available and not page itself\n            if ( page.activeComponent.events[event.type] ) {\n                // there are some listeners\n                page.activeComponent.emit(event.type, event);\n            }\n        }\n    },\n\n    /**\n     * The click event is fired when a pointing device button (usually a mouse button) is pressed and released on a single element.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/click\n     *\n     * @param {Event} event generated object with event data\n     */\n    /*click: function ( event ) {\n     //debug.event(event);\n     //console.log(event);\n     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n     },*/\n\n    /**\n     * The contextmenu event is fired when the right button of the mouse is clicked (before the context menu is displayed),\n     * or when the context menu key is pressed (in which case the context menu is displayed at the bottom left of the focused\n     * element, unless the element is a tree, in which case the context menu is displayed at the bottom left of the current row).\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/contextmenu\n     *\n     * @param {Event} event generated object with event data\n     */\n    // contextmenu: function ( event ) {\n    //     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n    //\n    //     if ( !DEVELOP ) {\n    //         // disable right click in release mode\n    //         event.preventDefault();\n    //     }\n    // },\n\n    /*contextmenu: function ( event ) {\n     //var kbEvent = {}; //Object.create(document.createEvent('KeyboardEvent'));\n\n     //debug.event(event);\n     //console.log(event);\n     debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n\n     //kbEvent.type    = 'keydown';\n     //kbEvent.keyCode = 8;\n\n     //debug.log(kbEvent.type);\n\n     //globalEventListenerKeydown(kbEvent);\n     //var event = document.createEvent('KeyboardEvent');\n     //event.initEvent('keydown', true, true);\n\n     //document.dispatchEvent(kbEvent);\n\n     if ( !DEVELOP ) {\n     // disable right click in release mode\n     event.preventDefault();\n     }\n     },*/\n\n    /**\n     * The wheel event is fired when a wheel button of a pointing device (usually a mouse) is rotated.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Reference/Events/wheel\n     *\n     * @param {Event} event generated object with event data\n     */\n    mousewheel: function ( event ) {\n        var page = app.activePage;\n\n        if ( DEVELOP ) {\n            if ( page === null || page === undefined ) {\n                throw new Error(__filename + ': app should have at least one page');\n            }\n        }\n\n        //debug.event(event);\n        //console.log(event);\n        //debug.info('app event: ' + event.type, event, {tags: [event.type, 'event']});\n        console.log('app event: ' + event.type, event);\n\n        // current component handler\n        if ( page.activeComponent && page.activeComponent !== page ) {\n            // component is available and not page itself\n            if ( page.activeComponent.events[event.type] ) {\n                // there are some listeners\n                page.activeComponent.emit(event.type, event);\n            }\n        }\n\n        // page handler\n        if ( !event.stop ) {\n            // not prevented\n            if ( page.events[event.type] ) {\n                // there are some listeners\n                page.emit(event.type, event);\n            }\n        }\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint-disable */\n\n'use strict';\n\n\nif ( !document.documentElement.classList ) {\n    var prototype = Array.prototype,\n        indexOf   = prototype.indexOf,\n        slice     = prototype.slice,\n        push      = prototype.push,\n        splice    = prototype.splice,\n        join      = prototype.join;\n\n    window.DOMTokenList = function ( el ) {\n        this._element = el;\n        if (el.className !== this._classCache) {\n            this._classCache = el.className;\n            if (!this._classCache) { return; }\n            var classes = this._classCache.replace(/^\\s+|\\s+$/g,'').split(/\\s+/),\n                i;\n            for (i = 0; i < classes.length; i++) {\n                push.call(this, classes[i]);\n            }\n        }\n    };\n\n    window.DOMTokenList.prototype = {\n        add: function ( token ) {\n            if(this.contains(token)) { return; }\n            push.call(this, token);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        contains: function ( token ) {\n            return indexOf.call(this, token) !== -1;\n        },\n\n        item: function ( index ) {\n            return this[index] || null;\n        },\n\n        remove: function ( token ) {\n            var i = indexOf.call(this, token);\n            if (i === -1) {\n                return;\n            }\n            splice.call(this, i, 1);\n            this._element.className = slice.call(this, 0).join(' ');\n        },\n\n        toString: function () {\n            return join.call(this, ' ');\n        },\n\n        toggle: function ( token ) {\n            if (!this.contains(token)) {\n                this.add(token);\n            } else {\n                this.remove(token);\n            }\n            return this.contains(token);\n        }\n    };\n\n    Object.defineProperty(Element.prototype, 'classList', {\n        get: function () {\n            return new window.DOMTokenList(this);\n        }\n    });\n}\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app     = require('spa-app/lib/core'),\n    metrics = require('app:metrics');\n\n\n// global link\napp.metrics = metrics[app.query.screenHeight] || metrics[screen.height] || metrics[720];\n\n// calculate and extend\napp.metrics.availHeight = app.metrics.height - (app.metrics.availTop  + app.metrics.availBottom);\napp.metrics.availWidth  = app.metrics.width  - (app.metrics.availLeft + app.metrics.availRight);\n\n\n// public\n//module.exports = app;\n","/**\n * Application geometry options.\n * Automatically loaded on application initialization and available as app.metrics.\n */\n\n'use strict';\n\n// public\nmodule.exports = {\n    480: {\n        // screen base dimension\n        height: 480,\n        width:  720,\n        // safe zone margins\n        availTop:    24,\n        availBottom: 24,\n        availRight:  32,\n        availLeft:   48\n        // project-specific vars\n        // put here ...\n    },\n\n    576: {\n        // screen base dimension\n        height: 576,\n        width:  720,\n        // safe zone margins\n        availTop:    24,\n        availBottom: 24,\n        availRight:  26,\n        availLeft:   54\n        // project-specific vars\n        // put here ...\n    },\n\n    720: {\n        // screen base dimension\n        height: 720,\n        width:  1280,\n        // safe zone margins\n        availTop:    30,\n        availBottom: 30,\n        availRight:  40,\n        availLeft:   40\n        // project-specific vars\n        // put here ...\n    },\n\n    1080: {\n        // screen base dimension\n        height: 1080,\n        width:  1920,\n        // safe zone margins\n        availTop:    45,\n        availBottom: 45,\n        availRight:  60,\n        availLeft:   60\n        // project-specific vars\n        // put here ...\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app = require('spa-app/lib/core'),\n    //metrics = require('app:metrics'),\n    linkCSS;\n\n\n//window.core = window.parent.getCoreInstance(window, app);\n\n\nlinkCSS = document.createElement('link');\nlinkCSS.rel  = 'stylesheet';\nlinkCSS.href = window.core.theme.path + app.metrics.height + '.css' + (DEVELOP ? '?' + Date.now() : '');\ndocument.head.appendChild(linkCSS);\n\n\n// public\nmodule.exports = linkCSS;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n *\n * @return {Gettext} gettext instance\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    // make it global\n    window.gettext  = window._ = gettext.gettext;\n    window.pgettext = gettext.pgettext;\n    window.ngettext = gettext.ngettext;\n\n    return gettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n *\n * @return {boolean} flag is ajax request was made\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        callback(null);\n\n        return false;\n    }\n\n    // yes\n    xhr = new XMLHttpRequest();\n\n    xhr.onload = function () {\n        var json;\n\n        try {\n            json = JSON.parse(xhr.responseText);\n\n            prepare(json);\n            callback(null);\n\n            // there are some listeners\n            if ( loader.events['load'] ) {\n                // notify listeners\n                loader.emit('load');\n            }\n        } catch ( error ) {\n            xhr.onerror(error);\n        }\n    };\n\n    xhr.ontimeout = xhr.onerror = function ( error ) {\n        prepare();\n        callback(error);\n\n        // there are some listeners\n        if ( loader.events['error'] ) {\n            // notify listeners\n            loader.emit('error', error);\n        }\n    };\n\n    xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n    xhr.send(null);\n\n    return true;\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","/**\n * Main page implementation.\n *\n * @author Stanislav Kalashnik <sk@infomir.eu>\n * @license GNU GENERAL PUBLIC LICENSE Version 3\n */\n\n'use strict';\n\nvar id   = 'pageMain',\n    Page = require('stb-component-page'),\n    page = new Page({$node: document.getElementById(id)});\n\n\n// public\nmodule.exports = page;\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n'use strict';\n\n// public\nmodule.exports = require('spa-component-page');\n\n// correct component name\nmodule.exports.prototype.name = 'stb-component-page';\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Component = require('spa-component');\n\n\n/**\n * Base page implementation.\n *\n * A full-screen top-level layer that can operate as an independent separate entity.\n * It is added to the document body on creation if not already linked.\n *\n * @constructor\n * @extends Component\n *\n * @param {Object} [config={}] init parameters (all inherited from the parent)\n *\n * @example\n * var Page = require('stb/ui/page'),\n *     page = new Page({\n *         $node: document.getElementById(id)\n *     });\n *\n * page.addListener('show', function show () {\n *     // page is visible now\n * });\n */\nfunction Page ( config ) {\n    // sanitize\n    config = config || {};\n\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n    }\n\n    /**\n     * Page visibility/active state flag.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.active = false;\n\n    /**\n     * Link to the currently active component with focus.\n     *\n     * @readonly\n     * @type {Component}\n     */\n    this.activeComponent = null;\n\n    // set default className if classList property empty or undefined\n    //config.className = 'page ' + (config.className || '');\n\n    // parent constructor call\n    Component.call(this, config);\n\n    // state flag\n    this.active = this.$node.classList.contains('active');\n\n    // correct DOM parent/child connection if necessary\n    if ( this.$node.parentNode === null ) {\n        document.body.appendChild(this.$node);\n    }\n\n    // always itself\n    this.page = this;\n}\n\n\n// inheritance\nPage.prototype = Object.create(Component.prototype);\nPage.prototype.constructor = Page;\n\n// set component name\nPage.prototype.name = 'spa-component-page';\n\n\n// public\nmodule.exports = Page;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar app     = require('spa-app/lib/core'),\n    Emitter = require('cjs-emitter'),\n    counter = 0;\n\n\n/**\n * Base component implementation.\n *\n * Visual element that can handle sub-components.\n * Each component has a DOM element container $node with a set of classes:\n * \"component\" and some specific component class names depending on the hierarchy, for example \"page\".\n * Each component has a unique ID given either from $node.id or from data.id. If not given will generate automatically.\n *\n * @constructor\n * @extends Emitter\n *\n * @param {Object} [config={}] init parameters\n * @param {Element} [config.id] component unique identifier (generated if not set)\n * @param {string} [config.className] space-separated list of classes for \"className\" property of this.$node\n * @param {Element} [config.$node] DOM element/fragment to be a component outer container\n * @param {Element} [config.$body] DOM element/fragment to be a component inner container (by default is the same as $node)\n * @param {Component} [config.parent] link to the parent component which has this component as a child\n * @param {Array.<Component>} [config.children=[]] list of components in this component\n * @param {Object.<string, function>} [config.events={}] list of event callbacks\n * @param {boolean} [config.visible=true] component initial visibility state flag\n * @param {boolean} [config.focusable=true] component can accept focus or not\n * @param {boolean} [config.propagate=false] allow to emit events to the parent component\n *\n * @fires module:stb/component~Component#click\n *\n * @example\n * var component = new Component({\n *     $node: document.getElementById(id),\n *     className: 'bootstrap responsive',\n *     events: {\n *         click: function () { ... }\n *     }\n * });\n * component.add( ... );\n * component.focus();\n */\nfunction Component ( config ) {\n    // current execution context\n    var self = this,\n        name;\n\n    // sanitize\n    config = config || {};\n\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    if ( DEVELOP ) {\n        if ( typeof config !== 'object' ) {\n            throw new Error(__filename + ': wrong config type');\n        }\n        // init parameters checks\n        if ( config.id && typeof config.id !== 'string' ) {\n            throw new Error(__filename + ': wrong or empty config.id');\n        }\n        if ( 'className' in config && (!config.className || typeof config.className !== 'string') ) {\n            throw new Error(__filename + ': wrong or empty config.className');\n        }\n        if ( config.$node && !(config.$node instanceof Element) ) {\n            throw new Error(__filename + ': wrong config.$node type');\n        }\n        if ( config.$body && !(config.$body instanceof Element) ) {\n            throw new Error(__filename + ': wrong config.$body type');\n        }\n        if ( config.parent && !(config.parent instanceof Component) ) {\n            throw new Error(__filename + ': wrong config.parent type');\n        }\n        if ( config.children && !Array.isArray(config.children) ) {\n            throw new Error(__filename + ': wrong config.children type');\n        }\n    }\n\n    /**\n     * Component visibility state flag.\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.visible = true;\n\n    /**\n     * Component can accept focus or not.\n     *\n     * @type {boolean}\n     */\n    this.focusable = true;\n\n    /**\n     * DOM outer handle.\n     *\n     * @type {Element}\n     */\n    this.$node = null;\n\n    /**\n     * DOM inner handle.\n     * In simple cases is the same as $node.\n     *\n     * @type {Element}\n     */\n    this.$body = null;\n\n    /**\n     * Link to the parent component which has this component as a child.\n     *\n     * @type {Component}\n     */\n    this.parent = null;\n\n    /**\n     * List of all children components.\n     *\n     * @type {Component[]}\n     */\n    this.children = [];\n\n    /**\n     * allow to emit events to the parent component\n     *\n     * @readonly\n     * @type {boolean}\n     */\n    this.propagate = !!config.propagate;\n\n    // parent constructor call\n    Emitter.call(this);\n\n    // outer handle - empty div in case nothing is given\n    this.$node = config.$node || document.createElement('div');\n\n    // inner handle - the same as outer handler in case nothing is given\n    this.$body = config.$body || this.$node;\n\n    // set CSS class names\n    //this.$node.className += ' component ' + (config.className || '');\n    // previous approach is not good as it mess with components hierarchy\n    this.$node.className = this.name + ' ' + (config.className || '');\n\n    // apply component id if given, generate otherwise\n    this.id = config.id || this.$node.id || 'cid' + counter++;\n\n    // apply hierarchy\n    if ( config.parent ) {\n        // add to parent component\n        config.parent.add(this);\n    }\n\n    // apply given visibility\n    if ( config.visible === false ) {\n        // default state is visible\n        this.hide();\n    }\n\n    // apply focus handling method\n    if ( config.focusable === false ) {\n        // can't accept focus\n        this.focusable = false;\n    }\n\n    // a descendant defined own events\n    if ( this.defaultEvents ) {\n        // sanitize\n        config.events = config.events || {};\n\n        if ( DEVELOP ) {\n            if ( typeof config.events !== 'object' ) {\n                throw new Error(__filename + ': wrong config.events type');\n            }\n            if ( typeof this.defaultEvents !== 'object' ) {\n                throw new Error(__filename + ': wrong this.defaultEvents type');\n            }\n        }\n\n        for ( name in this.defaultEvents ) {\n            // overwrite default events with user-defined\n            config.events[name] = config.events[name] || this.defaultEvents[name];\n        }\n    }\n\n    if ( config.events ) {\n        // apply all given events\n        Object.keys(config.events).forEach(function ( eventName ) {\n            self.addListener(eventName, config.events[eventName]);\n        });\n    }\n\n    // apply the given children components\n    if ( config.children ) {\n        // apply\n        this.add.apply(this, config.children);\n    }\n\n    // component activation by mouse\n    this.$node.addEventListener('click', function ( event ) {\n        // left mouse button\n        //if ( event.button === 0 ) {\n        // activate if possible\n        self.focus();\n\n        // there are some listeners\n        if ( self.events['click'] ) {\n            /**\n             * Mouse click event.\n             *\n             * @event module:stb/component~Component#click\n             *\n             * @type {Object}\n             * @property {Event} event click event data\n             */\n            self.emit('click', event);\n        }\n        //}\n\n        if ( DEVELOP ) {\n            // middle mouse button\n            if ( event.button === 1 ) {\n                //debug.inspect(self, 0);\n                debug.info('\"window.link\" or \"' + self.id + '.component\"', 'this component is now available in global scope');\n                window.link = self;\n                self.$node.classList.toggle('wired');\n            }\n        }\n\n        event.stopPropagation();\n    });\n\n    if ( DEVELOP ) {\n        // expose inner ID to global scope\n        window[self.id] = self.$node;\n\n        // expose a link\n        this.$node.component = this.$body.component = this;\n        this.$node.title = this.name + '#' + this.id + ' (outer)';\n        this.$body.title = this.name + '#' + this.id + ' (inner)';\n    }\n\n    debug.info('create component ' + this.name + '#' + this.id, null, {\n        tags: ['create', 'component', this.name, this.id]\n    });\n}\n\n\n// inheritance\nComponent.prototype = Object.create(Emitter.prototype);\nComponent.prototype.constructor = Component;\n\n\n/**\n * List of all default event callbacks.\n *\n * @type {Object.<string, function>}\n */\nComponent.prototype.defaultEvents = null;\n\n\n/**\n * Add a new component as a child.\n *\n * @param {...Component} [child] variable number of elements to append\n *\n * @files Component#add\n *\n * @example\n * panel.add(\n *     new Button( ... ),\n *     new Button( ... )\n * );\n */\nComponent.prototype.add = function ( child ) {\n    var index;\n\n    // walk through all the given elements\n    for ( index = 0; index < arguments.length; index++ ) {\n        child = arguments[index];\n\n        if ( DEVELOP ) {\n            if ( !(child instanceof Component) ) {\n                throw new Error(__filename + ': wrong child type');\n            }\n        }\n\n        // apply\n        this.children.push(child);\n        child.parent = this;\n\n        // correct DOM parent/child connection if necessary\n        if ( child.$node && child.$node.parentNode === null ) {\n            this.$body.appendChild(child.$node);\n        }\n\n        debug.info('add component ' + child.name + '#' + child.id + ' to ' + this.name + '#' + this.id, null, {\n            tags: ['add', 'component', this.name, this.id, child.name, child.id]\n        });\n\n        // there are some listeners\n        if ( this.events['add'] ) {\n            /**\n             * A child component is added.\n             *\n             * @event module:stb/component~Component#add\n             *\n             * @type {Object}\n             * @property {Component} item new component added\n             */\n            this.emit('add', {item: child});\n        }\n\n        //debug.log('component ' + this.name + '#' + this.id + ' new child: ' + child.name + '#' + child.id);\n    }\n};\n\n\n/* @todo: consider activation in future */\n///**\n// * Insert component into the specific position.\n// *\n// * @param {Component} child component instance to insert\n// * @param {number} index insertion position\n// */\n//Component.prototype.insert = function ( child, index ) {\n//    var prevIndex = this.children.indexOf(child);\n//\n//    if ( DEVELOP ) {\n//        if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n//        if ( !(child instanceof Component) ) { throw new Error(__filename + ': wrong child type'); }\n//    }\n//\n//    if ( prevIndex !== -1 ) {\n//        this.children.splice(prevIndex, 1);\n//        this.$body.removeChild(child.$node);\n//    }\n//\n//    if ( index === this.children.length ) {\n//        this.$body.appendChild(child.$node);\n//    } else {\n//        this.$body.insertBefore(child.$node, this.$body.children[index]);\n//    }\n//    this.children.splice(index, 0, child);\n//\n//    if ( !child.parent ) {\n//        child.parent = this;\n//    }\n//};\n\n\n/**\n * Delete this component and clear all associated events.\n *\n * @fires module:stb/component~Component#remove\n */\nComponent.prototype.remove = function () {\n    // really inserted somewhere\n    if ( this.parent ) {\n        if ( DEVELOP ) {\n            if ( !(this.parent instanceof Component) ) {\n                throw new Error(__filename + ': wrong this.parent type');\n            }\n        }\n\n        // active at the moment\n        if ( app.activePage.activeComponent === this ) {\n            this.blur();\n            this.parent.focus();\n        }\n        this.parent.children.splice(this.parent.children.indexOf(this), 1);\n    }\n\n    // remove all children\n    this.children.forEach(function ( child ) {\n        if ( DEVELOP ) {\n            if ( !(child instanceof Component) ) {\n                throw new Error(__filename + ': wrong child type');\n            }\n        }\n\n        child.remove();\n    });\n\n    this.$node.parentNode.removeChild(this.$node);\n\n    // there are some listeners\n    if ( this.events['remove'] ) {\n        /**\n         * Delete this component.\n         *\n         * @event module:stb/component~Component#remove\n         */\n        this.emit('remove');\n    }\n\n    // remove all listeners\n    this.events = {};\n\n    //debug.log('component ' + this.name + '#' + this.id + ' remove', 'red');\n    debug.info('remove component ' + this.name + '#' + this.id, null, {\n        tags: ['remove', 'component', this.name, this.id]\n    });\n};\n\n\n/**\n * Activate the component.\n * Notify the owner-page and apply CSS class.\n *\n * @param {Object} [data] custom data which passed into handlers\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#focus\n */\nComponent.prototype.focus = function ( data ) {\n    var activePage = app.activePage,\n        activeItem = activePage.activeComponent;\n\n    // this is a visual component on a page\n    // not already focused and can accept focus\n    if ( this.focusable && this !== activeItem ) {\n        // notify the current active component\n        if ( activeItem ) { activeItem.blur(); }\n\n        /* eslint consistent-this: 0 */\n\n        // apply\n        activePage.activeComponent = activeItem = this;\n        activeItem.$node.classList.add('focus');\n\n        //debug.log('component ' + this.name + '#' + this.id + ' focus');\n        debug.info('focus component ' + this.name + '#' + this.id, null, {\n            tags: ['focus', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( activeItem.events['focus'] ) {\n            /**\n             * Make this component focused.\n             *\n             * @event module:stb/component~Component#focus\n             */\n            activeItem.emit('focus', data);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Remove focus.\n * Change page.activeComponent and notify subscribers.\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#blur\n */\nComponent.prototype.blur = function () {\n    var activePage = app.activePage,\n        activeItem = activePage.activeComponent;\n\n    // apply visuals anyway\n    this.$node.classList.remove('focus');\n\n    // this is the active component\n    if ( this === activeItem ) {\n        activePage.activeComponent = null;\n\n        //debug.log('component ' + this.name + '#' + this.id + ' blur', 'grey');\n        debug.info('blur component ' + this.name + '#' + this.id, null, {\n            tags: ['blur', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( this.events['blur'] ) {\n            /**\n             * Remove focus from this component.\n             *\n             * @event module:stb/component~Component#blur\n             */\n            this.emit('blur');\n        }\n\n        return true;\n    }\n\n    debug.warn('component ' + this.name + '#' + this.id + ' attempt to blur without link to a page', null, {\n        tags: ['blur', 'component', this.name, this.id]\n    });\n\n    // nothing was done\n    return false;\n};\n\n\n/*function show ( self, data ) {\n    // correct style\n    self.$node.classList.remove('hidden');\n    // flag\n    self.visible = true;\n\n    debug.info('show component ' + self.name + '#' + self.id, null, {\n        tags: ['show', 'component', self.name, self.id]\n    });\n\n    // there are some listeners\n    if ( self.events['show'] ) {\n        /!**\n         * Make the component visible.\n         *\n         * @event module:stb/component~Component#show\n         *!/\n        self.emit('show', data);\n    }\n}*/\n\n/**\n * Make the component visible and notify subscribers.\n *\n * @param {Object} [data] custom data which passed into handlers\n * @param {function} [callback] user callback\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#show\n */\nComponent.prototype.show = function ( data, callback ) {\n    //var self = this;\n\n    // is it hidden\n    if ( !this.visible ) {\n        /*if ( typeof callback === 'function' ) {\n            // async call\n            setTimeout(function () {\n                show(self, data);\n                callback();\n            });\n        } else {\n            // sync call\n            show(this, data);\n        }*/\n\n        // correct style\n        this.$node.classList.remove('hidden');\n        // flag\n        this.visible = true;\n\n        debug.info('show component ' + this.name + '#' + this.id, null, {\n            tags: ['show', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( this.events['show'] ) {\n            /**\n             * Make the component visible.\n             *\n             * @event module:stb/component~Component#show\n             */\n            this.emit('show', data);\n        }\n\n        // async call\n        if ( typeof callback === 'function' ) {\n            // async call\n            setTimeout(callback);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n/**\n * Make the component hidden and notify subscribers.\n *\n * @param {function} [callback] user callback\n *\n * @return {boolean} operation status\n *\n * @fires module:stb/component~Component#hide\n */\nComponent.prototype.hide = function ( callback ) {\n    // is it visible\n    if ( this.visible ) {\n        // correct style\n        this.$node.classList.add('hidden');\n        // flag\n        this.visible = false;\n\n        debug.info('hide component ' + this.name + '#' + this.id, null, {\n            tags: ['hide', 'component', this.name, this.id]\n        });\n\n        // there are some listeners\n        if ( this.events['hide'] ) {\n            /**\n             * Make the component hidden.\n             *\n             * @event module:stb/component~Component#hide\n             */\n            this.emit('hide');\n        }\n\n        // async call\n        if ( typeof callback === 'function' ) {\n            // async call\n            setTimeout(callback);\n        }\n\n        return true;\n    }\n\n    // nothing was done\n    return false;\n};\n\n\n// public\nmodule.exports = Component;\n","/**\n * MAGSDK basic implementation of access control plugin.\n *\n * @author Igor Zapororzhets <i.zapororzhets@infomir.com>\n */\n\n'use strict';\n\nvar privateSettings = {\n        password: '0000',\n        sessionTime: 0,\n        active: true\n    },\n\n    storageKey = 'parent.settings',\n\n    isAllowedAccess = false,\n\n    notification = null,\n\n    instance;\n\n\nfunction keyboardIntent ( config, callback ) {\n    return core.intent({\n        action: 'keyboard',\n        data: {\n            type: config.type,\n            mode: config.mode,\n            title: config.title,\n            value: config.value\n        },\n        events: {\n            done: callback\n        }\n    }, function ( error ) {\n        console.log(error);\n    });\n}\n\n\ninstance  = {\n    request: function ( password, callback ) {\n        var isEqual = null,\n            intent;\n\n        password = password || null;\n\n        if ( typeof password === 'function' ) {\n            callback = password;\n            password = null;\n        }\n        console.log(' password ' + password);\n\n        if ( instance.settings.active ) {\n            if ( isAllowedAccess ) {\n                callback(false, true);\n            } else if ( password === null ) {\n                if ( notification !== null ) {\n                    notification.close();\n                    notification = null;\n                }\n\n                intent = keyboardIntent({\n                    type: 'password',\n                    mode: 'number',\n                    title: gettext('Input password'),\n                    description: gettext('Parental control')\n                }, function ( event ) {\n                    isEqual = event.value === instance.settings.password;\n                    console.log('isEqual ' + isEqual);\n\n                    if ( !isEqual ) {\n                        notification = core.notify({\n                            title: gettext('Wrong password for parental control'),\n                            icon: 'alert',\n                            type: 'warning',\n                            timeout: 10000\n                        });\n                    }\n                    callback(!isEqual, isEqual);\n                });\n\n                if ( intent.state === intent.STATE_NOT_RESOLVED ) {\n                    callback(false, false);\n                } else {\n                    intent.once('close', function () {\n                        if ( isEqual === null ) {\n                            // not called yet\n                            callback(true);\n                        }\n                    });\n                }\n            } else {\n                isEqual = password === instance.settings.password;\n                callback(!isEqual, isEqual);\n            }\n        } else {\n            callback(false, true);\n        }\n    },\n\n    settings: {\n        update: function ( config, callback ) {\n            var updateRequired = false;\n\n            console.log(JSON.stringify(config));\n            if ( typeof config.active !== 'undefined' && config.active !== privateSettings.isActive ) {\n                updateRequired = true;\n            }\n\n            if ( typeof config.sessionTime !== 'undefined' && config.sessionTime !== privateSettings.sessionTime ) {\n                if ( config.sessionTime === Number(config.sessionTime) ) {\n                    updateRequired = true;\n                }\n            }\n\n            if ( typeof config.password !== 'undefined' && config.password !== privateSettings.password ) {\n                updateRequired = true;\n            }\n\n            console.log('updateRequired: ' + updateRequired);\n\n            if ( updateRequired ) {\n                instance.request(config.oldPassword, function ( error ) {\n                    var passwordUpdateRequired = null;\n\n                    console.log('request ' + error);\n\n                    if ( !error ) {\n                        if ( typeof config.active !== 'undefined' ) {\n                            privateSettings.active = !!config.active;\n                        }\n\n                        if ( typeof config.sessionTime !== 'undefined' ) {\n                            privateSettings.sessionTime = config.sessionTime;\n                            isAllowedAccess = true;\n                            setTimeout(function ()  {\n                                isAllowedAccess = false;\n                            }, privateSettings.sessionTime);\n                        }\n\n                        if ( typeof config.password !== 'undefined' ) {\n                            passwordUpdateRequired = true;\n                            privateSettings.password = '' + config.password;\n                        }\n\n                        if ( core.backend && core.backend.request ) {\n                            if ( passwordUpdateRequired ) {\n                                core.backend.request('users/' + core.backend.session.userId + '/settings', {\n                                    headers: {\n                                        'Content-Type': 'application/x-www-form-urlencoded'\n                                    },\n                                    method: 'PUT',\n                                    body: 'parent_password=' + privateSettings.password\n                                });\n                            }\n\n                            core.backend.request('storage/', {\n                                method: 'POST',\n                                async: true,\n                                body: JSON.stringify({key: storageKey, value: JSON.stringify(privateSettings)})\n                            });\n                        } else {\n                            core.storage.setItem(storageKey, privateSettings);\n                        }\n                    }\n                    callback(error);\n                });\n            }\n        },\n        updatePassword: function ( callback ) {\n            if ( notification !== null ) {\n                notification.close();\n                notification = null;\n            }\n\n            keyboardIntent({\n                type: 'password',\n                mode: 'number',\n                title: gettext('Enter current password'),\n                description: gettext('Parental control')\n            }, function ( event ) {\n                var oldPassword = event.value;\n\n                if ( oldPassword === privateSettings.password ) {\n                    keyboardIntent({\n                        type: 'password',\n                        mode: 'number',\n                        title: gettext('Enter new password'),\n                        description: gettext('Parental control')\n                    }, function ( result ) {\n                        if ( result.value === privateSettings.password ) {\n                            notification = core.notify({\n                                title: gettext('The new password is the same as current one'),\n                                icon: 'alert',\n                                type: 'warning'\n                            });\n                        } else {\n                            core.accessControl.settings.update({\n                                oldPassword: oldPassword,\n                                password: result.value\n                            }, function ( error, updateResult ) {\n                                if ( !error ) {\n                                    notification = core.notify({\n                                        title: gettext('Password changed successfully'),\n                                        icon: 'info',\n                                        type: 'success'\n                                    });\n                                }\n\n                                callback(error, updateResult);\n                            });\n                        }\n                    });\n                } else {\n                    notification = core.notify({\n                        title: gettext('Wrong current password'),\n                        icon: 'alert',\n                        type: 'error'\n                    });\n                }\n            });\n        }\n    }\n};\n\nfunction createDefaultSettings () {\n    core.backend.request('storage/', {\n        method: 'POST',\n        body: JSON.stringify({key: storageKey, value: JSON.stringify(privateSettings)})\n    });\n}\n\nObject.defineProperties(instance.settings, {\n    password: {\n        get: function () {\n            return privateSettings.password;\n        }\n    },\n    sessionTime: {\n        get: function () {\n            return privateSettings.sessionTime;\n        }\n    },\n    active: {\n        get: function () {\n            return privateSettings.active;\n        }\n    }\n});\n\n\nObject.defineProperty(instance, 'state', {\n    get: function () {\n        return isAllowedAccess;\n    }\n});\n\nif ( core.backend ) {\n    privateSettings.password = core.backend.settings.parent_password;\n    core.backend.request('storage/' + storageKey, {\n        onload: function ( error, response ) {\n            if ( error ) {\n                createDefaultSettings();\n            } else if ( response.data && response.data.value ) {\n                try {\n                    response.data.value = JSON.parse(response.data.value);\n                    privateSettings.sessionTime = response.data.value.sessionTime;\n                    privateSettings.active = response.data.value.active;\n                } catch ( exceptionError ) {\n                    console.log(exceptionError);\n                    createDefaultSettings();\n                }\n            }\n        }\n    });\n} else {\n    (function () {\n        var data = core.storage.getItem(storageKey);\n\n        if ( data ) {\n            privateSettings.password = data.password;\n            privateSettings.active = !!data.active;\n            privateSettings.sessionTime = parseInt(data.sessionTime, 10);\n        }\n    })();\n}\n\n\nmodule.exports = instance;\n"],"sourceRoot":""}