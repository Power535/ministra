{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","this","events","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","emit","index","event","Array","slice","constructor","api","storage","layouts","gettext","gettextWrapper","provider","enabledList","langs","core","environment","availableLanguages","loadList","mapLangs","mapLayouts","needAdd","getItem","map","item","code","indexOf","enable","language","splice","onInit","config","onSettingsInit","load","path","data","id","description","icon","sections","parent","options","content","prepareForRender","values","prepareForSave","selectIndex","notify","title","type","timeout","setItem","render","renders","toggle","saveImmediate","buildList","onAppInit","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","jsonParseError","json","JSON","parse","responseText","error","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * Remote control settings plugin.\n */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    gettextWrapper = require('mag-gettext'),\n    provider = new Emitter(),\n\n    enabledList = [],\n    langs = core.environment.availableLanguages,\n    api, storage, layouts, gettext;\n\nprovider.get = function () {\n    return enabledList;\n};\n\nfunction buildList () {\n    var data = {\n            id: 'keyboardLayouts',\n            name: gettext('Keyboard layouts'),\n            description: gettext('Set the default keyboard layout language.'),\n            icon: 'theme-icon-rc-vk',\n            sections: [\n                {\n                    id: 'keyboardLayouts',\n                    name: gettext('Keyboard layouts'),\n                    description: gettext('Set the default keyboard layout language.'),\n                    icon: 'theme-icon-rc-vk',\n                    parent: 'system'\n                }\n            ],\n            options: [],\n            content: []\n        },\n        index;\n\n    /**\n     *\n     * @param {Object} values - data to prepare\n     * @param {Function} callback - result handler\n     *\n     * @this option\n     */\n    function prepareForRender ( values, callback ) {\n        callback(layouts[this.index].enable);\n    }\n\n    /**\n     *\n     * @param {boolean} value - new state\n     * @param {Function} callback - result handler\n     *\n     * @this option\n     */\n    function prepareForSave ( value, callback ) {\n        var selectIndex = enabledList.indexOf(layouts[this.index].code);\n\n        if ( value ) {\n            layouts[this.index].enable = value;\n            if ( selectIndex === -1 ) {\n                enabledList.push(layouts[this.index].code);\n            }\n        } else if ( selectIndex !== -1 ) {\n            if ( enabledList.length === 1 ) {\n                // try to disable last\n                core.notify({\n                    title: gettext('None of the proposed layouts has been selected. Action has been canceled.'),\n                    icon: 'alert',\n                    type: 'warning',\n                    timeout: 10000\n                });\n\n                // pass error: true\n                callback(true);\n\n                return;\n            }\n            layouts[this.index].enable = value;\n            enabledList.splice(selectIndex, 1);\n\n        }\n\n        storage.setItem('layouts', layouts);\n        provider.emit('update', enabledList);\n\n        callback();\n    }\n\n    for ( index = 0; index < layouts.length; index++ ) {\n        data.options.push({\n            id: 'layout' + layouts[index].code,\n            name: layouts[index].name,\n            description: '',\n            icon: 'theme-icon-rc-vk',\n            render: api.renders.toggle,\n            saveImmediate: true,\n            data: {},\n            index: index,\n            prepareForRender: prepareForRender,\n            prepareForSave: prepareForSave,\n            parent: 'keyboardLayouts'\n        });\n    }\n\n    return data;\n}\n\nfunction loadList () {\n    var needAdd = true,\n        index, selectIndex, mapLangs, mapLayouts;\n\n    layouts = storage.getItem('layouts') || [];\n    mapLangs = langs.map(function ( item ) {\n        return item.code;\n    });\n\n    mapLayouts = layouts.map(function ( item ) {\n        return item.code;\n    });\n\n    for ( index = 0; index < langs.length; index++ ) {\n        selectIndex = mapLayouts.indexOf(langs[index].code);\n\n        if ( selectIndex === -1 ) {\n            layouts.push({\n                code: langs[index].code,\n                name: langs[index].name,\n                enable: false\n            });\n\n            /* eslint-disable-next-line */\n            continue;\n        }\n        if ( layouts[index].enable ) {\n            needAdd = false;\n            enabledList.push(layouts[index].code);\n        }\n    }\n\n    if ( needAdd ) {\n        if ( core.environment.language !== 'en' ) {\n            enabledList.push(core.environment.language);\n        }\n        enabledList.push('en');\n    }\n\n    //delete unsupported languages\n    for ( index = 0; index < layouts.length; index++ ) {\n        selectIndex = mapLangs.indexOf(layouts[index].code);\n\n        if ( selectIndex === -1 ) {\n            layouts.splice(index, 1);\n            index--;\n\n            /* eslint-disable-next-line */\n            continue;\n        }\n\n        if ( needAdd ) {\n            if ( enabledList.indexOf(layouts[index].code) !== -1 ) {\n                layouts[index].enable = true;\n            }\n        }\n    }\n}\n\nmodule.exports = {\n    onInit: function ( config, callback ) {\n        storage = config.storage;\n        loadList();\n        if ( callback ) {\n            callback();\n        }\n    },\n    onSettingsInit: function ( config, callback ) {\n        api = config.api;\n        storage = config.storage;\n        if ( !layouts ) {\n            loadList();\n        }\n\n        gettextWrapper.load({\n            name: core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            var data;\n\n            gettext = gettextWrapper.gettext;\n            data = buildList();\n\n            callback(null, data);\n        });\n    },\n    onAppInit: function ( config, callback ) {\n        callback(null, provider);\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n"],"sourceRoot":""}