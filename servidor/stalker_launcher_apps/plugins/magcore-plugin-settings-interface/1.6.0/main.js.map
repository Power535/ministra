{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/options/start.page.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","Gettext","loader","prepare","data","gettext","_","pgettext","ngettext","defaultLanguage","load","config","callback","xhr","ext","path","XMLHttpRequest","onload","jsonParseError","json","JSON","parse","responseText","error","onerror","events","emit","ontimeout","open","send","this","addListener","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","index","event","Array","slice","constructor","onSettingsInit","core","environment","language","id","description","options","onInit","meta","msgId","context","plural","evalResult","eval","classicTv","tv","window","backend","settings","icon","render","api","renders","popupSelect","variable","requirePortalReboot","prepareForRender","showMainMenuOnStart","packageMap","selected","prepareForSave","getters","userSettings","saver","setHomeApp","parent","homeApplication"],"mappings":"2BACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,YAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,kCCzEA,IAAAC,EAAcpC,EAAQ,GACtBqC,EAAcrC,EAAQ,GACtBsC,EAAA,IAAAF,EAeA,SAAAG,EAAAC,GACA,IAAAC,EAAA,IAAAJ,EAAAG,GAEAF,EAAAI,EAAAJ,EAAAG,kBACAH,EAAAK,SAAAF,EAAAE,SACAL,EAAAM,SAAAH,EAAAG,SAOAN,EAAAO,gBAAA,KAYAP,EAAAQ,KAAA,SAAAC,EAAAC,GACA,IAAAC,EAaAD,KAAA,KACAD,EAAAG,IAAAH,EAAAG,KAAA,OACAH,EAAAI,KAAAJ,EAAAI,MAAA,OAGAJ,EAAApC,OAAA2B,EAAAO,iBAEAN,IACA,OAAAS,GACAA,EAAA,SAGAC,EAAA,IAAAG,gBAEAC,OAAA,WACA,IAAAC,EAAAC,EAEA,IACAA,EAAAC,KAAAC,MAAAR,EAAAS,cACa,MAAAC,GACbL,EAAAK,EAGAL,EACAL,EAAAW,QAAAN,IAEAf,EAAAgB,GACA,OAAAP,GACAA,EAAA,MAIAV,EAAAuB,OAAA,SAEAvB,EAAAwB,KAAA,UAKAb,EAAAc,UAAAd,EAAAW,QAAA,SAAAD,GACApB,IAEA,OAAAS,GACAA,EAAA,MAIAV,EAAAuB,OAAA,UAEAvB,EAAAwB,KAAA,QAAAH,IAIAV,EAAAe,KAAA,MAAAjB,EAAAI,KAAA,IAAAJ,EAAApC,KAAA,IAAAoC,EAAAG,KAAA,GACAD,EAAAgB,KAAA,QAMA9D,EAAAD,QAAAoC,gCCzGA,SAAAF,IAwBA8B,KAAAL,OAAA,GAIAzB,EAAAJ,UAAA,CAaAmC,YAAA,SAAAxD,EAAAqC,GAaAkB,KAAAL,OAAAlD,GAAAuD,KAAAL,OAAAlD,IAAA,GAEAuD,KAAAL,OAAAlD,GAAAyD,KAAApB,IAcAqB,KAAA,SAAA1D,EAAAqC,GAEA,IAAAsB,EAAAJ,KAeAA,KAAAL,OAAAlD,GAAAuD,KAAAL,OAAAlD,IAAA,GAEAuD,KAAAL,OAAAlD,GAAAyD,KAAA,SAAAG,IACAD,EAAAE,eAAA7D,EAAA4D,GACAvB,EAAAyB,MAAAH,EAAAI,cAgBAC,aAAA,SAAAC,GACA,IAAAjE,EAcA,IAAAA,KAAAiE,EACAA,EAAA3C,eAAAtB,IACAuD,KAAAC,YAAAxD,EAAAiE,EAAAjE,KAeA6D,eAAA,SAAA7D,EAAAqC,GAiBAkB,KAAAL,OAAAlD,KAEAuD,KAAAL,OAAAlD,GAAAuD,KAAAL,OAAAlD,GAAAkE,OAAA,SAAAC,GAA0F,OAAAA,IAAA9B,IAE1F,IAAAkB,KAAAL,OAAAlD,GAAAoE,SAEAb,KAAAL,OAAAlD,QAAAqE,KAwDAlB,KAAA,SAAAnD,GACA,IACAsE,EADAC,EAAAhB,KAAAL,OAAAlD,GAaA,GAAAuE,EAOA,IAAAD,EAAA,EAA4BA,EAAAC,EAAAH,OAAsBE,IAQlDC,EAAAD,GAAAR,MAAAP,KAAAiB,MAAAnD,UAAAoD,MAAA7E,KAAAmE,UAAA,MAQAtC,EAAAJ,UAAAqD,YAAAjD,EAIAjC,EAAAD,QAAAkC,gCC/QAjC,EAAAD,QAAA,CACAoF,eAAA,SAAAvC,EAAAC,GACQhD,EAAQ,GAAa8C,KAAA,CAC7BnC,KAAA4E,KAAAC,YAAAC,SACAtC,KAAAJ,EAAAI,KAAA,QACS,WACTH,EAAA,MACA0C,GAAA,QACA/E,KAAA,oBACAgF,YAAA,wCACAC,QAAA,CAUoB5F,EAAQ,EAARA,CAA8B+C,SA8ElD8C,OAAA,SAAA9C,EAAAC,GAwFAA,EAAA,KAvFA,IAA0BhD,EAAQ,kECzFlC,SAAAqC,QAAAU,QACA,IAAAP,KAAAsD,KAGA/C,eAAA,GACAP,KAAAO,OAAAP,MAAA,GACAA,KAAA,IAAAA,KAAA,QAGAsD,KAAA/C,OAAA+C,KASA5B,KAAAzB,QAAA,SAAAsD,GACA,OAAAvD,KAAA,IAAAuD,OAYA7B,KAAAvB,SAAA,SAAAqD,EAAAD,GACA,OAAAvD,KAAAwD,IAAAxD,KAAAwD,GAAAD,OAaA7B,KAAAtB,SAAA,SAAAmD,MAAAE,OAAA5E,OAIA,IAAAQ,EAAAqE,WAQA,OAAA1D,MAAAsD,MAAAtD,KAAA,IAAAuD,QACAG,WAAAC,KAAA,OAAA9E,MAAA,KAAiDyE,KAAAG,QAEjD,kBAAAC,aACAA,wBAIA1D,KAAA,IAAAuD,OAAAG,aAIA,IAAA7E,MAAA0E,MAAAE,QAMA5D,QAAAL,UAAAqD,YAAAhD,QAIAlC,OAAAD,QAAAmC,sCC9FA,IAAA+D,EAAA,yBACAC,EAAA,iBAGAlG,EAAAD,QAAA,SAAA6C,GACA,IAAAN,EAAkBzC,EAAQ,GAAayC,QAEvC,OAAA6D,OAAAf,KAAAgB,SAAAD,OAAAf,KAAAgB,QAAAC,SACA,CACAd,GAAA,kBACAe,KAAA,qBACA9F,KAAA8B,EAAA,aACAkD,YAAAlD,EAAA,iFACAiE,OAAA3D,EAAA4D,IAAAC,QAAAC,YACAC,SAAA,CACAnG,KAAA,UACAU,MAAA,MAEA0F,qBAAA,EACAC,iBAAA,SAAA3F,EAAA2B,GACA,IAAAiE,GAAA5F,EA6BA2B,EAzBAsD,OAAAf,KAAA2B,WAAAd,IAAAE,OAAAf,KAAA2B,WAAAb,GACA,CACA,CAAyB1F,KAAA8B,EAAA,mBAAApB,MAAAgF,EAAAc,UAAAF,GAAA5F,IAAAgF,GACzB,CAAyB1F,KAAA8B,EAAA,2BAAApB,MAAA+E,EAAAe,UAAAF,GAAA5F,IAAA+E,GACzB,CAAyBzF,KAAA8B,EAAA,gBAAApB,MAAA,KAAA8F,SAAAF,IAERX,OAAAf,KAAA2B,WAAAb,GACjB,CACA,CAAyB1F,KAAA8B,EAAA,mBAAApB,MAAAgF,EAAAc,UAAAF,GAAA5F,IAAAgF,GACzB,CAAyB1F,KAAA8B,EAAA,gBAAApB,MAAA,KAAA8F,SAAAF,IAERX,OAAAf,KAAA2B,WAAAd,GACjB,CACA,CAAyBzF,KAAA8B,EAAA,mBAAApB,MAAA+E,EAAAe,UAAAF,GAAA5F,IAAA+E,GACzB,CAAyBzF,KAAA8B,EAAA,gBAAApB,MAAA,KAAA8F,SAAAF,IAGzB,CACA,CAAyBtG,KAAA8B,EAAA,mBAAApB,MAAAgF,EAAAc,UAAAF,GACzB,CAAyBtG,KAAA8B,EAAA,gBAAApB,MAAA,KAAA8F,SAAAF,MAQzBG,eAAA,SAAA/F,EAAA2B,GAWAkB,KAAA4C,SAAAzF,QAEA2B,KAEApC,OAAAmC,EAAA4D,IAAAU,QAAAC,aACAC,MAAA,SAAAvE,GACAsD,OAAAf,KAAAgB,QAAAC,SAAAgB,WAAAtD,KAAA4C,SAAAzF,MAAA2B,IAEAyE,OAAA,iBAIA,CACA/B,GAAA,kBACAe,KAAA,qBACA9F,KAAA8B,EAAA,aACAkD,YAAAlD,EAAA,iFACAiE,OAAA3D,EAAA4D,IAAAC,QAAAC,YACArE,KAAA,CACAkF,gBAAA,YAEAX,qBAAA,EACAC,iBAAA,SAAAxE,EAAAQ,GAMAA,EALA,CACA,CAAiBrC,KAAA8B,EAAA,mBAAApB,MAAA,eAAA8F,SAAA,gBAAA3E,EAAAkF,iBACjB,CAAiB/G,KAAA8B,EAAA,gBAAApB,MAAA,YAAA8F,SAAA,aAAA3E,EAAAkF,oBAKjBN,eAAA,SAAA/F,EAAA2B,GACAkB,KAAA1B,KAAAkF,gBAAArG,EACA2B,KAEAyE,OAAA","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","'use strict';\n\n// var classicTvName = 'magcore-app-tv-classic',\n//     tvName = 'magcore-app-tv';\n\n\n// public interface\nmodule.exports = {\n    onSettingsInit: function ( config, callback ) {\n        require('mag-gettext').load({\n            name: core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            callback(null, {\n                id: 'iface',\n                name: 'Interface section',\n                description: 'Interface section general description',\n                options: [\n                    // {\n                    //     id: 'theme',\n                    //     icon: 'theme-icon-interface',\n                    //     name: gettext('Theme'),\n                    //     description: 'Setting a theme (your interface appearance)',\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    require('./options/start.page')(config)\n                    // {\n                    //     id: 'metricSystem',\n                    //     icon: 'theme-icon-cloud-sun',\n                    //     name: gettext('Weather display format'),\n                    //     description: gettext('Choosing a weather display format') + '<br>'\n                    //         + gettext('Metric system (degrees Celsius ° C, m / s) or English system (degrees Fahrenheit ° F, miles / s)'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    // {\n                    //     id: 'hdmiEventReaction',\n                    //     icon: 'theme-icon-hdmi',\n                    //     name: gettext('HDMI event reaction'),\n                    //     description: gettext('Device response to HDMI cable disconnections'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    // {\n                    //     id: 'screensaverInterval',\n                    //     icon: 'theme-icon-screensaver-interval',\n                    //     name: gettext('Screensaver interval'),\n                    //     description: gettext('The duration of the device inactivity, upon which appears the splash screen'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    // {\n                    //     id: 'clockInPlayer',\n                    //     icon: 'theme-icon-clock-on-playback',\n                    //     name: gettext('Clock during playing'),\n                    //     description: gettext('Time display while watching a video'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    // {\n                    //     id: 'ledBrightness',\n                    //     icon: 'theme-icon-brightness',\n                    //     name: gettext('LED brightness'),\n                    //     description: gettext('Screen brightness in the set-top box operation mode'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    // {\n                    //     id: 'ledBrightnessStandby',\n                    //     icon: 'theme-icon-brightness-standby',\n                    //     name: gettext('LED brightness (standby)'),\n                    //     description: gettext('Screen brightness in standby mode'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    // {\n                    //     id: 'rcModel',\n                    //     icon: 'theme-icon-rc',\n                    //     name: gettext('RC model'),\n                    //     description: gettext('Choosing a remote control model'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // },\n                    // {\n                    //     id: 'screensaver',\n                    //     icon: 'theme-icon-screensaver',\n                    //     name: gettext('Screensaver'),\n                    //     description: gettext('Choosing a splash Screensaver'),\n                    //     render: config.api.renders.listItem,\n                    //     saveImmediate: true,\n                    //     parent: 'interface'\n                    // }\n                ]\n            });\n        });\n    },\n    onInit: function ( config, callback ) {\n        var daemon = new (require('cjs-emitter'))();\n\n        // daemon.addListener('system:start', function () {\n        //     var classicTv = core.packageMap[classicTvName],\n        //         tv = core.packageMap[tvName],\n        //         homeApp;\n\n        //     homeApp = config.storage.getItem('homeApp');\n        //     console.log('11111111111111111111111111');\n        //     console.log('homeApp ' + homeApp);\n        //     console.log(JSON.stringify(['backend', window.core.backend]));\n\n        //     if ( window.core.backend ) {\n        //         window.core.backend.addListener('ready', function () {\n        //             console.log(JSON.stringify(['show_after_loading', window.core.backend.settings.show_after_loading]));\n        //             if ( window.core.backend.settings.show_after_loading === 'last_channel' ) {\n        //                 if ( homeApp ) {\n        //                     // settings exsits\n        //                     if ( homeApp === 'last_channel' ) {\n        //                         // confirm(1);\n        //                         if ( classicTv ) {\n        //                             // confirm(2);\n        //                             config.storage.setItem('homeApp', classicTv.packageName);\n        //                             console.log(JSON.stringify(['homeApp', classicTv.packageName]));\n        //                             window.core.taskManager.setHomeApp(classicTv);\n        //                         } else if ( tv ) {\n        //                             // confirm(3);\n        //                             config.storage.setItem('homeApp', tv.packageName);\n        //                             console.log(JSON.stringify(['homeApp', tv.packageName]));\n        //                             window.core.taskManager.setHomeApp(tv);\n        //                         }\n        //                     } else if ( homeApp === tvName && tv ) {\n        //                         // confirm(4);\n        //                         // settings saved to TV\n        //                         config.storage.setItem('homeApp', tv.packageName);\n        //                         console.log(JSON.stringify(['homeApp', tv.packageName]));\n        //                         window.core.taskManager.setHomeApp(tv);\n        //                     } else if ( homeApp === classicTvName && classicTv ) {\n        //                         // confirm(5);\n        //                         // settings saved to classic TV\n        //                         config.storage.setItem('homeApp', classicTv.packageName);\n        //                         console.log(JSON.stringify(['homeApp', classicTv.packageName]));\n        //                         window.core.taskManager.setHomeApp(classicTv);\n        //                     } else if ( homeApp === tvName && !tv && classicTv ) {\n        //                         // confirm(4);\n        //                         // classic TV exists, but settings saved to TV\n        //                         config.storage.setItem('homeApp', classicTv.packageName);\n        //                         console.log(JSON.stringify(['homeApp', classicTv.packageName]));\n        //                         window.core.taskManager.setHomeApp(classicTv);\n        //                     } else if ( homeApp === classicTvName && !classicTv && tv ) {\n        //                         // confirm(5);\n        //                         // TV exists, settings saved to classic TV\n        //                         config.storage.setItem('homeApp', tv.packageName);\n        //                         console.log(JSON.stringify(['homeApp', tv.packageName]));\n        //                         window.core.taskManager.setHomeApp(tv);\n        //                     } else if ( tv && classicTv ) {\n        //                         // confirm(6);\n        //                         window.core.taskManager.setHomeApp(classicTv);\n        //                         console.log(JSON.stringify(['homeApp', classicTv.packageName]));\n        //                     } else if ( window.core.packageMap[homeApp] ) {\n        //                         // confirm(7);\n        //                         console.log(JSON.stringify(['homeApp', homeApp]));\n        //                         window.core.taskManager.setHomeApp(window.core.packageMap[homeApp]);\n        //                     }\n        //                 } else if ( classicTv ) {\n        //                     // new start\n        //                     // confirm(7);\n        //                     config.storage.setItem('homeApp', classicTvName);\n        //                     console.log(JSON.stringify(['homeApp', classicTvName]));\n\n        //                     window.core.taskManager.setHomeApp(classicTv);\n        //                 } else if ( tv ) {\n        //                     // new start without classic TV\n        //                     // confirm(8);\n        //                     config.storage.setItem('homeApp', tvName);\n        //                     console.log(JSON.stringify(['homeApp', tvName]));\n\n        //                     window.core.taskManager.setHomeApp(tv);\n        //                 }\n        //             }\n        //         });\n        //     } else if ( window.core.packageMap[homeApp] ) {\n        //         console.log(JSON.stringify(['homeApp', homeApp]));\n        //         window.core.taskManager.setHomeApp(window.core.packageMap[homeApp]);\n        //     }\n        // });\n\n        callback(null, daemon);\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","'use strict';\n\nvar classicTv = 'magcore-app-tv-classic',\n    tv = 'magcore-app-tv';\n\n\nmodule.exports = function ( config ) {\n    var gettext = require('mag-gettext').gettext;\n\n    if ( window.core.backend && window.core.backend.settings ) {\n        return {\n            id: 'homeApplication',\n            icon: 'theme-icon-monitor',\n            name: gettext('Home page'),\n            description: gettext('Selecting a menu section that will be loaded when you turn on the set-top box'),\n            render: config.api.renders.popupSelect,\n            variable: {\n                name: 'homeApp',\n                value: null\n            },\n            requirePortalReboot: true,\n            prepareForRender: function ( value, callback ) {\n                var showMainMenuOnStart = !value,\n                    preparedData;\n\n                console.log('prepare for render main page, value: ' + value);\n                if ( window.core.packageMap[classicTv] && window.core.packageMap[tv] ) {\n                    preparedData = [\n                        {name: gettext('Last TV channel'), value: tv, selected: !showMainMenuOnStart && value === tv},\n                        {name: gettext('Last TV Classic channel'), value: classicTv, selected: !showMainMenuOnStart && value === classicTv},\n                        {name: gettext('Startup menu'), value: null, selected: showMainMenuOnStart}\n                    ];\n                } else if ( window.core.packageMap[tv] )  {\n                    preparedData = [\n                        {name: gettext('Last TV channel'), value: tv, selected: !showMainMenuOnStart && value === tv},\n                        {name: gettext('Startup menu'), value: null, selected: showMainMenuOnStart}\n                    ];\n                } else if ( window.core.packageMap[classicTv] )  {\n                    preparedData = [\n                        {name: gettext('Last TV channel'), value: classicTv, selected: !showMainMenuOnStart && value === classicTv},\n                        {name: gettext('Startup menu'), value: null, selected: showMainMenuOnStart}\n                    ];\n                } else {\n                    preparedData = [\n                        {name: gettext('Last TV channel'), value: tv, selected: !showMainMenuOnStart},\n                        {name: gettext('Startup menu'), value: null, selected: showMainMenuOnStart}\n                    ];\n                }\n                // var\n\n\n                callback(preparedData);\n            },\n            prepareForSave: function ( value, callback ) {\n                // if ( value === 'main_menu' ) {\n                //     // config.storage.setItem('homeApp', null);\n                //     value = null;\n                // } else {\n                //     config.storage.setItem('homeApp', value);\n                //     // value = 'last_channel';\n                // }\n\n                console.log('save new value ' + value);\n\n                this.variable.value = value;\n\n                callback();\n            },\n            getter: config.api.getters.userSettings,\n            saver:  function ( callback ) {\n                window.core.backend.settings.setHomeApp(this.variable.value, callback);\n            },\n            parent: 'userInterface'\n        };\n    }\n\n    return {\n        id: 'homeApplication',\n        icon: 'theme-icon-monitor',\n        name: gettext('Home page'),\n        description: gettext('Selecting a menu section that will be loaded when you turn on the set-top box'),\n        render: config.api.renders.popupSelect,\n        data: {\n            homeApplication: 'mainMenu'\n        },\n        requirePortalReboot: true,\n        prepareForRender: function ( data, callback ) {\n            var preparedData = [\n                {name: gettext('Last TV channel'), value: 'last_channel', selected: data.homeApplication === 'lastChannel'},\n                {name: gettext('Startup menu'), value: 'main_menu', selected: data.homeApplication  === 'mainMenu'}\n            ];\n\n            callback(preparedData);\n        },\n        prepareForSave: function ( value, callback ) {\n            this.data.homeApplication = value;\n            callback();\n        },\n        parent: 'userInterface'\n    };\n\n};\n"],"sourceRoot":""}