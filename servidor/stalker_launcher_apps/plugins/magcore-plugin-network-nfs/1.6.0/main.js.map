{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/main.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NFS_PATH","NFS_MOUNTED","apiVersion","gSTB","Version","split","trim","asyncApiAvail","window","stbNfs","cache","enabled","workers","activeServer","data","servers","shares","serversCacheTime","sharesCacheTime","setup","worker","this","indexOf","push","setupTime","Date","clear","forEach","mount","config","callback","status","command","address","charAt","length","substr","RDir","setTimeout","umount","force","arguments","ExecAction","getServers","useCache","sort","arg1","arg2","join","Error","findServers","error","Array","isArray","keys","message","getShares","server","findShares","onAppInit","app","types","hasNfsNativeSupport","clearCache"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * MAGCORE implementation of NFS network plugin.\n *\n * There are different realizations of core NFS API -- old synchronous API and new asynchronous,\n * with callback-based asynchronous model. Plugin realization supports two variations for backward compatibility.\n *\n * @author Yaroslav Surilov <y.surilov@infomir.com>\n */\n\n'use strict';\n\nvar NFS_PATH      = '/ram/mnt/nfs', // default dir for NFS mount point\n    NFS_MOUNTED   = false,          // flag is a NFS share mounted to the `NFS_PATH`\n    apiVersion    = +gSTB.Version().split(';')[0].split(':')[1].trim(),\n    asyncApiAvail = window.stbNfs && apiVersion >= 342,\n    /**\n     * @namespace\n     * @property {boolean} enabled enable/disable cache entirely\n     * @property {string} activeServer currently opened server\n     * @property {Object} data all cached resources: servers and shares\n     * @property {number} serversCacheTime value in seconds of lifetime of NFS servers cache\n     * @property {number} sharesCacheTime value in seconds of lifetime of NFS shares cache\n     * @property {function} setup\n     */\n    cache = {\n        enabled: true,\n        workers: [],\n        activeServer: null,\n        /**\n         * @example\n         * {\n         *     servers: [server_0, server_1, ...],\n         *     shares: {\n         *         server_0: [share_0, share_1, ...],\n         *         server_1: [share_0, share_1, ...]\n         *     }\n         * }\n         */\n        data: {\n            servers: null,\n            shares: null\n        },\n        serversCacheTime: 300,\n        sharesCacheTime: 300,\n        setup: function ( worker ) {\n            if ( this.workers.indexOf(worker) === -1 ) {\n                this.workers.push(worker);\n            }\n\n            worker.setupTime = new Date();\n        },\n        clear: function () {\n            cache.data.servers = null;\n            cache.data.shares = null;\n            cache.activeServer = null;\n\n            cache.workers.forEach(function ( worker ) {\n                delete worker.setupTime;\n            });\n\n            cache.workers = [];\n        }\n    };\n\n\n/**\n * Mount if no connection with the given parameters\n *\n * @param {Object} config opener configuration\n * @param {function} callback scan result handler\n */\nfunction mount ( config, callback ) {\n    var status, command;\n\n    if ( NFS_MOUNTED ) {\n        status = true;\n    } else if ( config && config.address ) {\n        config.address = config.address.charAt(config.address.length - 1) === '/' ?\n            config.address.substr(0, config.address.length - 1) :\n            config.address;\n        command = 'mount nfs \"' + config.address + '\" \"' + NFS_PATH + '\" nolock,ro,rsize=4096,wsize=4096,udp';\n        status = gSTB.RDir(command);\n\n        // global flag\n        NFS_MOUNTED = status === 'Ok';\n        status = NFS_MOUNTED;\n    } else {\n        status = false;\n    }\n\n    setTimeout(function () {\n        callback(null, status);\n    }, 0);\n}\n\n\n/**\n * Check mount status and disconnect.\n *\n * @param {boolean} [force=false] flag to forcefully unmount the resource\n */\nfunction umount ( force ) {\n    force = arguments.length ? force : false;\n\n    if ( NFS_MOUNTED || force === true ) {\n        // unmount the previous share\n        gSTB.ExecAction('umount_dir ' + NFS_PATH);\n        // global flag\n        NFS_MOUNTED = false;\n        //NFS_DATA = null;\n    }\n}\n\n\n/**\n * Start scanning to find all available servers.\n *\n * @param {function} callback scan result handler\n * @param {boolean} useCache enable/disable caching for this worker\n */\nfunction getServers ( callback, useCache ) {\n    var sort = function ( data ) {\n        return data.sort(function ( arg1, arg2 ) {\n            return arg1.split('.').join('') - arg2.split('.').join('');\n        });\n    };\n\n    if ( typeof callback !== 'function' ) {\n        throw new Error('[NFS plugin] > callback for getServers must be a function');\n    }\n\n    useCache = typeof useCache === typeof true ? useCache : true;\n\n    if ( cache.enabled && useCache ) {\n        if ( !cache.data.servers ) {\n            cache.setup(getServers);\n        } else if ( (new Date() - getServers.setupTime) / 1000 > cache.serversCacheTime ) {\n            cache.setup(getServers);\n            // reset data\n            cache.data.servers = null;\n            cache.activeServer = null;\n        } else {\n            callback(null, sort(cache.data.servers));\n\n            return;\n        }\n    }\n\n    if ( asyncApiAvail ) {\n        window.stbNfs.findServers(function ( error, servers ) {\n            if ( error ) {\n                callback(error);\n            } else if ( Array.isArray(servers) ) {\n                callback(null, sort(cache.data.servers = servers));\n\n                if ( cache.data.shares ) {\n                    Object.keys(cache.data.shares).forEach(function ( key ) {\n                        if ( servers.indexOf(key) === -1 ) {\n                            delete cache.data.shares[key];\n                        }\n                    });\n                }\n            } else {\n                callback({message: 'Invalid data format!'});\n            }\n        });\n    }\n}\n\n\n/**\n * Start scanning to find all available exports on the given server.\n *\n * @param {Object} config scan configuration\n * @param {function} callback scan result handler\n * @param {boolean} useCache enable/disable caching for this worker\n */\nfunction getShares ( config, callback, useCache ) {\n    if ( typeof callback !== 'function' ) {\n        throw new Error('[NFS plugin] > callback for getShares must be a function');\n    }\n\n    useCache = typeof useCache === typeof true ? useCache : true;\n    NFS_MOUNTED = false;\n\n    if ( cache.enabled && useCache ) {\n        cache.activeServer = config.server;\n\n        if ( !cache.data.shares ) {\n            cache.setup(getShares);\n        } else if ( (new Date() - getShares.setupTime) / 1000 > cache.sharesCacheTime ) {\n            cache.setup(getShares);\n            // reset data\n            cache.data.shares = null;\n            cache.activeServer = null;\n        } else if ( cache.data.shares[cache.activeServer] ) {\n            callback(null, cache.data.shares[cache.activeServer]);\n\n            return;\n        }\n    }\n\n    if ( asyncApiAvail ) {\n        window.stbNfs.findShares(config, function ( error, shares ) {\n            if ( error ) {\n                callback(error);\n            } else if ( Array.isArray(shares) ) {\n                cache.data.shares = cache.data.shares || {};\n                cache.data.shares[cache.activeServer] = shares;\n                callback(null, shares);\n            } else {\n                callback({message: 'Invalid data format!'});\n            }\n        });\n    }\n}\n\n\nmodule.exports = {\n    onAppInit: function ( config, callback ) {\n        var api = {\n            config: config.app,\n            types: {\n                /*   SAMBA_GROUP: 0,\n                SAMBA_HOST: 1,\n                SAMBA_SHARE: 2*/\n            },\n            hasNfsNativeSupport: asyncApiAvail,\n            clearCache: cache.clear,\n            getServers: getServers,\n            getShares: getShares,\n            mount: mount,\n            umount: umount\n        };\n\n        callback(null, api);\n    }\n};\n"],"sourceRoot":""}