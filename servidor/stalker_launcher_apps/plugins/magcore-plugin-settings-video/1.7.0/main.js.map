{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/mag-gettext/index.js","webpack:///./src/js/modules/identifiers.js","webpack:///./src/js/main.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/modules/settings/main.js","webpack:///./src/js/modules/data/video.modes.js","webpack:///./src/js/modules/data/resolutions.provider.js","webpack:///./src/js/modules/settings/auto.frame.rate.js","webpack:///./src/js/modules/settings/digital.output.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","Gettext","loader","prepare","data","gettext","_","pgettext","ngettext","defaultLanguage","load","config","callback","xhr","ext","path","XMLHttpRequest","onload","jsonParseError","json","JSON","parse","responseText","error","onerror","events","emit","ontimeout","open","send","root","video","graphicResolution","tvSystem","onInit","onSettingsInit","core","environment","language","this","addListener","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","index","event","Array","slice","constructor","meta","msgId","context","plural","evalResult","eval","pluginConfig","tvSystemOrigin","ids","runtimeTvSystemSettings","gSTB","SetDisplayMode","videoModeOptionIndex","videoModeNotificationTimeout","saveRuntimeVideoMode","option","description","label","api","actions","setInfo","videoModeSaver","done","section","options","setTimeout","savers","notificationTimeout","notification","notify","title","icon","type","buttons","click","clearTimeout","tvsystem","prepareForRender","refresh","close","generateOptions","videoModes","resolutionsProvider","id","map","videoMode","selected","select:item","item","prepareForSave","saveImmediate","requireDeviceReboot","render","renders","popupSelect","getters","saver","parent","graphicres","resolution","content","device","model","splice","pop","graphicResolutions","frameRates","Disabled","50_60","24_50_60","24_50","24_60","auto_framerate","advanced","env","SetAutoFrameRate","force_dvi","enabled"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","'use strict';\n\nmodule.exports = {\n    // sections\n    root: 'root',\n    video: 'video',\n    graphicResolution: 'graphicResolution',\n    tvSystem: 'tvSystem'\n};\n","/**\n * Simple plugin example\n *\n*/\n\n'use strict';\n\n\n// public interface\nmodule.exports = {\n    onInit: function ( config, callback ) {\n        callback();\n    },\n    onSettingsInit: function ( config, callback ) {\n        require('mag-gettext').load({\n            name: core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            callback(\n                null,\n                require('./modules/settings/main')(config)\n            );\n        });\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","/**\n * Options for old devices without realtime change\n */\n\n'use strict';\n\nvar ids = require('../identifiers'),\n\n    runtimeTvSystemSettings = typeof gSTB.SetDisplayMode === 'function',\n\n    videoModeOptionIndex = 0,\n\n    videoModeNotificationTimeout = 15000,\n\n    pluginConfig, tvSystemOrigin, gettext;\n\n\nfunction saveRuntimeVideoMode ( option, value ) {\n    gSTB.SetDisplayMode(value, false);\n    option.description = [\n        {\n            label: gettext('Video output mode'),\n            value: value\n        }\n    ];\n    pluginConfig.api.actions.setInfo({\n        description: option.description\n    });\n}\n\n/* eslint no-invalid-this: 0 */\nfunction videoModeSaver ( done ) {\n    var self = this,\n        option = self.section.options[videoModeOptionIndex];\n\n    setTimeout(function () {\n        pluginConfig.api.savers.environment.call(self, function () {\n            var notificationTimeout = -1,\n                notification = core.notify({\n                    title: 'All is ok?',\n                    icon: 'info',\n                    type: '',\n                    buttons: [\n                        {\n                            value: gettext('Cancel'),\n                            click: function () {\n                                clearTimeout(notificationTimeout);\n                                self.environment.tvsystem = tvSystemOrigin;\n                                saveRuntimeVideoMode(option, tvSystemOrigin);\n\n                                /* eslint no-useless-call: 0 */\n                                // reset focus index in video mode list\n                                option.prepareForRender.call(option, {\n                                    tvsystem: tvSystemOrigin\n                                }, function ( data ) {\n                                    option.refresh(data);\n                                });\n                                done(true);\n                            }\n                        },\n                        {\n                            value: gettext('Ok'),\n                            click: function () {\n                                clearTimeout(notificationTimeout);\n                                pluginConfig.api.savers.environment.call(self, done);\n                            }\n                        }\n                    ]\n                });\n\n            notificationTimeout = setTimeout(function () {\n                notification.close();\n                saveRuntimeVideoMode(option, tvSystemOrigin);\n\n                /* eslint no-useless-call: 0 */\n                // reset focus index in video mode list\n                option.prepareForRender.call(option, {\n                    tvsystem: tvSystemOrigin\n                }, function ( data ) {\n                    option.refresh(data);\n                });\n                done(true);\n            }, videoModeNotificationTimeout);\n        });\n    }, 0);\n}\n\n\nfunction generateOptions ( config ) {\n    var videoModes = require('../data/video.modes'),\n        resolutionsProvider = require('../data/resolutions.provider');\n\n    pluginConfig = config;\n\n    return [\n        {\n            id: ids.tvSystem,\n            name: gettext('Video output mode'),\n            description: [\n                {\n                    label: gettext('Video output mode'),\n                    value: core.environment.tvsystem\n                }\n            ],\n            title: gettext('Video output mode'),\n            icon: 'theme-icon-display',\n            environment: {\n                tvsystem: '720p-60'\n            },\n            prepareForRender: function ( environment, callback ) {\n                callback(videoModes.map(function ( videoMode ) {\n                    return {\n                        value: videoMode.value,\n                        name: videoMode.name,\n                        selected: environment.tvsystem === videoMode.value\n                    };\n                }));\n            },\n            events: {\n                'select:item': function ( item ) {\n                    var option = this.section.options[videoModeOptionIndex];\n\n                    /* eslint no-useless-call: 0 */\n                    option.prepareForRender.call(option, {\n                        tvsystem: item.value\n                    }, function (data) {\n                        option.refresh(data);\n                    });\n\n                    // if ( !runtimeTvSystemSettings ) {\n                    //     config.api.actions.setInfo({\n                    //         description: [\n                    //             {\n                    //                 label: gettext('Video output mode'),\n                    //                 value: item.value\n                    //             }\n                    //         ]\n                    //     });\n                    // }\n                }\n            },\n            prepareForSave: function ( value, callback ) {\n                if ( runtimeTvSystemSettings ) {\n                    tvSystemOrigin = this.environment.tvsystem; /* save current value */\n                    saveRuntimeVideoMode(this.section.options[videoModeOptionIndex], value);\n                }\n\n                this.environment.tvsystem = value;\n\n                callback();\n            },\n            saveImmediate: runtimeTvSystemSettings,\n            requireDeviceReboot: !runtimeTvSystemSettings,\n            render: config.api.renders.popupSelect,\n            getter: config.api.getters.environment,\n            saver: runtimeTvSystemSettings ? videoModeSaver : config.api.savers.environment,\n            parent: ids.video\n        },\n        {\n            id: ids.graphicResolution,\n            name: gettext('Graphic resolution'),\n            title: gettext('Graphic resolution'),\n            description: [\n                {\n                    label: gettext('Graphic resolution'),\n                    value: core.environment.graphicres\n                }\n            ],\n            icon: 'theme-icon-display',\n            environment: {\n                graphicres: '720'\n            },\n            prepareForRender: function (environment, callback) {\n                callback(resolutionsProvider().map(function ( resolution ) {\n                    return {\n                        value: resolution.value,\n                        name: resolution.name,\n                        selected: environment.tvsystem === resolution.value\n                    };\n                }));\n            },\n            prepareForSave: function ( value, callback) {\n                this.environment.graphicres = value;\n\n                callback();\n            },\n            requireDeviceReboot: true,\n            render: config.api.renders.popupSelect,\n            getter: config.api.getters.environment,\n            saver: config.api.savers.environment,\n            parent: ids.video\n        },\n        require('./auto.frame.rate')(config)\n    ];\n}\n\nmodule.exports = function ( config ) {\n    var data;\n\n    gettext = require('mag-gettext').gettext;\n\n    data = {\n        id: 'video',\n        name: gettext('Video section'),\n        description: gettext('Video section general description'),\n        // sections   : [\n        //     {\n        //         id         : ids.video,\n        //         name       : gettext('Video'),\n        //         description: gettext('System section general description'),\n        //         icon       : 'theme-icon-monitor',\n        //         parent     : ids.root\n        //     }\n        // ],\n        options: generateOptions(config),\n        content: []\n    };\n\n    switch ( core.device.model ) {\n        case 'emulator':\n        case 'emulator_stb':\n        case 'AndroidSTB':\n        case 'AndroidAPP':\n            break;\n\n        default:\n            data.options.push(require('./digital.output')(config));\n            break;\n    }\n\n    return data;\n};\n","'use strict';\n\nvar gettext = require('mag-gettext').gettext,\n    data = [\n        {value: 'Auto', name: gettext('Auto')},\n        {value: 'PAL', name: 'PAL (576i)'},\n        {value: '576p-50', name: '576p-50'},\n        {value: '720p-50', name: '720p-50'},\n        {value: '1080i-50', name: '1080i-50'},\n        {value: '1080p-50', name: '1080p-50'},\n        {value: 'NTSC', name: 'NTSC (480i)'},\n        {value: '720p-60', name: '720p-60'},\n        {value: '1080i-60', name: '1080i-60'},\n        {value: '1080p-60', name: '1080p-60'}\n    ];\n\n\nswitch ( core.device.model ) {\n    case 'MAG250':\n        // supported video modes\n        // { value: 'PAL', name: 'PAL (576i)' },\n        // { value: '576p-50', name: '576p-50' },\n        // { value: '720p-50', name: '720p-50' },\n        // { value: '1080i-50', name: '1080i-50' },\n        // { value: 'NTSC', name: 'NTSC (480i)' },\n        // { value: '720p-60', name: '720p-60' },\n        // { value: '1080i-60', name: '1080i-60' }\n\n        // remove auto\n        data.splice(0, 1);\n        // remove 1080p-50\n        data.splice(4, 1);\n        // remove 1080p-60\n        data.pop();\n        break;\n\n    // remove 576p-50 video mode\n    // TODO: remove this code when MAG256 fix this video mode\n    case 'MAG256':\n    case 'MAG257':\n        data.splice(1, 1);\n        data.push({value: '3840x2160p25', name: '3840x2160p-25'});\n        data.push({value: '3840x2160p30', name: '3840x2160p-30'});\n        data.push({value: '3840x2160p50', name: '3840x2160p-50'});\n        data.push({value: '3840x2160p60', name: '3840x2160p-60'});\n        break;\n\n    case 'MAG351':\n    case 'MAG352':\n        data.push({value: '3840x2160p25', name: '3840x2160p-25'});\n        data.push({value: '3840x2160p30', name: '3840x2160p-30'});\n        data.push({value: '3840x2160p50', name: '3840x2160p-50'});\n        data.push({value: '3840x2160p60', name: '3840x2160p-60'});\n        break;\n\n\n    case 'AndroidSTB':\n    case 'emulator_stb':\n        data.push({value: '3840x2160p60', title: '3840x2160p-60'});\n        data.push({value: '4096x2160p60', title: '4096x2160p-60'});\n        break;\n}\n\n\nmodule.exports = data;\n","'use strict';\n\n\nvar gettext = require('mag-gettext').gettext,\n    graphicResolutions = [\n        {value: 'tvsystem_res', name: gettext('Original video resolution')},\n        {value: '720', name: '720x576'},\n        {value: '1280', name: '1280x720'},\n        {value: '1920', name: '1920x1080'}\n    ];\n\nmodule.exports = function () {\n    var data = graphicResolutions.slice(0);\n\n    switch ( core.environment.tvsystem ) {\n        case 'PAL':\n        case 'NTSC':\n        case '576p-50':\n            graphicResolutions.splice(2, 2);\n            break;\n\n        case '720p-50':\n        case '720p-60':\n            graphicResolutions.splice(3, 1);\n            break;\n    }\n\n    return data;\n};\n","'use strict';\n\n\nvar ids = require('../identifiers'),\n    frameRates = {\n        Disabled: 0,\n        '50_60': 6,\n        '24_50_60': 7,\n        '24_50': 3,\n        '24_60': 5\n    },\n    gettext = require('mag-gettext').gettext;\n\n\nmodule.exports = function ( config ) {\n    var autoFrameRateVarName = 'auto_framerate',\n        environment = {};\n\n    environment[autoFrameRateVarName] = 'Disabled';\n\n    return {\n        id: 'autoFrameRate',\n        advanced: true,\n        name: gettext('Auto frame rate'),\n        title: gettext('Auto frame rate'),\n        description: [\n            {\n                label: gettext('Auto frame rate'),\n                value: core.environment[autoFrameRateVarName]\n            }\n        ],\n        icon: 'theme-icon-display',\n        environment: environment,\n        prepareForRender: function ( env, callback ) {\n            var graphicResolutions = [\n                {value: 'Disabled', name: gettext('Disabled'), selected: env[autoFrameRateVarName] === 'Disabled'},\n                {value: '50_60', name: '50/60 Hz', selected: env[autoFrameRateVarName] === '50_60'},\n                {value: '24_50_60', name: '24/50/60 Hz', selected: env[autoFrameRateVarName] === '24_50_60'},\n                {value: '24_50', name: '24/50 Hz', selected: env[autoFrameRateVarName] === '24_50'},\n                {value: '24_60', name: '24/60 Hz', selected: env[autoFrameRateVarName] === '24_60'}\n            ];\n\n            callback(graphicResolutions);\n        },\n        prepareForSave: function ( value, callback ) {\n            this.environment[autoFrameRateVarName] = value;\n            gSTB.SetAutoFrameRate(frameRates[value]);\n\n            callback();\n        },\n        render: config.api.renders.popupSelect,\n        getter: config.api.getters.environment,\n        saver: config.api.savers.environment,\n        parent: ids.video\n    };\n};\n","'use strict';\n\n\nmodule.exports = function ( config ) {\n    var ids = require('../identifiers'),\n        gettext = require('mag-gettext').gettext,\n        forceDviVarName = 'force_dvi',\n        environment = {};\n\n    environment[forceDviVarName] = '0';\n\n    return {\n        id: 'digitalOutput',\n        advanced: true,\n        name: gettext('HDMI/DVI'),\n        title: gettext('HDMI/DVI'),\n        description: [\n            {\n                label: gettext('HDMI/DVI'),\n                value: core.environment[forceDviVarName] === '0' ? 'HDMI' : 'DVI'\n            }\n        ],\n        icon: 'theme-icon-display',\n        environment: environment,\n        prepareForRender: function ( env, callback ) {\n            var enabled = env[forceDviVarName] === '1',\n                options = [\n                    {value: '0', name: gettext('HDMI'), selected: !enabled},\n                    {value: '1', name: 'DVI', selected: enabled}\n                ];\n\n            callback(options);\n        },\n        prepareForSave: function ( value, callback) {\n            this.environment[forceDviVarName] = value;\n\n            callback();\n        },\n        requireDeviceReboot: true,\n        render: config.api.renders.popupSelect,\n        getter: config.api.getters.environment,\n        saver: config.api.savers.environment,\n        parent: ids.video\n    };\n};\n"],"sourceRoot":""}