{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/mag-gettext/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./node_modules/cjs-gettext/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","Gettext","loader","prepare","data","gettext","_","pgettext","ngettext","defaultLanguage","load","config","callback","xhr","ext","path","XMLHttpRequest","onload","jsonParseError","json","JSON","parse","responseText","error","onerror","events","emit","ontimeout","open","send","onSettingsInit","core","environment","language","id","description","options","model","device","push","optionEnvironment","mount_media_ro","icon","requireDeviceReboot","prepareForRender","render","selected","prepareForSave","save","this","api","renders","popupSelect","getters","saver","savers","parent","generateStorageAccessModeOption","actions","clearUserData","confirmation","title","result","requirePortalReboot","confirm","reload","reboot","resetUserFs","addListener","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","index","event","Array","slice","constructor","meta","msgId","context","plural","evalResult","eval"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","'use strict';\n\nfunction generateStorageAccessModeOption ( config ) {\n    var gettext = require('mag-gettext').gettext,\n\n        envVarName        = 'mount_media_ro',\n        optionEnvironment = {};\n\n    // default value\n    optionEnvironment[envVarName] = 'false';\n\n    return {\n        id: 'storageAccessMode',\n        icon: 'theme-icon-categories-rotate',\n        name: gettext('Storage access mode'),\n        description: gettext(\n            'Setting the access option for the data storage connected to the USB port of the device: read-only and full access.'\n        ),\n        requireDeviceReboot: true,\n        environment: optionEnvironment,\n        prepareForRender: function ( environment, render ) {\n            var preparedData = [\n                {name: gettext('Read only'), value: 'true', selected: environment[envVarName] === 'true'},\n                {name: gettext('Full access'), value: 'false', selected: environment[envVarName] === 'false'}\n            ];\n\n            render(preparedData);\n        },\n        prepareForSave: function ( value, save ) {\n            this.environment[envVarName] = value;\n\n            save();\n        },\n        render: config.api.renders.popupSelect,\n        getter: config.api.getters.environment,\n        saver: config.api.savers.environment,\n        parent: 'system'\n    };\n}\n\n\n// public interface\nmodule.exports = {\n    onSettingsInit: function ( config, callback ) {\n        require('mag-gettext').load({\n            name: core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            var data = {\n                    id: 'systemMag',\n                    name: 'system section',\n                    description: 'system section general description',\n                    options: []\n                },\n                model = core.device.model,\n                gettext = require('mag-gettext').gettext;\n\n            if ( model !== 'emulator' && model !== 'emulator_stb' ) {\n                data.options.push(generateStorageAccessModeOption(config));\n            }\n\n            if ( config.api.actions.clearUserData ) {\n                data.options.push({\n                    id: 'clearUserData',\n                    name: gettext('Clear user data'),\n                    description: gettext(\n                        'User data will be permanently deleted (logins, passwords, location, favorite channels, Internet bookmarks, etc.).'\n                    ),\n                    icon: 'theme-icon-clear',\n                    confirmation: {\n                        title: gettext('Clear data?'),\n                        callback: function ( result ) {\n                            if ( result ) {\n                                config.api.actions.clearUserData();\n                            }\n                        }\n                    },\n                    requirePortalReboot: true,\n                    render: config.api.renders.confirm,\n                    parent: 'system'\n                });\n            }\n\n            if ( model !== 'emulator' && model !== 'emulator_stb' ) {\n                if ( config.api.actions.reload ) {\n                    data.options.push({\n                        id: 'restartPortal',\n                        name: gettext('Restart portal'),\n                        description: gettext(\n                            'Exit the current portal, and a list of available portals will be displayed. ' +\n                            'This is necessary if you change the language, for example.'\n                        ),\n                        icon: 'theme-icon-reload',\n                        confirmation: {\n                            title: gettext('Restart portal?'),\n                            callback: function ( result ) {\n                                if ( result ) {\n                                    config.api.actions.reload();\n                                }\n                            }\n                        },\n                        render: config.api.renders.confirm,\n                        parent: 'system'\n                    });\n                }\n            }\n\n            if ( config.api.actions.reboot ) {\n                if ( model !== 'emulator' && model !== 'emulator_stb' ) {\n                    data.options.push({\n                        id: 'rebootDevice',\n                        name: gettext('Reboot device'),\n                        description: gettext(\n                            'Click or press \"ok\" to reboot the device.'\n                        ),\n                        icon: 'theme-icon-reboot',\n                        confirmation: {\n                            title: gettext('Reboot device?'),\n                            callback: function ( result ) {\n                                if ( result ) {\n                                    config.api.actions.reboot();\n                                }\n                            }\n                        },\n                        render: config.api.renders.confirm,\n                        parent: 'system'\n                    });\n                } else {\n                    data.options.push({\n                        id: 'restartPortal',\n                        name: gettext('Restart portal'),\n                        description: gettext(\n                            'Exit the current portal, and a list of available portals will be displayed. ' +\n                            'This is necessary if you change the language, for example.'\n                        ),\n                        icon: 'theme-icon-reload',\n                        confirmation: {\n                            title: gettext('Restart portal?'),\n                            callback: function ( result ) {\n                                if ( result ) {\n                                    config.api.actions.reboot();\n                                }\n                            }\n                        },\n                        render: config.api.renders.confirm,\n                        parent: 'system'\n                    });\n                }\n            }\n\n            if ( config.api.actions.resetUserFs ) {\n                data.options.push(                   {\n                    id: 'resetDeviceUserSettings',\n                    name: gettext('Reset user settings'),\n                    description: gettext('Reset to factory settings'),\n                    icon: 'theme-icon-reset',\n                    confirmation: {\n                        title: gettext('Reset settings? All data will be erased.'),\n                        callback: function ( result ) {\n                            if ( result ) {\n                                config.api.actions.resetUserFs();\n                            }\n                        }\n                    },\n                    render: config.api.renders.confirm,\n                    parent: 'system'\n                });\n            }\n\n            callback(null, data);\n        });\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n"],"sourceRoot":""}