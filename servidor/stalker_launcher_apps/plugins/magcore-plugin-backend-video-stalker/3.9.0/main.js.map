{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/request.js","webpack:///./src/js/main.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/provider.js","webpack:///./src/js/prepareUrl.js","webpack:///./src/js/video.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","url","config","linkName","links","abort","core","backend","request","method","version","body","onload","error","response","onerror","ontimeout","gettextWrapper","Provider","provider","sortByQuality","array","list","forEach","item","type","push","sort","itemA","itemB","quality","width","search","callback","onAppInit","onContentBoardInit","done","load","environment","language","path","configProvider","ready","gettext","api","screen","height","getList","limit","sortby","data","length","map","video","icon","images","genres","meta","index","genre","age","year","year_end","duration","rating_kinopoisk","rating_imdb","censored","category","accessControl","state","normal","active","cover","stalker","host","id","layout","layouts","geometry","horizontal","original_name","description","join","image","files","is_tv_series","getSeasons","seasons","season","last_watched_season_id","getSeries","seriesError","seriesList","series","last_watched_episode_id","getUrl","getEpisode","seasonId","episodeId","episode","onClick","intentConfig","action","mime","this","intent","Emitter","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","jsonParseError","json","JSON","parse","responseText","events","emit","open","send","addListener","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","undefined","event","Array","slice","constructor","msgId","context","plural","evalResult","eval","prepareUrl","Video","requestLinks","offset","paging","total","getCategories","getGenres","names","indexOf","splice","getSections","resource","params","screenshots","refreshData","changeFlags","stringify","keys","changeWatchedFile","file","watched_time","movie_watched_status","watched_status","last_watched_file_id","progress","sendStatistic","media_id","session_id","changeWatchedSeason","watched","fileId"],"mappings":"2BACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,YAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,kCChFAhC,EAAAD,QAAA,SAAAkC,EAAAC,EAAAC,EAAAC,IACAA,KAAA,IACAD,KAAA,UAGAC,EAAAD,GAAAE,QAGAD,EAAAD,GAAAG,KAAAC,QAAAC,QACAP,EACA,CACAQ,OAAAP,EAAAO,OACAC,QAAA,EACAC,KAAAT,EAAAS,KACAC,OAAA,SAAAC,EAAAC,GACAA,MAAAD,QACAA,GAAA,GAGAX,EAAAU,OAAAC,EAAAC,GACAV,EAAAD,GAAA,MAEAY,QAAA,SAAAF,GAEAX,EAAAa,SACAb,EAAAa,SAAA,GAEAX,EAAAD,GAAA,MAEAa,UAAA,WAEAd,EAAAa,SACAb,EAAAa,SAAA,GAEAX,EAAAD,GAAA,uCC1BA,IAAAc,EAAqBpD,EAAQ,GAC7BqD,EAAerD,EAAQ,GACvBsD,EAAA,GAGA,SAAAC,EAAAC,GACA,IAAAC,EAAA,GAoBA,OAlBAD,EAAAE,QAAA,SAAAC,GACA,UAAAA,EAAAC,MACAH,EAAAI,KAAAF,KAIAF,EAAAK,KAAA,SAAAC,EAAAC,GACA,OAAAA,EAAAC,QAIAF,EAAAE,QAIAD,EAAAC,QAAAC,MAAAH,EAAAE,QAAAC,OAHA,EAJA,IAUAT,EAsNAH,EAAAa,OAAA,SAAA9B,EAAA+B,GACAA,GAAA,IAIAjE,EAAAD,QAAA,CACAmE,UAAA,SAAAhC,EAAA+B,GACAA,EAAA,SAAAf,IAGAiB,mBAAA,SAAAjC,EAAAkC,GACAnB,EAAAoB,KAAA,CACA7D,KAAA8B,KAAAgC,YAAAC,SACAC,KAAAtC,EAAAsC,KAAA,QACS,WAhOT,IAAAC,EAAAC,EACAC,EAKAC,EACAJ,EAPAC,EAiOAvC,EAjOAwC,EAiOAN,EAhOAO,EAAA1B,EAAA0B,QAKAC,EAAAH,EAAAG,IACAJ,EAAAC,EAAAD,KAAA,OAAAK,OAAAC,OAAA,IAEA5B,EAAArB,UAAAkD,QAPA,CACAC,MAAA,GACAC,OAAA,SAKA,SAAApC,EAAAqC,GACA,IAAAhD,GAEAW,GAAAqC,EAAAC,SACAjD,EAAA,CACAiB,WACA+B,OAAAE,IAAA,SAAAC,GACA,IAEAC,EAAAC,EAAAC,EAFAC,EAAA,GACAC,EAAA,EA4CA,OAzCAF,EAAAH,EAAAG,OAAAJ,IAAA,SAAAO,GACA,OAAAA,EAAAnF,OAGA6E,EAAAO,KACAH,EAAA/B,KAAA2B,EAAAO,KAGAP,EAAAQ,MACAJ,EAAA/B,KAAA2B,EAAAS,SAAAT,EAAAQ,KAAA,MAAAR,EAAAS,SAAAT,EAAAQ,MAGAR,EAAAU,UACAN,EAAA/B,KAAA2B,EAAAU,SAAA,IAAApB,EAAA,QAGAU,EAAAW,kBACAP,EAAA/B,KAAA,aAAA2B,EAAAW,kBAGAX,EAAAY,aACAR,EAAA/B,KAAA,QAAA2B,EAAAY,cAGAZ,EAAAa,UAAAb,EAAAc,UAAAd,EAAAc,SAAAD,YAAA5D,KAAA8D,cAAAC,MACAf,EAAA,CACAgB,OAAA9B,EAAA,sBACA+B,OAAA/B,EAAA,6BAEqBa,EAAAmB,MACrBjB,EAAA,CACAe,OAAAhE,KAAAmE,QAAAC,KAAArB,EAAAmB,MACAD,OAAAjE,KAAAmE,QAAAC,KAAArB,EAAAmB,OAGAlB,EAAA,CACAgB,OAAA9B,EAAA,uBACA+B,OAAA/B,EAAA,8BAIA,CACAmC,GAAAtB,EAAAsB,GACAC,OAAAhC,EAAAiC,QAAAxB,MACAyB,SAAAlC,EAAAkC,SAAAC,WACA7B,KAAA,CACA1E,KAAA6E,EAAA7E,KAAA6E,EAAA7E,KAAA6E,EAAA2B,cACAC,YAAAzB,EAAA0B,KAAA,MACA5B,OACA6B,MAAA5B,EACAE,OACAJ,QACApD,IAAA,SAAAgC,GACA,IAAAmD,EAEA/B,EAAAgC,aACAhC,EAAAiC,WAAA,SAAAzE,EAAA0E,GACA,IAAAC,EAEA,IAAA3E,GAAA0E,EAAApC,OAAA,CAEA,GADAqC,EAAAD,EAAA,GACAlC,EAAAoC,uBACA,IAAA/B,EAAA,EAAgEA,EAAA6B,EAAApC,OAAwBO,IACxF,GAAA6B,EAAA7B,GAAAiB,KAAAtB,EAAAoC,uBAAA,CACAD,EAAAD,EAAA7B,GAEA,MAIAL,EAAAqC,UAAAF,EAAAb,GAAA,SAAAgB,EAAAC,GACA,IAAAC,EAEA,IAAAF,GAAAC,EAAAzC,OAAA,CACA,GAAAE,EAAAyC,yBACA,IAAApC,EAAA,EAAwEA,EAAAkC,EAAAzC,OAA2BO,IACnG,GAAAkC,EAAAlC,GAAAiB,KAAAtB,EAAAyC,wBAAA,CACAD,EAAAD,EAAAlC,GACA,YAIAmC,EAAAD,EAAA,GAIAC,EAAAT,OAAAS,EAAAT,MAAAjC,QACAiC,EAAAhE,EAAAyE,EAAAT,QACAjC,SACAiC,EAAA,GAAAnF,IACAgC,GAAA,EAAAmD,EAAA,GAAAnF,KAEAoD,EAAA0C,OAAAX,EAAA,GAAAT,GAAA1C,IAIAoB,EAAA2C,WACA,CACAC,SAAAT,EAAAb,GACAuB,UAAAL,EAAAnC,GAAAiB,IAEA,SAAA9D,EAAAsF,GACAtF,KACAuE,EAAAhE,EAAA+E,EAAAf,QACAjC,OACAiC,EAAA,GAAAnF,IACAgC,GAAA,EAAAmD,EAAA,GAAAnF,KAEAoD,EAAA0C,OAAAX,EAAA,GAAAT,GAAA1C,GAGAA,GAAA,YAYiCoB,EAAA+B,MAAAjC,QACjCiC,EAAAhE,EAAAiC,EAAA+B,QACAjC,SACAiC,EAAA,GAAAnF,IACAgC,GAAA,EAAAmD,EAAA,GAAAnF,KAEAoD,EAAA0C,OAAAX,EAAA,GAAAT,GAAA1C,IAIAA,GAAA,KAKAmE,QAAA,WACA,IAAAC,EAAA,CACAC,OAAA,YACAC,KAAA,OACArD,KAAAsD,KAAAtD,KAAAG,QAGAA,EAAAa,UAAAb,EAAAc,UAAAd,EAAAc,SAAAD,YAAA5D,KAAA8D,cAAAC,MACA/D,KAAA8D,cAAA5D,QAAA,SAAAK,GACAA,GACAP,KAAAmG,OAAAJ,KAIA/F,KAAAmG,OAAAJ,SAQAnD,KAAAxB,KACA,CACAkD,OAAAhC,EAAAiC,QAAAxB,MACAyB,SAAAlC,EAAAkC,SAAAC,WACA7B,KAAA,CACA1E,KAAAmE,EAAA,YACAW,KAAA,CACAgB,OAAA9B,EAAA,eACA+B,OAAA/B,EAAA,uBAGA4D,QAAA,WACA9F,KAAAmG,OAAA,CACAH,OAAA,YACAC,KAAA,QAMA7D,GAAA,EAAAxC,IAEAwC,IAAA7B,EAAA,CACAM,WACA+B,KAAA,yCC3OA,IAAAwD,EAAc7I,EAAQ,GACtB8I,EAAc9I,EAAQ,GACtB+I,EAAA,IAAAF,EAeA,SAAAG,EAAA3D,GACA,IAAAP,EAAA,IAAAgE,EAAAzD,GAEA0D,EAAAE,EAAAF,EAAAjE,kBACAiE,EAAAG,SAAApE,EAAAoE,SACAH,EAAAI,SAAArE,EAAAqE,SAOAJ,EAAAK,gBAAA,KAYAL,EAAAvE,KAAA,SAAAnC,EAAA+B,GACA,IAAAiF,EAaAjF,KAAA,KACA/B,EAAAiH,IAAAjH,EAAAiH,KAAA,OACAjH,EAAAsC,KAAAtC,EAAAsC,MAAA,OAGAtC,EAAA1B,OAAAoI,EAAAK,iBAEAJ,IACA,OAAA5E,GACAA,EAAA,SAGAiF,EAAA,IAAAE,gBAEAxG,OAAA,WACA,IAAAyG,EAAAC,EAEA,IACAA,EAAAC,KAAAC,MAAAN,EAAAO,cACa,MAAA5G,GACbwG,EAAAxG,EAGAwG,EACAH,EAAAnG,QAAAsG,IAEAR,EAAAS,GACA,OAAArF,GACAA,EAAA,MAIA2E,EAAAc,OAAA,SAEAd,EAAAe,KAAA,UAKAT,EAAAlG,UAAAkG,EAAAnG,QAAA,SAAAF,GACAgG,IAEA,OAAA5E,GACAA,EAAA,MAIA2E,EAAAc,OAAA,UAEAd,EAAAe,KAAA,QAAA9G,IAIAqG,EAAAU,KAAA,MAAA1H,EAAAsC,KAAA,IAAAtC,EAAA1B,KAAA,IAAA0B,EAAAiH,KAAA,GACAD,EAAAW,KAAA,QAMA7J,EAAAD,QAAA6I,gCCzGA,SAAAF,IAwBAF,KAAAkB,OAAA,GAIAhB,EAAA7G,UAAA,CAaAiI,YAAA,SAAAtJ,EAAAyD,GAaAuE,KAAAkB,OAAAlJ,GAAAgI,KAAAkB,OAAAlJ,IAAA,GAEAgI,KAAAkB,OAAAlJ,GAAAkD,KAAAO,IAcA8F,KAAA,SAAAvJ,EAAAyD,GAEA,IAAA+F,EAAAxB,KAeAA,KAAAkB,OAAAlJ,GAAAgI,KAAAkB,OAAAlJ,IAAA,GAEAgI,KAAAkB,OAAAlJ,GAAAkD,KAAA,SAAAuG,IACAD,EAAAE,eAAA1J,EAAAyJ,GACAhG,EAAAkG,MAAAH,EAAAI,cAgBAC,aAAA,SAAAC,GACA,IAAA9J,EAcA,IAAAA,KAAA8J,EACAA,EAAAxI,eAAAtB,IACAgI,KAAAsB,YAAAtJ,EAAA8J,EAAA9J,KAeA0J,eAAA,SAAA1J,EAAAyD,GAiBAuE,KAAAkB,OAAAlJ,KAEAgI,KAAAkB,OAAAlJ,GAAAgI,KAAAkB,OAAAlJ,GAAA+J,OAAA,SAAAC,GAA0F,OAAAA,IAAAvG,IAE1F,IAAAuE,KAAAkB,OAAAlJ,GAAA2E,SAEAqD,KAAAkB,OAAAlJ,QAAAiK,KAwDAd,KAAA,SAAAnJ,GACA,IACAkF,EADAgF,EAAAlC,KAAAkB,OAAAlJ,GAaA,GAAAkK,EAOA,IAAAhF,EAAA,EAA4BA,EAAAgF,EAAAvF,OAAsBO,IAQlDgF,EAAAhF,GAAAyE,MAAA3B,KAAAmC,MAAA9I,UAAA+I,MAAAxK,KAAAgK,UAAA,MAQA1B,EAAA7G,UAAAgJ,YAAAnC,EAIA1I,EAAAD,QAAA2I,6DCrQA,SAAAC,QAAAzG,QACA,IAAAgD,KAAAO,KAGAvD,eAAA,GACAgD,KAAAhD,OAAAgD,MAAA,GACAA,KAAA,IAAAA,KAAA,QAGAO,KAAAvD,OAAAuD,KASA+C,KAAA7D,QAAA,SAAAmG,GACA,OAAA5F,KAAA,IAAA4F,OAYAtC,KAAAO,SAAA,SAAAgC,EAAAD,GACA,OAAA5F,KAAA6F,IAAA7F,KAAA6F,GAAAD,OAaAtC,KAAAQ,SAAA,SAAA8B,MAAAE,OAAA9J,OAIA,IAAAQ,EAAAuJ,WAQA,OAAA/F,MAAAO,MAAAP,KAAA,IAAA4F,QACAG,WAAAC,KAAA,OAAAhK,MAAA,KAAiDuE,KAAAuF,QAEjD,kBAAAC,aACAA,wBAIA/F,KAAA,IAAA4F,OAAAG,aAIA,IAAA/J,MAAA4J,MAAAE,QAMArC,QAAA9G,UAAAgJ,YAAAlC,QAIA3I,OAAAD,QAAA4I,sCC3FA,IAAAnG,EAAe3C,EAAQ,GACvBsL,EAAiBtL,EAAQ,GACzBuL,EAAYvL,EAAQ,GAGpB,SAAAqD,IACAsF,KAAA6C,aAAA,GAUAnI,EAAArB,UAAAkD,QAAA,SAAA7C,EAAA+B,IACA/B,KAAA,IACAoJ,OAAApJ,EAAAoJ,QAAA,EACApJ,EAAA8C,MAAA9C,EAAA8C,OAAA,EAEAxC,EACA2I,EAAA,SAAAjJ,GACA,CACAO,OAAA,MACAG,OAAA,SAAAC,EAAAC,GACA,IAAAoC,EAAA,GAEArC,GACAC,EAAAoC,KAAA3B,QAAA,SAAAC,GACA0B,EAAAxB,KAAA,IAAA0H,EAAA5H,MAIAS,EAAApB,EAAAqC,EAAArC,EAAA,EAAAC,EAAAyI,OAAAC,QAEAzI,QAAAkB,GAEA,UACAuE,KAAA6C,eAUAnI,EAAArB,UAAA4J,cAAA,SAAAxH,GACAzB,EACA,4CACA,CACAC,OAAA,MACAG,OAAAqB,EACAlB,QAAAkB,GAEA,gBACAuE,KAAA6C,eASAnI,EAAArB,UAAA6J,UAAA,SAAAzH,GACAzB,EACA,yBACA,CACAC,OAAA,MACAG,OAAA,SAAAC,EAAAC,GACA,IAEAoC,EAFAQ,EAAA,EACAiG,EAAA,GAGA,IAAA9I,EAEA,IADAqC,EAAApC,EAAAoC,KACgCQ,EAAAR,EAAAC,OAAqBO,KACrD,IAAAiG,EAAAC,QAAA1G,EAAAQ,GAAAlF,MACAmL,EAAAjI,KAAAwB,EAAAQ,GAAAlF,OAEA0E,EAAA2G,OAAAnG,EAAA,GACAA,KAKAzB,EAAApB,EAAAC,IAEAC,QAAAkB,GAEA,YACAuE,KAAA6C,eAIAnI,EAAArB,UAAAiK,YAAA,SAAA7H,GACAzB,EACA,2BACA,CACAC,OAAA,MACAG,OAAAqB,EACAlB,QAAAkB,GAEA,cACAuE,KAAA6C,eAKArL,EAAAD,QAAAmD,gCCnHAlD,EAAAD,QAAA,SAAAgM,EAAA7J,GACA,IACAV,EADAwK,EAAA,GAKA,IAAAxK,KAFAU,KAAA,GAGAV,GAAAU,EAAAV,IACAwK,EAAAtI,KAAAlC,EAAA,IAAAU,EAAAV,IAIA,OAAAuK,EAAA,IAAAC,EAAA9E,KAAA,oCCVA,IAAA1E,EAAc3C,EAAQ,GAatB,SAAAuL,EAAAlJ,GACA,IAAAV,EAIA,IAAAA,KAFAU,KAAA,GAGAsG,KAAAhH,GAAAU,EAAAV,GAGAU,EAAA+J,aAAA/J,EAAA+J,YAAA9G,SACAqD,KAAAyD,YAAA/J,EAAA+J,YAAA7G,IAAA,SAAAnD,GACA,OAAAK,KAAAmE,QAAAC,KAAAzE,KAIAuG,KAAA6C,aAAA,GASAD,EAAAvJ,UAAAqK,YAAA,SAAAjI,GACAzB,EACA,UAAAgG,KAAA7B,GACA,CACAlE,OAAA,MACAG,OAAAqB,EACAlB,QAAAkB,KAYAmH,EAAAvJ,UAAAsK,YAAA,SAAAjK,EAAA+B,GACA,IAAA+F,EAAAxB,KAEAhG,EACA,UAAAgG,KAAA7B,GACA,CACAlE,OAAA,MACAE,KAAA4G,KAAA6C,UAAAlK,GACAU,OAAA,SAAAC,EAAAC,IACAD,GAAAC,KAAAoC,MACAvE,OAAA0L,KAAAnK,GAAAqB,QAAA,SAAA/C,GACAwJ,EAAAxJ,GAAA0B,EAAA1B,KAIAyD,EAAApB,EAAAC,EAAAoC,OAEAnC,QAAAkB,KAaAmH,EAAAvJ,UAAAyK,kBAAA,SAAAC,EAAArK,EAAA+B,GACA,IAAA+F,EAAAxB,KAEAhG,EACA,UAAAgG,KAAA7B,GAAA,UAAA4F,EACA,CACA9J,OAAA,MACAE,KAAA4G,KAAA6C,UAAAlK,GACAU,OAAA,SAAAC,EAAAC,GACA,IAAAoC,GAEArC,GAAAC,IACAoC,EAAApC,EAAAoC,KAEA8E,EAAAwC,aAAAtK,EAAAsK,aACAtH,EAAAuH,uBACAzC,EAAA0C,eAAAxH,EAAAuH,sBAGAzC,EAAA2C,qBAAAJ,GAIAtI,EAAApB,EAAAqC,IAGAnC,QAAAkB,IAIA/B,EAAA0K,UAAA1K,EAAA0K,UAAA,IACApE,KAAAqE,cAAAN,IAQAnB,EAAAvJ,UAAAgL,cAAA,WACArK,EACA,aACA,CACAC,OAAA,OACAE,KAAA4G,KAAA6C,UAAA,CACA3I,KAAA,QACAqJ,SAAAtE,KAAA7B,KAEA/D,OAAA,SAAAC,EAAAC,GAlIA,IAAA6D,GAmIA9D,GAAAC,KAAAoC,OAnIAyB,EAoIA7D,EAAAoC,KAAA6H,WAnIAvK,EAAA,cAAAmE,EAAA,CACAlE,OAAA,SACAM,QAAA,SAAAF,YAgJAuI,EAAAvJ,UAAAmL,oBAAA,SAAAxF,EAAAtF,EAAA+B,GACAzB,EACA,UAAAgG,KAAA7B,GAAA,YAAAa,EACA,CACA/E,OAAA,MACAE,KAAA4G,KAAA6C,UAAAlK,GACAU,OAAA,SAAAC,EAAAC,GACAA,IACAA,EAAA,IAGAmB,EAAApB,EAAAC,EAAAoC,OAEAnC,QAAAkB,KAWAmH,EAAAvJ,UAAAyF,WAAA,SAAArD,GACAzB,EACA,UAAAgG,KAAA7B,GAAA,qBACA,CACAlE,OAAA,MACAG,OAAA,SAAAC,EAAAC,GACAmB,EAAApB,IAAA,GAAAC,EAAAoC,OAEAnC,QAAAkB,GAEA,aACAuE,KAAA6C,eAWAD,EAAAvJ,UAAA6F,UAAA,SAAAO,EAAAhE,GACAzB,EACA,UAAAgG,KAAA7B,GAAA,YAAAsB,EAAA,sBACA,CACAxF,OAAA,MACAG,OAAA,SAAAC,EAAAC,GACA,IAAA4C,EAAAW,EACA4G,EAAA/H,EAEApC,KAAA,GAEAD,IACAqC,EAAApC,EAAAoC,MAAA,IAEA3B,QAAA,SAAAC,GAGA,IAFA6C,EAAA,cACA4G,GAAA,EACAvH,EAAA,EAAwCA,EAAAlC,EAAA4D,MAAAjC,OAA2BO,IACnE,eAAAlC,EAAA4D,MAAA1B,GAAAgH,eAAA,CACArG,EAAA,UACA4G,GAAA,EACA,MAGA,GAAAA,EACA,IAAAvH,EAAA,EAA4CA,EAAAlC,EAAA4D,MAAAjC,OAA2BO,IACvE,iBAAAlC,EAAA4D,MAAA1B,GAAAgH,eAAA,CACArG,EAAA,YACA,MAIA7C,EAAAkJ,eAAArG,IAIApC,EAAApB,EAAAqC,IAEAnC,QAAAkB,GAEA,YACAuE,KAAA6C,eAWAD,EAAAvJ,UAAAmG,WAAA,SAAA9C,EAAAjB,GACAzB,EACA,UAAAgG,KAAA7B,GAAA,YAAAzB,EAAA+C,SAAA,aAAA/C,EAAAgD,UACA,CACAzF,OAAA,MACAG,OAAA,SAAAC,EAAAC,GAGAmB,EAAApB,GAFAC,KAAA,IAEAoC,OAEAnC,QAAAkB,GAEA,YACAuE,KAAA6C,eAWAD,EAAAvJ,UAAAkG,OAAA,SAAAmF,EAAAjJ,GACAzB,EACA,UAAAgG,KAAA7B,GAAA,UAAAuG,EAAA,QACA,CACAzK,OAAA,MACAG,OAAA,SAAAC,EAAAC,GACAmB,EAAApB,IAAA,KAAAC,EAAAoC,KAAAjD,MAEAc,QAAAkB,KAMAjE,EAAAD,QAAAqL","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","'use strict';\n\nmodule.exports = function ( url, config, linkName, links  ) {\n    links = links || {};\n    linkName = linkName || 'local';\n\n    if ( links[linkName] ) {\n        links[linkName].abort();\n    }\n\n    links[linkName] = core.backend.request(\n        url,\n        {\n            method: config.method,\n            version: 3,\n            body: config.body,\n            onload: function ( error, response ) {\n                if ( !response || response.error ) {\n                    error = true;\n                }\n\n                config.onload(error, response);\n                links[linkName] = null;\n            },\n            onerror: function ( error ) {\n                debug.log(error);\n                if ( config.onerror ) {\n                    config.onerror(true);\n                }\n                links[linkName] = null;\n            },\n            ontimeout: function () {\n                debug.log('ontimeout');\n                if ( config.onerror ) {\n                    config.onerror(true);\n                }\n                links[linkName] = null;\n            }\n        }\n    );\n};\n","/**\n *  Video plugin or system module implementation.\n *  Same interface with video provider from embedded magcore.\n */\n\n'use strict';\n\n/* eslint max-lines-per-function: 0 */\n/* eslint camelcase: 0 */\n\nvar gettextWrapper = require('mag-gettext'),\n    Provider = require('./provider'),\n    provider = {};\n\n\nfunction sortByQuality ( array ) {\n    var list = [];\n\n    array.forEach(function ( item ) {\n        if ( item.type === 'video' ) {\n            list.push(item);\n        }\n    });\n\n    list.sort(function ( itemA, itemB ) {\n        if ( !itemB.quality ) {\n            return 0;\n        }\n\n        if ( !itemA.quality ) {\n            return -1;\n        }\n\n        return itemB.quality.width - itemA.quality.width;\n    });\n\n    return list;\n}\n\n\nfunction getLauncherProvider ( configProvider, ready ) {\n    var gettext = gettextWrapper.gettext,\n        query = {\n            limit: 10,\n            sortby: 'added'\n        },\n        api = configProvider.api,\n        path = configProvider.path + 'img/' + screen.height + '/';\n\n    Provider.prototype.getList(query, function ( error, data ) {\n        var config;\n\n        if ( !error && data.length ) {\n            config = {\n                provider: provider,\n                data: data.map(function ( video ) {\n                    var meta = [],\n                        index = 0,\n                        icon, images, genres;\n\n                    genres = video.genres.map(function ( genre ) {\n                        return genre.name;\n                    });\n\n                    if ( video.age ) {\n                        meta.push(video.age);\n                    }\n\n                    if ( video.year ) {\n                        meta.push(video.year_end ? video.year + ' - ' + video.year_end : video.year);\n                    }\n\n                    if ( video.duration ) {\n                        meta.push(video.duration + ' ' + gettext('min'));\n                    }\n\n                    if ( video.rating_kinopoisk ) {\n                        meta.push('kinopoisk ' + video.rating_kinopoisk);\n                    }\n\n                    if ( video.rating_imdb ) {\n                        meta.push('IMDB ' + video.rating_imdb);\n                    }\n\n                    if ( (video.censored || (video.category && video.category.censored)) && !core.accessControl.state ) {\n                        icon = {\n                            normal: path + 'parents-control.png',\n                            active: path + 'parents-control-focus.png'\n                        };\n                    } else if ( video.cover ) {\n                        images = {\n                            normal: core.stalker.host + video.cover,\n                            active: core.stalker.host + video.cover\n                        };\n                    } else {\n                        icon = {\n                            normal: path + 'film-placeholder.png',\n                            active: path + 'film-placeholder-focus.png'\n                        };\n                    }\n\n                    return {\n                        id: video.id,\n                        layout: api.layouts.video,\n                        geometry: api.geometry.horizontal,\n                        data: {\n                            name: video.name ? video.name : video.original_name,\n                            description: genres.join(', '),\n                            icon: icon,\n                            image: images,\n                            meta: meta,\n                            video: video,\n                            url: function ( callback ) {\n                                var files;\n\n                                if ( video.is_tv_series ) {\n                                    video.getSeasons(function ( error, seasons ) {\n                                        var season;\n\n                                        if ( !error && seasons.length ) {\n                                            season = seasons[0];\n                                            if ( video.last_watched_season_id ) {\n                                                for ( index = 0; index < seasons.length; index++ ) {\n                                                    if ( seasons[index].id === video.last_watched_season_id ) {\n                                                        season = seasons[index];\n\n                                                        break;\n                                                    }\n                                                }\n                                            }\n                                            video.getSeries(season.id, function ( seriesError, seriesList ) {\n                                                var series;\n\n                                                if ( !seriesError && seriesList.length ) {\n                                                    if ( video.last_watched_episode_id ) {\n                                                        for ( index = 0; index < seriesList.length; index++ ) {\n                                                            if ( seriesList[index].id === video.last_watched_episode_id ) {\n                                                                series = seriesList[index];\n                                                                break;\n                                                            }\n                                                        }\n                                                    } else {\n                                                        series = seriesList[0];\n                                                    }\n\n\n                                                    if ( series.files && series.files.length ) {\n                                                        files = sortByQuality(series.files);\n                                                        if ( files.length ) {\n                                                            if ( files[0].url ) {\n                                                                callback(false, files[0].url);\n                                                            } else {\n                                                                video.getUrl(files[0].id, callback);\n                                                            }\n                                                        }\n                                                    } else {\n                                                        video.getEpisode(\n                                                            {\n                                                                seasonId: season.id,\n                                                                episodeId: series[index].id\n                                                            },\n                                                            function ( error, episode ) {\n                                                                if ( !error ) {\n                                                                    files = sortByQuality(episode.files);\n                                                                    if ( files.length ) {\n                                                                        if ( files[0].url ) {\n                                                                            callback(false, files[0].url);\n                                                                        } else {\n                                                                            video.getUrl(files[0].id, callback);\n                                                                        }\n                                                                    } else {\n                                                                        callback(true);\n                                                                    }\n                                                                }\n                                                            }\n                                                        );\n                                                    }\n\n                                                }\n                                            });\n                                        }\n\n                                    });\n                                } else if ( video.files.length ) {\n                                    files = sortByQuality(video.files);\n                                    if ( files.length ) {\n                                        if ( files[0].url ) {\n                                            callback(false, files[0].url);\n                                        } else {\n                                            video.getUrl(files[0].id, callback);\n                                        }\n                                    }\n                                } else {\n                                    callback(true);\n                                }\n                            }\n\n                        },\n                        onClick: function () {\n                            var intentConfig = {\n                                action: 'videoClub',\n                                mime: 'info',\n                                data: this.data.video\n                            };\n\n                            if ( (video.censored || (video.category && video.category.censored)) && !core.accessControl.state ) {\n                                core.accessControl.request(function ( error ) {\n                                    if ( !error ) {\n                                        core.intent(intentConfig);\n                                    }\n                                });\n                            } else {\n                                core.intent(intentConfig);\n                            }\n\n                        }\n                    };\n                })\n            };\n\n            config.data.push(\n                {\n                    layout: api.layouts.video,\n                    geometry: api.geometry.horizontal,\n                    data: {\n                        name: gettext('See more'),\n                        icon: {\n                            normal: path + 'see-more.png',\n                            active: path + 'see-more-focus.png'\n                        }\n                    },\n                    onClick: function () {\n                        core.intent({\n                            action: 'videoClub',\n                            mime: ''\n                        });\n                    }\n                }\n            );\n\n            ready(false, config);\n        } else {\n            ready(!!error, {\n                provider: provider,\n                data: []\n            });\n        }\n    });\n}\n\nprovider.search = function ( config, callback ) {\n    callback(true);\n};\n\n\nmodule.exports = {\n    onAppInit: function ( config, callback ) {\n        callback(null, new Provider());\n    },\n\n    onContentBoardInit: function ( config, done ) {\n        gettextWrapper.load({\n            name: core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            getLauncherProvider(config, done);\n        });\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","'use strict';\n\n/* eslint max-lines-per-function: 0 */\n/* eslint camelcase: 0 */\n\nvar request  = require('./request'),\n    prepareUrl = require('./prepareUrl'),\n    Video = require('./video');\n\n\nfunction Provider () {\n    this.requestLinks = {};\n}\n\n\n/**\n * Get videos list.\n *\n * @param {Object} config - request config\n * @param {Function} callback - result handler\n */\nProvider.prototype.getList = function ( config, callback ) {\n    config = config || {};\n    config.offset = config.offset || 0;\n    config.limit = config.limit || 7;\n\n    request(\n        prepareUrl('movies', config),\n        {\n            method: 'GET',\n            onload: function ( error, response ) {\n                var data = [];\n\n                if ( !error ) {\n                    response.data.forEach(function ( item ) {\n                        data.push(new Video(item));\n                    });\n                }\n\n                callback(error, data, error ? 0 : response.paging.total);\n            },\n            onerror: callback\n        },\n        'getList',\n        this.requestLinks\n    );\n};\n\n\n/**\n * Get categories list.\n *\n * @param {Function} callback - result handler\n */\nProvider.prototype.getCategories = function ( callback ) {\n    request(\n        'movie-categories?fields=name,id&limit=200',\n        {\n            method: 'GET',\n            onload: callback,\n            onerror: callback\n        },\n        'getCategories',\n        this.requestLinks\n    );\n};\n\n/**\n * Get genres list.\n *\n * @param {Function} callback - result handler\n */\nProvider.prototype.getGenres = function ( callback ) {\n    request(\n        'movie-genres?limit=200',\n        {\n            method: 'GET',\n            onload: function ( error, response ) {\n                var index = 0,\n                    names = [],\n                    data;\n\n                if ( !error ) {\n                    data = response.data;\n                    for ( index; index < data.length; index++ ) {\n                        if ( names.indexOf(data[index].name) === -1 ) {\n                            names.push(data[index].name);\n                        } else {\n                            data.splice(index, 1);\n                            index--;\n                        }\n                    }\n                }\n\n                callback(error, response);\n            },\n            onerror: callback\n        },\n        'getGenres',\n        this.requestLinks\n    );\n};\n\nProvider.prototype.getSections = function ( callback ) {\n    request(\n        'movie-sections?limit=200',\n        {\n            method: 'GET',\n            onload: callback,\n            onerror: callback\n        },\n        'getSections',\n        this.requestLinks\n    );\n};\n\n\nmodule.exports = Provider;\n","'use strict';\n\nmodule.exports = function ( resource, config ) {\n    var params = [],\n        key;\n\n    config = config || {};\n\n    for ( key in config ) {\n        if ( key && config[key] ) {\n            params.push(key + '=' + config[key]);\n        }\n    }\n\n    return resource + '?' + params.join('&');\n};\n","'use strict';\n\n/* eslint camelcase: 0 */\n\nvar request = require('./request');\n\n\nfunction deleteSession ( id ) {\n    request('media-info/' + id, {\n        method: 'DELETE',\n        onerror: function ( error ) {\n            console.log(error);\n        }\n    });\n}\n\n\nfunction Video ( config ) {\n    var key;\n\n    config = config || {};\n\n    for ( key in config ) {\n        this[key] = config[key];\n    }\n\n    if ( config.screenshots && config.screenshots.length ) {\n        this.screenshots = config.screenshots.map(function ( url ) {\n            return core.stalker.host + url;\n        });\n    }\n\n    this.requestLinks = {};\n}\n\n\n/**\n * Get and refill information about video.\n *\n * @param {Function} callback - result handler\n */\nVideo.prototype.refreshData = function ( callback ) {\n    request(\n        'movies/' + this.id,\n        {\n            method: 'GET',\n            onload: callback,\n            onerror: callback\n        }\n    );\n};\n\n\n/**\n * Change flags.\n *\n * @param {Object} config - request config\n * @param {Function} callback - result handler\n */\nVideo.prototype.changeFlags = function ( config, callback ) {\n    var self = this;\n\n    request(\n        'movies/' + this.id,\n        {\n            method: 'PUT',\n            body: JSON.stringify(config),\n            onload: function ( error, response ) {\n                if ( !error && response && response.data )  {\n                    Object.keys(config).forEach(function ( name ) {\n                        self[name] = config[name];\n                    });\n                }\n\n                callback(error, response.data);\n            },\n            onerror: callback\n        }\n    );\n};\n\n\n/**\n * Change watched file.\n *\n * @param {number} file - file id\n * @param {Object} config - request config\n * @param {Function} callback - result handler\n */\nVideo.prototype.changeWatchedFile = function ( file, config, callback ) {\n    var self = this;\n\n    request(\n        'movies/' + this.id + '/files/' + file,\n        {\n            method: 'PUT',\n            body: JSON.stringify(config),\n            onload: function ( error, response ) {\n                var data;\n\n                if ( !error && response ) {\n                    data = response.data;\n\n                    self.watched_time = config.watched_time;\n                    if ( data.movie_watched_status ) {\n                        self.watched_status = data.movie_watched_status;\n                    }\n\n                    self.last_watched_file_id = file;\n\n                }\n\n                callback(error, data);\n\n            },\n            onerror: callback\n        }\n    );\n\n    if ( config.progress && config.progress >= 70 ) {\n        this.sendStatistic(file);\n    }\n};\n\n\n/**\n * Send statistic.\n */\nVideo.prototype.sendStatistic = function () {\n    request(\n        'media-info',\n        {\n            method: 'POST',\n            body: JSON.stringify({\n                type: 'video',\n                media_id: this.id\n            }),\n            onload: function ( error, response ) {\n                if ( !error && response && response.data ) {\n                    deleteSession(response.data.session_id);\n                }\n            }\n        }\n    );\n};\n\n\n/**\n * Change watched season.\n *\n * @param {number} season - season id\n * @param {Object} config - request config\n * @param {Function} callback - result handler\n */\nVideo.prototype.changeWatchedSeason = function ( season, config, callback ) {\n    request(\n        'movies/' + this.id + '/seasons/' + season,\n        {\n            method: 'PUT',\n            body: JSON.stringify(config),\n            onload: function ( error, response ) {\n                if ( !response ) {\n                    response = {};\n                }\n\n                callback(error, response.data);\n            },\n            onerror: callback\n        }\n    );\n};\n\n\n/**\n * Get seasons list.\n *\n * @param {Function} callback - result handler\n */\nVideo.prototype.getSeasons = function ( callback ) {\n    request(\n        'movies/' + this.id + '/seasons?limit=200',\n        {\n            method: 'GET',\n            onload: function ( error, response ) {\n                callback(error, error ? [] : response.data);\n            },\n            onerror: callback\n        },\n        'getSeasons',\n        this.requestLinks\n    );\n};\n\n\n/**\n * Get series list.\n *\n * @param {number} seasonId - season id\n * @param {Function} callback - result handler\n */\nVideo.prototype.getSeries = function ( seasonId, callback ) {\n    request(\n        'movies/' + this.id + '/seasons/' + seasonId + '/episodes?limit=200',\n        {\n            method: 'GET',\n            onload: function ( error, response ) {\n                var index, state,\n                    watched, data;\n\n                response = response || {};\n\n                if ( !error ) {\n                    data = response.data || [];\n\n                    data.forEach(function ( item ) {\n                        state = 'not_watched';\n                        watched = true;\n                        for ( index = 0; index < item.files.length; index++ ) {\n                            if ( item.files[index].watched_status === 'watched' ) {\n                                state = 'watched';\n                                watched = false;\n                                break;\n                            }\n                        }\n                        if ( watched ) {\n                            for ( index = 0; index < item.files.length; index++ ) {\n                                if ( item.files[index].watched_status === 'not_ended' ) {\n                                    state = 'not_ended';\n                                    break;\n                                }\n                            }\n                        }\n                        item.watched_status = state;\n                    });\n                }\n\n                callback(error, data);\n            },\n            onerror: callback\n        },\n        'getSeries',\n        this.requestLinks\n    );\n};\n\n\n/**\n * Get episode information.\n *\n * @param {Object} data - request\n * @param {Function} callback - result handler\n */\nVideo.prototype.getEpisode = function ( data, callback ) {\n    request(\n        'movies/' + this.id + '/seasons/' + data.seasonId + '/episodes/' + data.episodeId,\n        {\n            method: 'GET',\n            onload: function ( error, response ) {\n                response = response || {};\n\n                callback(error, response.data);\n            },\n            onerror: callback\n        },\n        'getSeries',\n        this.requestLinks\n    );\n};\n\n\n/**\n * Get link to play.\n *\n * @param {number} fileId - file id\n * @param {Function} callback - result handler\n */\nVideo.prototype.getUrl = function ( fileId, callback ) {\n    request(\n        'movies/' + this.id + '/files/' + fileId + '/link',\n        {\n            method: 'GET',\n            onload: function ( error, response ) {\n                callback(error, error ? null : response.data.url);\n            },\n            onerror: callback\n        }\n    );\n};\n\n\nmodule.exports = Video;\n"],"sourceRoot":""}