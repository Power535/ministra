{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./src/js/modules/launcher.api.provider.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/modules/utils/eval.space.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","this","events","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","emit","index","event","Array","slice","constructor","onContentBoardInit","RESOLUTION","screen","height","pluginFS","core","plugins","fs","uniqueItemID","resources","openContentItem","resource","data","intentData","action","intent","error","config","gettextWrapper","load","environment","language","path","evalStorageCapacity","_","gettext","contentProvider","launcherAPI","api","layout","layouts","static","geometry","horizontal","setup","storageItemsAmount","shortcuts","id","icon","normal","active","onClick","onAppInit","getSwitchedStorageItem","storages","storageHeap","state","item","tmp","mountPoints","getMountPoints","keys","sn","label","vendor","model","isReadOnly","capacity","freeSize","size","serialNumber","some","mountPoint","splice","indexOf","onMount","forEach","provider","concat","Gettext","loader","prepare","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","jsonParseError","json","JSON","parse","responseText","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval","bytes","precision","kilobyte","toFixed","megabyte","gigabyte"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * Entry point for content provider plugin.\n * Consists of API initializer for Prime Launcher.\n */\n\n'use strict';\n\nmodule.exports = {\n    /** Initialization of API provider for external (Prime Launcher for now) subscriber. */\n    onContentBoardInit: require('./modules/launcher.api.provider')\n};\n","/**\n * Provide convenient API for Prime Launcher.\n * Use abstract data provider for data retrieving and handle it for Prime Launcher purposes.\n *\n * @module launcher.api.provider\n */\n\n/* eslint max-lines-per-function: off */\n\n'use strict';\n\nvar RESOLUTION   = screen.height,\n    pluginFS     = core.plugins.fs,\n    uniqueItemID = 1,\n    resources    = {\n        FAVORITES: 1,\n        SAMBA:     20,\n        NFS:       30,\n        UPNP:      40\n    };\n\n\n/**\n * Open content item (mounted storage or shortcut) via sending intent to application.\n *\n * @param {number|null} resource - resource type to open, if `null` -- open application itself\n * @param {Object} [data] - additional specific data for resource, e.g. flash drive's serial number\n */\nfunction openContentItem ( resource, data ) {\n    var intentData = {\n            action: 'explorer:openResource',\n            data: {\n                resource: resource\n            },\n            events: {}\n        },\n        property;\n\n    if ( data ) {\n        for ( property in data ) {\n            intentData.data[property] = data[property];\n        }\n    }\n\n    core.intent(intentData, function ( error ) {\n        if ( error ) {\n            console.log(error);\n        }\n    });\n}\n\n\nmodule.exports = function ( config, callback ) {\n    var gettextWrapper = require('mag-gettext');\n\n    gettextWrapper.load({\n        name: core.environment.language,\n        path: config.path + 'lang'\n    }, function () {\n        var Emitter             = require('cjs-emitter'),\n            evalStorageCapacity = require('./utils/eval.space'),\n            _                   = gettextWrapper.gettext,\n            contentProvider     = new Emitter(),\n            launcherAPI         = config.api,\n            layout              = launcherAPI.layouts.static,\n            geometry            = launcherAPI.geometry.horizontal,\n            setup               = {\n                // how many storages send to Leanback Launcher (max)\n                storageItemsAmount: 6,\n                shortcuts: [\n                    {\n                        id:       ++uniqueItemID,\n                        layout:   layout,\n                        geometry: geometry,\n                        data: {\n                            name: _('Favorites'),\n                            icon: {\n                                normal: config.path + 'img/' + RESOLUTION + '/favorites.normal.png',\n                                active: config.path + 'img/' + RESOLUTION + '/favorites.active.png'\n                            }\n                        },\n                        onClick: function () {\n                            openContentItem(resources.FAVORITES);\n                        }\n                    },\n                    {\n                        id:       ++uniqueItemID,\n                        layout:   layout,\n                        geometry: geometry,\n                        data: {\n                            name: 'SAMBA',\n                            icon: {\n                                normal: config.path + 'img/' + RESOLUTION + '/smb.nfs.normal.png',\n                                active: config.path + 'img/' + RESOLUTION + '/smb.nfs.active.png'\n                            }\n                        },\n                        onClick: function () {\n                            openContentItem(resources.SAMBA);\n                        }\n                    },\n                    {\n                        id:       ++uniqueItemID,\n                        layout:   layout,\n                        geometry: geometry,\n                        data: {\n                            name: 'NFS',\n                            icon: {\n                                normal: config.path + 'img/' + RESOLUTION + '/smb.nfs.normal.png',\n                                active: config.path + 'img/' + RESOLUTION + '/smb.nfs.active.png'\n                            }\n                        },\n                        onClick: function () {\n                            openContentItem(resources.NFS);\n                        }\n                    },\n                    {\n                        id:       ++uniqueItemID,\n                        layout:   layout,\n                        geometry: geometry,\n                        data: {\n                            name: 'UPnP',\n                            icon: {\n                                normal: config.path + 'img/' + RESOLUTION + '/upnp.normal.png',\n                                active: config.path + 'img/' + RESOLUTION + '/upnp.active.png'\n                            }\n                        },\n                        onClick: function () {\n                            openContentItem(resources.UPNP);\n                        }\n                    }\n                ]\n                /*moreButton: {\n                    id:       ++uniqueItemID,\n                    layout:   layout,\n                    geometry: geometry,\n                    data: {\n                        name: _('See more'),\n                        icon: {\n                            normal: config.path + 'img/' + RESOLUTION + '/see.more.normal.png',\n                            active: config.path + 'img/' + RESOLUTION + '/see.more.active.png'\n                        }\n                    },\n                    onClick: function () {\n                        openContentItem(null);\n                    }\n                }*/\n            };\n\n\n        /* backlog functionality\n        /**\n         * Content search.\n         *\n         * @param {Object} config configuration for search\n         * @param {string} config.query query search request\n         * @param {function} callback which called when content is ready\n         *\\/\n        contentProvider.search = function ( config, callback ) {\n            // TODO: query data and invoke `callback(error, ContentItem[]);`\n        };\n        */\n\n\n        // invoke the basic FS plugin method for gathering information and listening mount events\n        pluginFS.onAppInit({}, function ( error, fs ) {\n            var getSwitchedStorageItem, storages, storageHeap;\n\n            if ( error ) {\n                console.log(error);\n            }\n\n            if ( fs ) {\n                storages = [];\n                storageHeap = {};\n\n                /* eslint no-loop-func:      off */\n                /* eslint consistent-return: off */\n\n                /**\n                 * Add new content item or delete existent one.\n                 *\n                 * @param {boolean} state - mount/unmount event flag\n                 *\n                 * @return {Object} item with switched state\n                 */\n                getSwitchedStorageItem = function ( state ) {\n                    var mountPoints = fs.getMountPoints(),\n                        index, item, tmp;\n\n                    for ( index = 0; index < [Object.keys(storageHeap), mountPoints][+state].length; index += 1 ) {\n                        item = [Object.keys(storageHeap), mountPoints][+state][index];\n\n                        if ( state ) {\n                            if ( !storageHeap[item.sn] ) {\n                                storageHeap[item.sn] = {\n                                    id:       ++uniqueItemID,\n                                    index:    storages.length,\n                                    layout:   layout,\n                                    geometry: geometry,\n                                    data: {\n                                        name:       item.label || item.vendor || item.model,\n                                        isReadOnly: item.isReadOnly,\n                                        capacity:   evalStorageCapacity(item.freeSize) + ' / ' + evalStorageCapacity(item.size),\n                                        icon: {\n                                            normal: config.path + 'img/' + RESOLUTION + '/usb.normal.png',\n                                            active: config.path + 'img/' + RESOLUTION + '/usb.active.png'\n                                        }\n                                    },\n                                    onClick: function () {\n                                        openContentItem(null, {serialNumber: item.sn});\n                                    }\n                                };\n\n                                storages.push(storageHeap[item.sn]);\n\n                                return storageHeap[item.sn];\n                            }\n                        } else if ( !mountPoints.some(function ( mountPoint ) { return mountPoint[item]; }) ) { // eslint-disable-line\n                            tmp = storageHeap[item];\n\n                            storages.splice(storages.indexOf(tmp), 1);\n                            delete storageHeap[item];\n\n                            return tmp;\n                        }\n                    }\n                };\n\n\n                /**\n                 * Callback for mount/unmount event.\n                 *\n                 * @param {boolean} state - mount/unmount storage\n                 */\n                fs.onMount = function ( state ) {\n                    if ( state && storages.length + 1 === setup.storageItemsAmount ) {\n                        // possibly show notification for this case with suggestion to go to the Explorer\n                        return;\n                    }\n\n                    contentProvider.emit(['remove', 'add'][+state], getSwitchedStorageItem(state));\n                };\n\n\n                fs.getMountPoints()\n                    .slice(0, setup.storageItemsAmount)\n                    .forEach(function ( item ) {\n                        storageHeap[item.sn] = {\n                            id:       ++uniqueItemID,\n                            layout:   layout,\n                            geometry: geometry,\n                            data: {\n                                name:       item.label || item.vendor || item.model,\n                                isReadOnly: item.isReadOnly,\n                                capacity:   evalStorageCapacity(item.freeSize) + ' / ' + evalStorageCapacity(item.size),\n                                icon: {\n                                    normal: config.path + 'img/' + RESOLUTION + '/usb.normal.png',\n                                    active: config.path + 'img/' + RESOLUTION + '/usb.active.png'\n                                }\n                            },\n                            onClick: function () {\n                                openContentItem(null, {serialNumber: item.sn});\n                            }\n                        };\n\n                        storages.push(storageHeap[item.sn]);\n                    });\n\n                callback(null, {\n                    provider: contentProvider,\n                    data:     storages.concat(setup.shortcuts/*, setup.moreButton*/)\n                });\n            } else {\n                // information from FS plugin is unavailable\n                callback(null, {\n                    provider: contentProvider,\n                    data:     setup.shortcuts/*.concat(setup.moreButton)*/\n                });\n            }\n        });\n    });\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","/**\n * Convert number of bytes into human readable format.\n *\n * @module eval.space\n *\n * @author Stanislav Kalashnik <sk@infomir.eu>\n * @author Yaroslav Surilov <y.surilov@infomir.com>\n */\n\n'use strict';\n\n\n/**\n * Convert number of bytes into human readable format with some precision.\n *\n * @param {number} bytes - number of bytes to convert\n * @param {number} [precision] - number of digits after the decimal separator\n *\n * @return {string} converted view\n */\nfunction bytesToSize ( bytes, precision ) {\n    var kilobyte = 1024,\n        megabyte = kilobyte * 1024,\n        gigabyte = megabyte * 1024,\n        terabyte = gigabyte * 1024;\n\n    if ( !precision ) {\n        precision = 1;\n    }\n\n    if ( (bytes >= 0) && (bytes < kilobyte) ) {\n        return bytes + ' B';\n    } else if ( (bytes >= kilobyte) && (bytes < megabyte) ) {\n        return (bytes / kilobyte).toFixed(precision) + ' KB';\n    } else if ( (bytes >= megabyte) && (bytes < gigabyte) ) {\n        return (bytes / megabyte).toFixed(precision) + ' MB';\n    } else if ( (bytes >= gigabyte) && (bytes < terabyte) ) {\n        return (bytes / gigabyte).toFixed(precision) + ' GB';\n    } else if ( bytes >= terabyte ) {\n        return (bytes / terabyte).toFixed(precision) + ' TB';\n    }\n\n    return bytes + ' B';\n}\n\n\nmodule.exports = bytesToSize;\n"],"sourceRoot":""}