{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/mag-gettext/index.js","webpack:///./src/js/ts.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/options/enable.js","webpack:///./src/js/options/length.js","webpack:///./src/js/data/ts.length.js","webpack:///./src/js/options/buffer.mode.js","webpack:///./src/js/options/on.exit.js","webpack:///./src/js/options/delay.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","Gettext","loader","prepare","data","gettext","_","pgettext","ngettext","defaultLanguage","load","config","callback","xhr","ext","path","XMLHttpRequest","onload","jsonParseError","json","JSON","parse","responseText","error","onerror","events","emit","ontimeout","open","send","timeShift","window","top","INITED","ts","enable","icon","delay","cyclic","onExit","length","plugin","getDevices","gSTB","GetStorageInfo","result","map","device","vendor","model","mountPath","init","app","deviceList","storage","getItem","undefined","EXIT_NOT_SAVE","SAVE_FOLDER_NAME","stbEvent","addListener","evt","devices","broadcast","message","event","code","info","ident","eventName","timeShiftEventHandler","event_code","event_data","MODE_PORTAL","ALLOW_MANUAL","defineProperties","set","val","displayIcon","SetSlidingMode","SetMaxDuration","SetTimeShiftFolder","mountUsb","mount","replace","EXIT_SAVE","EXIT_REQUEST_SAVE","setSlidingMode","enableMode","checkAbility","state","test","uri","solution","enter","EnterTimeShift","exit","save","ExitTimeShiftAndSave","ExitTimeShift","this","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","index","Array","slice","constructor","getPlugin","onSettingsInit","core","environment","language","sections","id","description","parent","options","onAppInit","meta","msgId","context","plural","evalResult","eval","timeShiftEnable","saveImmediate","prepareForRender","currentValue","prepareForSave","render","api","renders","toggle","timeShiftLength","forEach","item","selected","popupSelect","timeShiftBufferCyclicMode","timeShiftOnExitHandler","timeShiftDelay"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n/*eslint max-len:0*/\n\nvar Emitter = require('cjs-emitter'),\n    timeShift = window.timeShift || window.top.timeShift || {},\n    INITED = false,\n    ts = {\n        enable: false,\n        icon: true,\n        delay: 0,\n        cyclic: false,\n        onExit: 0,\n        length: 3600,\n        path: null\n    },\n    plugin  = new Emitter();\n\nfunction getDevices () {\n    var data;\n\n    try {\n        data = JSON.parse(gSTB.GetStorageInfo('{}')); // eslint-disable-line\n        data = data.result;\n        data = data.map(function ( device ) {\n            return {\n                name: device.vendor + device.model,\n                value: device.mountPath\n            };\n        });\n    } catch ( error ) {\n        data = [];\n    }\n\n    return data;\n}\n\n//  *  Code | Description\n//  * ------|-------------\n//  *  1    | Start playing.\n//  *  2    | Stop playing.\n//  *  3    | timeShiftSlidingMode:true, when playback was in timeshift mode on pause and current position differs from realtime position more that on maximum buffer duration of timeshift. If in pause mode event 3 appeared, then it is necessary to send resume.\n//  *  4    | When timeshift buffer is full. After this event in timeShiftSlidingMode:false mode, new data are lost and navigation is available only in buffer or switch to real time mode (saving with resume is impossible). Event 4 while timeShiftSlidingMode:true means that timeshift buffer is full and old data will start to erase itself.\n//  *  5    | Comes before 1 minute before buffer turns full (1 minute before event 4).\n//  *  6    | Comes while playback if storage device is not available (data=1) or there is no free space (data=2). After this event playback will automaticly switch in real time.\n//  *\nfunction timeShiftEventHandler ( code, data ) {\n    var eventName;\n\n    switch ( code ) {\n        case 1:\n            plugin.emit('start');\n            break;\n        case 2:\n            plugin.emit('stop');\n            break;\n        case 3:\n            plugin.emit('buffer:pause:full');\n            break;\n        case 4:\n            plugin.emit('buffer:full');\n            break;\n        case 5:\n            plugin.emit('buffer:almost:full');\n            break;\n        case 6:\n            if ( data === 1 ) {\n                eventName = 'storage:unavailable';\n            } else if ( data === 2 ) {\n                eventName = 'storage:full';\n            }\n            plugin.emit(eventName);\n            break;\n    }\n}\n\n\nfunction init ( app ) {\n    var delay  = app.storage.getItem('timeShiftDelay'),\n        length = app.storage.getItem('timeShiftLength'),\n        onExit = app.storage.getItem('timeShiftOnExitHandler'),\n        cyclic = app.storage.getItem('timeShiftBufferCyclicMode'),\n        enable = app.storage.getItem('timeShiftEnable'),\n        deviceList;\n\n\n    if ( delay ) {\n        plugin.delay = delay;\n    }\n\n    if ( onExit === undefined ) {\n        plugin.onExit = plugin.EXIT_NOT_SAVE;\n    } else {\n        plugin.onExit = onExit;\n    }\n\n    plugin.cyclic = cyclic;\n\n    ts.icon = app.storage.getItem('timeShiftIconDisplay');\n\n    if ( enable ) {\n        ts.enable = enable;\n    }\n\n    plugin.enable = ts.enable;\n\n    deviceList = getDevices();\n    console.log(deviceList.length + ' :::');\n    if ( deviceList.length ) {\n        plugin.path = deviceList[0].value + '/' + plugin.SAVE_FOLDER_NAME;\n    }\n\n    window.stbEvent.addListener('message', function ( evt ) {\n        var devices = [];\n\n\n        if ( evt.broadcast ) {\n            if ( evt.message === 'storage.mount' ) {\n                devices = getDevices();\n\n                if ( devices.length ) {\n                    plugin.path = devices[0].value + '/' + plugin.SAVE_FOLDER_NAME;\n                }\n            }\n        }\n    });\n\n    // if ( path )   plugin.path = path;\n    plugin.length = length || 3600;\n\n\n    window.stbEvent.addListener('media', function ( event ) {\n        if ( event.code === 36 && event.info && event.info.ident === 'TimeShift' ) {\n            // {\"event_code\":6,\"ident\":\"TimeShift\",\"event_data\":\"1\"}\n            timeShiftEventHandler(event.info.event_code, event.info.event_data);\n            console.log('TS EVENT:' + JSON.stringify(event.info));\n        }\n    });\n\n    if ( window.top.MODE_PORTAL ) {\n        plugin.ALLOW_MANUAL = true;\n    }\n\n    INITED = true;\n}\n\n\nObject.defineProperties(plugin, {\n    /**\n     * Enable state of ts\n     */\n    enable: {\n        set: function ( value ) {\n            ts.enable = !!value;\n            plugin.emit('change', 'enable', ts.enable);\n        },\n        get: function () { return ts.enable; }\n    },\n    /**\n     * On timeShift exit handler\n     */\n    onExit: {\n        set: function ( val ) {\n            ts.onExit = val;\n            plugin.emit('change', 'onExit', ts.onExit);\n        },\n        get: function () { return ts.onExit; }\n    },\n    delay: {\n        set: function ( val ) {\n            ts.delay = val;\n            plugin.emit('change', 'delay', ts.delay);\n        },\n        get: function () { return ts.delay; }\n    },\n    displayIcon: {\n        get: function (  ) {\n            return ts.icon;\n        },\n        set: function ( value ) {\n            value = !!value;\n            ts.icon = value;\n            plugin.emit('change', 'displayIcon', ts.icon);\n        }\n    },\n    cyclic: {\n        set: function ( val ) {\n            ts.cyclic = !!val;\n            timeShift.SetSlidingMode(ts.cyclic); // eslint-disable-line\n            plugin.emit('change', 'cyclic', ts.cyclic);\n        },\n        get: function () { return ts.cyclic; }\n    },\n    length: {\n        set: function ( val ) {\n            timeShift.SetMaxDuration(val); // eslint-disable-line\n            console.log('timeShift.SetMaxDuration ' + val);\n            ts.length = val;\n            plugin.emit('change', 'length', ts.length);\n        },\n        get: function () { return ts.length; }\n    },\n    path: {\n        set: function ( path ) {\n            timeShift.SetTimeShiftFolder(path); // eslint-disable-line\n            ts.path = path;\n            console.log('TIME SHIFT SET PATH:' + path);\n        },\n        get: function () { return ts.path; }\n    },\n    mountUsb: {\n        get: function () {\n            var mount = false;\n\n            if ( ts.path ) {\n                mount = ts.path.replace('/' + plugin.SAVE_FOLDER_NAME, '');\n            }\n\n            return mount;\n        }\n    }\n});\n\nplugin.EXIT_NOT_SAVE = 0;\n\nplugin.EXIT_SAVE = 1;\n\nplugin.EXIT_REQUEST_SAVE = 2;\n\nplugin.SAVE_FOLDER_NAME = 'records';\n\n\nplugin.setSlidingMode = function ( enableMode ) {\n    timeShift.SetSlidingMode(enableMode); // eslint-disable-line\n};\n\nplugin.checkAbility = function ( config ) {\n    var state = false;\n\n    config = config || {};\n\n    if ( /rtp\\:|udp\\:/.test(config.uri) || /ffrt\\s/.test(config.uri) || config.solution === 'ffrt' ) { // eslint-disable-line\n        state = true;\n    }\n\n    return state;\n};\n\nplugin.enter = function () {\n    return top.timeShift.EnterTimeShift(); // eslint-disable-line\n};\n\nplugin.exit = function ( config ) {\n    if ( config && config.save && config.save.path && config.save.name ) {\n        return top.timeShift.ExitTimeShiftAndSave(config.save.path, config.save.name); // eslint-disable-line\n    }\n\n    return top.timeShift.ExitTimeShift(); // eslint-disable-line\n\n};\n\nmodule.exports =  function ( app ) {\n    if ( !INITED ) {\n        init(app);\n    }\n\n    return  plugin;\n};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\nvar getPlugin = require('./ts');\n\nmodule.exports = {\n    onSettingsInit: function ( app, callback ) {\n        require('mag-gettext').load({\n            name: window.core.environment.language || 'en',\n            path: app.path + 'lang'\n\n        }, function () {\n            var gettext = require('mag-gettext').gettext,\n                data;\n\n            /*eslint max-len:0*/\n            /*eslint no-useless-escape:0*/\n            data = {\n                sections: [\n                    {\n                        id: 'timeshift',\n                        name: gettext('TimeShift'),\n                        description: gettext('TimeShift allows you to record a channel program on the USB-stick by pressing the \\\"Pause\\\" button on your remote control. When you press the \\\"Pause\\\" button again, the recording will continue and the channel will start playing from the storage device starting at the point in the program where you first pressed \\\"Pause\\\".'),\n                        icon: 'theme-icon-timeshift',\n                        parent: 'system'\n                    }\n                ],\n                options: [\n                    // enable/disable\n                    require('./options/enable')(app),\n\n                    // display icon\n                    // require('./options/display.icon')(app),\n\n                    // path to record\n                    // require('./options/path')(app),\n\n                    // length\n                    require('./options/length')(app),\n\n                    // buffer mode\n                    require('./options/buffer.mode')(app),\n\n                    // on exit handler\n                    require('./options/on.exit')(app),\n\n                    // delay\n                    require('./options/delay')(app)\n                ]\n            };\n            callback(false, data);\n        });\n\n    },\n    onAppInit: function ( app, callback ) {\n        callback(null, getPlugin(app));\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n\nmodule.exports = function ( app ) {\n    var ts       = require('../ts')(app),\n        gettext  = require('mag-gettext').gettext;\n\n    return {\n        id: 'timeShiftEnable',\n        name: gettext('Enable TimeShift'),\n        description: gettext('Enable TimeShift function.'),\n        icon: 'theme-icon-timeshift',\n        data: {\n            timeShiftEnable: false\n        },\n        saveImmediate: true,\n        prepareForRender: function ( currentValue, callback ) {\n            console.log(JSON.stringify(currentValue));\n            callback(!!currentValue.timeShiftEnable);\n        },\n        prepareForSave: function ( value, callback ) {\n            this.data.timeShiftEnable = value;\n\n            ts.enable = value;\n            callback();\n        },\n        render: app.api.renders.toggle,\n        parent: 'timeshift'\n    };\n};\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n\nmodule.exports = function ( app ) {\n    var ts       = require('../ts')(app),\n        gettext  = require('mag-gettext').gettext;\n\n    return {\n        id: 'timeShiftLength',\n        name: gettext('Duration'),\n        description: gettext('Set the TimeShift recording duration'),\n        icon: 'theme-icon-clock',\n        data: {\n            timeShiftLength: 3600\n        },\n        saveImmediate: true,\n        prepareForRender: function ( currentValue, callback ) {\n            var data = require('../data/ts.length');\n\n            data.forEach(function ( item ) {\n                item.selected = item.value === currentValue.timeShiftLength;\n            });\n\n            callback(data);\n        },\n        prepareForSave: function ( value, callback ) {\n            this.data.timeShiftLength = value;\n\n            ts.length = value;\n            callback();\n        },\n        render: app.api.renders.popupSelect,\n        parent: 'timeshift'\n    };\n};\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\nvar gettext  = require('mag-gettext').gettext,\n    ngettext = require('mag-gettext').ngettext;\n\nmodule.exports = [\n    {name: '15 ' + gettext('min'), value: 900},\n    {name: '30 ' + gettext('min'), value: 1800},\n    {name: '1 ' + ngettext('hour', 'hours', 1), value: 3600},\n    {name: '2 ' + ngettext('hour', 'hours', 2), value: 7200},\n    {name: '3 ' + ngettext('hour', 'hours', 3), value: 10800},\n    {name: '5 ' + ngettext('hour', 'hours', 5), value: 18000},\n    {name: '10 ' + ngettext('hour', 'hours', 10), value: 36000},\n    {name: '20 ' + ngettext('hour', 'hours', 20), value: 72000},\n    {name: '24 ' + ngettext('hour', 'hours', 24), value: 86400}\n];\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\nmodule.exports = function ( app ) {\n    var ts       = require('../ts')(app),\n        gettext  = require('mag-gettext').gettext;\n\n    /*eslint max-len:0*/\n    return {\n        id: 'timeShiftBufferMode',\n        name: gettext('Using buffer mode'),\n        description: gettext('There are two options for using the buffer. Cyclic overwrite - recording to the buffer is performed cyclically. Once the buffer is full, the new record overwrites the existing ones. Stop when filled - the record ends once the storage space is filled.'),\n        icon: 'theme-icon-categories',\n        data: {\n            timeShiftBufferCyclicMode: false\n        },\n        saveImmediate: true,\n        prepareForRender: function ( currentValue, callback ) {\n            var data = [\n                {name: gettext('Cyclic record mode'), value: true},\n                {name: gettext('Stop when out of space'), value: false}\n            ];\n\n            data.forEach(function ( item ) {\n                item.selected = item.value === currentValue.timeShiftBufferCyclicMode;\n            });\n\n            callback(data);\n        },\n        prepareForSave: function ( value, callback ) {\n            this.data.timeShiftBufferCyclicMode = value;\n\n            ts.cyclic = value;\n            callback();\n        },\n        render: app.api.renders.popupSelect,\n        parent: 'timeshift'\n    };\n};\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n\nmodule.exports = function ( app ) {\n    var ts       = require('../ts')(app),\n        gettext  = require('mag-gettext').gettext;\n\n    return {\n        id: 'timeShiftOnExit',\n        name: gettext('On exit'),\n        description: gettext('Save content on exit (end of TimeShift mode).'),\n        icon: 'theme-icon-shortcut',\n        data: {\n            timeShiftOnExitHandler: 0\n        },\n        saveImmediate: true,\n        prepareForRender: function ( currentValue, callback ) {\n            var data = [\n                {name: gettext('Do not save buffer'), value: ts.EXIT_NOT_SAVE},\n                {name: gettext('Save buffer'), value: ts.EXIT_SAVE}\n            ];\n\n            if ( window.top.MODE_PORTAL ) {\n                data.push(\n                    {name: gettext('Request to save'), value: ts.EXIT_REQUEST_SAVE}\n                );\n            }\n\n            data.forEach(function ( item ) {\n                item.selected = item.value === currentValue.timeShiftOnExitHandler;\n            });\n\n            callback(data);\n        },\n        prepareForSave: function ( value, callback ) {\n            this.data.timeShiftOnExitHandler = value;\n\n            // save(value);\n            ts.onExit = value;\n            callback();\n        },\n        render: app.api.renders.popupSelect,\n        parent: 'timeshift'\n    };\n};\n","/**\n *\n * @author Aleynikov Boris <aleynikov.boris@gmail.com>.\n */\n\n'use strict';\n\n/*eslint no-useless-escape:0*/\n\nmodule.exports = function ( app ) {\n    var ts       = require('../ts')(app),\n        gettext  = require('mag-gettext').gettext;\n\n    return {\n        id: 'timeShiftDelay',\n        name: gettext('Delay'),\n        description: gettext('Delay before the TimeShift starts recording.'),\n        icon: 'theme-icon-sand-clock',\n        data: {\n            timeShiftDelay: 0\n        },\n        saveImmediate: true,\n        prepareForRender: function ( currentValue, callback ) {\n            var data = [\n                {name: gettext('By pressing \\\"Pause\\\" button'), value: 0},\n                {name: '1 ' + gettext('sec'), value: 1000},\n                {name: '3 ' + gettext('sec'), value: 3000},\n                {name: '5 ' + gettext('sec'), value: 5000},\n                {name: '10 ' + gettext('sec'), value: 10000}\n\n            ];\n\n            data.forEach(function ( item ) {\n                item.selected = item.value === currentValue.timeShiftDelay;\n            });\n\n            callback(data);\n        },\n        prepareForSave: function ( value, callback ) {\n            this.data.timeShiftDelay = value;\n\n            ts.delay = value;\n            callback();\n        },\n        render: app.api.renders.popupSelect,\n        parent: 'timeshift'\n    };\n};\n"],"sourceRoot":""}