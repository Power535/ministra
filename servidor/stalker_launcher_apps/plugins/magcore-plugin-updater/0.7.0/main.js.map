{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js","webpack:///./src/js/tools.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","this","events","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","emit","index","event","Array","slice","constructor","daemon","waitForReboot","gettext","gettextWrapper","tools","Client","trigger","list","defineProperties","autoUpdateEnabled","stalkerMode","set","updateImageUrl","standAloneMode","betaUpdate","flag","storage","setItem","sync","frequency","time","window","clearInterval","checkTimerId","setInterval","onListUpdate","error","onHardUpdate","data","triggers","destroy","splice","indexOf","constants","NEVER","WEEKLY","MONTHLY","statusCodes","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","check","config","timerId","crashCodes","uri","stbUpdate","startCheck","status","getStatus","date","toDate","getImageDateStr","getImageVersionStr","descr","getImageDescStr","url","type","code","message","start","realActiveBank","activeBank","getActiveBank","modelTemp","gSTB","RDir","toUpperCase","progress","oldStatus","GetDefaultUpdateUrl","GetFlashBankCount","stbStorage","getItem","JSON","parse","bootmedia","startUpdate","old","now","getPercents","text","current","version","description","defaultPathToImageOnUsb","toLowerCase","actualVersions","updateListUrl","hashData","currTimeStamp","forEach","listener","Math","round","Date","GetDeviceModelExt","GetDeviceModel","GetDeviceImageDesc","GetDeviceSerialNumber","GetDeviceMacAddress","core","environment","language","location","href","portal1","portal2","navigator","userAgent","ajax","rawData","newest","changed","contain","ind","ind2","item","getTime","updater","notify","title","icon","taskManager","launcher","ready","intent","action","setTimeout","X-CurrentVersion","X-SerialNumber","X-MacAddress","X-ModelNameEx","X-Language","X-Portal1","X-Portal2","X-PortalUrl","X-Hash","GetHashVersion1","init","env","currDate","applyCurrentStorageData","Number","Image_Date","toString","Image_Version","Image_Desc","autoupdate_cond","betaupdate_cond","backend","settings","update_url","autoupdateURL","options","isStandAlone","keys","parseUri","queryKey","CheckVersion","runStandAloneMode","stbWebWindow","messageSend","close","stbWindowMgr","windowShow","windowId","onInit","load","path","coreDaemon","MODE_STALKER","onAppInit","onSettingsInit","id","click","closeCallback","api","actions","view","reset","render","renders","listItem","parent","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","jsonParseError","json","responseText","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval","ajaxStop","method","headers","async","hname","jdata","timeout","onreadystatechange","respText","readyState","clearTimeout","responseXML","setRequestHeader","abort","timeZoneOffsets","A","minutes","ACDT","ACST","ACT","ACWST","ADT","AEDT","AEST","AFT","AKDT","AKST","ALMT","AMST","AMT","ANAST","ANAT","AQTT","ART","AST","AWDT","AWST","AZOST","AZOT","AZST","AZT","B","BNT","BOT","BRST","BRT","BST","BTT","C","CAST","CAT","CCT","CDT","CEST","CET","CHADT","CHAST","CHOT","CHUT","CKT","CLST","CLT","COT","CST","CVT","CXT","ChST","D","DAVT","E","EASST","EAST","EAT","ECT","EDT","EEST","EET","EGST","EGT","EST","ET","F","FET","FJST","FJT","FKST","FKT","FNT","G","GALT","GAMT","GET","GFT","GILT","GMT","GST","GYT","H","HAA","HAC","HADT","HAE","HAP","HAR","HAST","HAT","HAY","HKT","HLV","HNA","HNC","HNE","HNP","HNR","HNT","HNY","HOVT","I","ICT","IDT","IOT","IRDT","IRKST","IRKT","IRST","IST","JST","K","KGT","KOST","KRAST","KRAT","KST","KUYT","L","LHDT","LHST","LINT","M","MAGST","MAGT","MART","MAWT","MDT","MESZ","MEZ","MHT","MMT","MSD","MSK","MST","MUT","MVT","MYT","N","NCT","NDT","NFT","NOVST","NOVT","NPT","NRT","NST","NUT","NZDT","NZST","O","OMSST","OMST","ORAT","P","PDT","PET","PETST","PETT","PGT","PHOT","PHT","PKT","PMDT","PMST","PONT","PST","PT","PWT","PYST","PYT","Q","QYZT","R","RET","S","SAKT","SAMT","SAST","SBT","SCT","SGT","SRET","SRT","SST","T","TAHT","TFT","TJT","TKT","TLT","TMT","TOT","TVT","U","ULAT","UTC","UYST","UYT","UZT","V","VET","VLAST","VLAT","VUT","W","WARST","WAST","WAT","WEST","WESZ","WET","WEZ","WFT","WGST","WGT","WIB","WIT","WITA","WST","WT","X","Y","YAKST","YAKT","YAPT","YEKST","YEKT","Z","result","timeZone","offset","isNaN","match","setMinutes","getMinutes","getTimezoneOffset","NaN","str","opts","parser","strictMode","exec","indx","q","replace","$0","$1","$2","strict","loose"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * MAGSDK basic implementation of update plugin.\n *\n * @author <bas.jsdev@gmail.com>\n */\n\n\n'use strict';\n\nvar gettextWrapper = require('mag-gettext'),\n    Emitter        = require('cjs-emitter'),\n    tools          = require('./tools'),\n    updater, daemon, waitForReboot, gettext;\n\n\n/**\n * Update manager. Listening daemon for records changes and emitting corresponding events to application.\n * Can emit events: progress, state, add, remove.\n *\n * @constructor\n * @extends Emitter\n */\nfunction Client () {\n    var self    = this,\n        trigger = {};\n\n    Emitter.call(this);\n\n    this.list = [];\n\n    Object.defineProperties(this, {\n        autoUpdateEnabled: {\n            get: function () { return !daemon.stalkerMode; },\n            set: function () { return false; }\n        },\n        updateImageUrl: {\n            get: function () { return daemon.updateImageUrl; },\n            set: function () { return false; }\n        },\n        standAloneMode: {\n            get: function () { return !!daemon.standAloneMode; },\n            set: function () { return false; }\n        }\n    });\n\n    if ( !daemon.stalkerMode ) {\n        Object.defineProperties(this, {\n            betaUpdate: {\n                get: function () {\n                    return daemon.betaUpdate;\n                },\n                set: function ( flag ) {\n                    //console.log('daemon.betaUpdate set to ' + flag);\n                    daemon.betaUpdate = flag;\n                    daemon.storage.setItem('betaUpdate', flag);\n                    daemon.list = [];\n                    waitForReboot = true;\n                    // check if one of old beta images became actual\n                    daemon.sync();\n                }\n            },\n            frequency: {\n                get: function () {\n                    return daemon.frequency;\n                },\n                set: function ( time ) {\n                    //console.log('daemon.frequency set to ' + time);\n                    daemon.frequency = time;\n                    daemon.storage.setItem('frequency', time);\n                    window.clearInterval(daemon.checkTimerId);\n                    if ( daemon.frequency ) {\n                        daemon.checkTimerId = window.setInterval(daemon.sync, daemon.frequency);\n                    }\n                    daemon.list = [];\n                    waitForReboot = true;\n                    daemon.sync();\n                }\n            }\n        });\n    }\n\n    trigger.onListUpdate = function ( list ) {\n        self.list = list;\n\n        try {\n            self.emit('listChange', list);\n        } catch ( error ) {\n            console.log('update plugin: error in one of listChange listeners. ' + error);\n        }\n    };\n\n    trigger.onHardUpdate = function ( data ) {\n        try {\n            self.emit('hardUpdate', data);\n        } catch ( error ) {\n            console.log('update plugin: error in one of hardUpdate listeners. ' + error);\n        }\n    };\n\n    daemon.triggers.push(trigger);\n\n    /**\n     * Stop this client and remove all it listeners. Use it for cleanup before application exit.\n     */\n    this.destroy = function () {\n        daemon.triggers.splice(daemon.triggers.indexOf(trigger), 1);\n        this.events = {};\n        this.list = [];\n    };\n}\n\nClient.prototype = Object.create(Emitter.prototype);\nClient.prototype.constructor = Client;\n\n\n/**\n * Description for codes.\n *\n * @type {Object}\n */\nClient.prototype.constants = {\n    NEVER: 0,\n    WEEKLY: 7 * 24 * 60 * 60 * 1000,\n    // setInterval and setTimeout can't be set with delay larger than 2147483647 (int)\n    MONTHLY: 24 * 24 * 60 * 60 * 1000\n};\n\n/**\n * Text representations of update statuses\n */\nClient.prototype.statusCodes = {\n    1: 'Signature init error',\n    2: 'Wrong device model',\n    3: 'Section size exceeds partition size on FLASH',\n    4: 'Required FLASH section not found. Aborting update',\n    5: 'Updating kernel',\n    6: 'Updating image',\n    7: 'Internal error',\n    8: 'Inspecting firmware',\n    9: 'Updating environment variables',\n    10: 'Updating Bootstrap section',\n    11: 'Skipping Bootstrap section',\n    12: 'Updating User FS section',\n    13: 'Skipping User FS section',\n    14: 'Updating second boot',\n    15: 'Updating logotype',\n    16: 'Update finished OK',\n    17: 'Wrong signature',\n    18: 'Erasing flash section',\n    19: 'Flash write error',\n    20: 'File write error',\n    21: 'Idle',\n    22: 'Invalid file header',\n    23: 'Inspecting update file',\n    24: 'File check finished',\n    25: 'File not found',\n    26: 'Initialising',\n    27: 'Read error'\n};\n\n/**\n * Callback for updater.verify method.\n *\n * @callback updater.verifyCallback\n *\n * @param {Object} [error] error data\n * @param {Object} error.code error code\n * @param {Object} error.message error text message\n * @param {Object} [config] new image information\n * @param {string} [config.date] date\n * @param {string} [config.description] description\n * @param {string} [config.version] version\n */\n\n/**\n * Get firmware meta data.\n * @param {Object} config check options\n * @param {string} config.uri path to firmware image (http or file)\n * @param {updater.verifyCallback} callback callback\n */\nClient.prototype.check = function ( config, callback ) {\n    // dead end states\n    var crashCodes = [1, 2, 3, 4, 7, 17, 19, 20, 22, 25, 27/*, 28, 29*/],\n        readyCode  = 21,\n        timerId;\n\n    //console.log('config.uri:' + config.uri);\n    if ( !config.uri ) {\n        callback({code: 0, message: 'Not set path to image'}, null);\n\n        return;\n    }\n\n    stbUpdate.startCheck(config.uri);\n\n    timerId = window.setInterval(function () {\n        var status = stbUpdate.getStatus();\n\n        //console.log('check status:' + Client.prototype.statusCodes[status]);\n        if ( status === readyCode ) {\n            window.clearInterval(timerId);\n            callback(null, {\n                date: tools.toDate(stbUpdate.getImageDateStr()),\n                name: stbUpdate.getImageVersionStr(),\n                descr: stbUpdate.getImageDescStr(),\n                url: config.uri,\n                type: ''\n            });\n        } else if ( crashCodes.indexOf(status) !== -1 ) {\n            window.clearInterval(timerId);\n            callback({\n                code: status,\n                message: Client.prototype.statusCodes[status]\n            }, null);\n        }\n    }, 100);\n};\n\n/**\n * Start update. After successful update device will be rebooted.\n *\n * @param {Object} [config] update options\n * @param {string} [config.uri] path to image (in none, default update uri would be used)\n */\nClient.prototype.start = function ( config ) {\n    // dead end states\n    var crashCodes = [1, 2, 3, 4, 7, 17, 19, 20, 22, 25, 27/*, 28, 29*/],\n        self       = this,\n        // get active NAND number\n        activeBank = stbUpdate.getActiveBank(),\n        // get device model\n        modelTemp  = gSTB.RDir('Model').toUpperCase(),\n        progress   = 0,\n        oldStatus  = stbUpdate.getStatus(),\n        realActiveBank, timerId;\n\n    config.uri = config.uri || gSTB.GetDefaultUpdateUrl();\n\n    //console.log('url for update:' + config.uri);\n    if ( !config.uri ) {\n        self.emit('error', {code: 1, text: 'Wrong update url'});\n\n        return;\n    }\n\n    // check device model\n    if ( modelTemp !== 'MAG250' && modelTemp !== 'MAG270' && modelTemp !== 'MAG275' ) {\n        // check memory banks on old devices\n        if ( activeBank !== -1 && stbUpdate.GetFlashBankCount() !== 2 ) {\n            self.emit('error', {code: 30, text: 'Unable to update active memory bank'});\n\n            return;\n        }\n    }\n\n    // check if active bank corrupted and we loaded in emergency mode (logs caught in magcore-app-portal-loader)\n    realActiveBank = stbStorage.getItem('nandEmergencyLoadingLogs');\n    if ( realActiveBank ) {\n        realActiveBank = (JSON.parse(realActiveBank) || '').bootmedia;\n        if ( realActiveBank === 'bank0' ) { activeBank = 0; }\n        if ( realActiveBank === 'bank1' ) { activeBank = 1; }\n    }\n\n    // write to non active nand\n    if ( activeBank === 0 ) {\n        stbUpdate.startUpdate(1, config.uri);\n    } else {\n        stbUpdate.startUpdate(0, config.uri);\n    }\n\n    timerId = window.setInterval(function () {\n        var status = stbUpdate.getStatus();\n\n        //console.log('update status:' + Client.prototype.statusCodes[status]);\n        if ( crashCodes.indexOf(status) === -1 ) {\n            // send progress\n            self.emit('progress', {old: progress, now: stbUpdate.getPercents()});\n            progress = stbUpdate.getPercents();\n            // send new status (if changed)\n            if ( status !== oldStatus ) {\n                self.emit('stateChange', {\n                    old: {code: oldStatus, text: Client.prototype.statusCodes[oldStatus]},\n                    now: {code: status, text: Client.prototype.statusCodes[status]}\n                });\n                oldStatus = status;\n            }\n        } else {\n            window.clearInterval(timerId);\n            self.emit('error', {code: status, text: Client.prototype.statusCodes[status]});\n        }\n    }, 100);\n};\n\n\n/**\n * Current image info.\n */\nClient.prototype.current = {date: '', version: '', description: ''};\n\n/**\n * Default path to image on usb.\n */\nClient.prototype.defaultPathToImageOnUsb = '/' + (gSTB.RDir('Model') || 'mag').toLowerCase() + '/imageupdate';\n\n\n/**\n * Watching for changes in server update list and if there are some - triggering corresponding callbacks in clients.\n * Can't be reached from application scope.\n *\n * @namespace\n */\ndaemon = {\n    /**\n     * In stand alone mode we called in separate window by stbUpdate.startAutoUpdate(imageUrl, checkVersion); function\n     * and there is no portal - only update page and core\n     */\n    standAloneMode: false,\n    /**\n     * In stalker mode all auto update triggers are controlled by server\n     */\n    stalkerMode: false,\n    /**\n     * Id from update setInterval function\n     *\n     * @type {number}\n     */\n    checkTimerId: 0,\n    /**\n     * Interval between updates (24 days)\n     *\n     * @type {number}\n     */\n    frequency: 24 * 24 * 60 * 60 * 1000,\n    /**\n     * List of clients listeners. For example to make first client update progress for recordItem and emit event\n     * 'progress' for his app, you should call daemon.triggers[0].onProgress(recordItem).\n     *\n     * @type {Array}\n     */\n    triggers: [],\n    /**\n     * Hash to connect raw records data and records objects in clients. Otherwise on each update operation we should\n     * use multiple cycles to build connections between raw data and record objects and only than apply changes.\n     *\n     * @type {Object}\n     */\n    actualVersions: [],\n    betaUpdate: false,\n    updateListUrl: '',\n    updateImageUrl: '',\n    list: [],\n    sync: function () {\n        var client, hashData, currTimeStamp;\n\n        if ( !daemon.updateListUrl ) {\n            console.log('updateListUrl not set - can\\'t check new versions');\n\n            return;\n        }\n\n        if ( daemon.stalkerMode ) {\n            // stalker portal update scheme\n            client = new Client();\n            client.check({uri: daemon.updateListUrl}, function ( error, data ) {\n                if ( error ) {\n                    console.log('Can\\'t check new image for update: ' + error.message);\n\n                    return;\n                }\n                if ( !data || !data.date ) {\n                    console.log('Wrong image headers: ' + data);\n\n                    return;\n                }\n                data.date = tools.toDate(data.date);\n                daemon.list = [data];\n                daemon.triggers.forEach(function ( listener ) {\n                    if ( typeof listener.onListUpdate === 'function' ) {\n                        listener.onListUpdate(daemon.list.slice());\n                    }\n                });\n            });\n        } else {\n            // embedded portal update scheme\n            //console.log('check update list at server: ' + daemon.updateListUrl + '?mac=' + gSTB.GetDeviceMacAddress());\n            // modelNameEx + currentVersion + serialNumber + macAddr + currentLang + portalUrl + porta1 + portal2 + userAgent + current_t_wo_sec\n            currTimeStamp = Math.round(Date.now() / 1000);\n            hashData = (gSTB.GetDeviceModelExt ? gSTB.GetDeviceModelExt() : gSTB.GetDeviceModel());\n            hashData += gSTB.GetDeviceImageDesc() + gSTB.GetDeviceSerialNumber() + gSTB.GetDeviceMacAddress();\n            hashData += (window.core.environment.language || 'en') + location.href;\n            hashData += (window.core.environment.portal1 || '') + (window.core.environment.portal2 || '');\n            hashData += navigator.userAgent + (currTimeStamp - (currTimeStamp % 60));\n            tools.ajax('get', daemon.updateListUrl + '?mac=' + gSTB.GetDeviceMacAddress(), function ( data ) {\n                var rawData, newest, changed, contain, ind, ind2;\n\n                try {\n                    rawData = JSON.parse(data);\n                } catch ( error ) {\n                    console.log('parsing err: ' + error);\n                    rawData = [];\n                } finally {\n                    rawData = rawData || [];\n                }\n\n                if ( rawData.length === daemon.list.length ) {\n                    for ( ind = 0; ind < rawData.length; ind++ ) {\n                        contain = false;\n                        for ( ind2 = 0; ind2 < daemon.list.length; ind2++ ) {\n                            if ( rawData[ind].name === daemon.list[ind2].name ) {\n                                contain = true;\n                                break;\n                            }\n                        }\n                        if ( !contain ) {\n                            changed = true;\n                            break;\n                        }\n                    }\n                } else {\n                    changed = true;\n                }\n\n                if ( changed ) {\n                    daemon.list = [];\n                    rawData.forEach(function ( item ) {\n                        item.date = tools.toDate(item.date);\n                        daemon.list.push(item);\n                        // find fresh image with newest version and, if auto update activated, start it with this image\n                        if ( (item.date.getTime() || 0) > (Client.prototype.current.date.getTime() || 0) &&\n                            (item.type === 'release' || (updater.betaUpdate && item.type === 'beta')) ) {\n                            newest = newest || item;\n                            if ( (item.date.getTime() || 0) > (newest.date.getTime() || 0) ) {\n                                newest = item;\n                            }\n                        }\n                    });\n\n                    if ( newest && (daemon.frequency !== Client.prototype.constants.NEVER) ) {\n                        if ( waitForReboot ) {\n                            window.core.notify({\n                                title: gettext('New software available. Device will be updated after reboot.'),\n                                icon: 'alert',\n                                type: 'warning'\n                            });\n                        } else if ( window.core.taskManager && window.core.taskManager.launcher &&\n                            window.core.taskManager.launcher.core && window.core.taskManager.launcher.core.ready ) {\n                            //console.log('core ready');\n                            //console.log('intent action: update');\n                            waitForReboot = true;\n                            window.core.intent({\n                                action: 'update',\n                                data: newest\n                            }, function ( error ) {\n                                if ( error ) { console.log('error in update intent: ' + error); }\n                            });\n                        } else {\n                            //console.log('core not ready'); // try again in 10 sec\n                            setTimeout(daemon.sync, 10000);\n                            daemon.list = [];\n                        }\n                    }\n\n                    daemon.triggers.forEach(function ( listener ) {\n                        if ( typeof listener.onListUpdate === 'function' ) {\n                            listener.onListUpdate(daemon.list.slice());\n                        }\n                    });\n                }\n            }, {\n                'X-CurrentVersion': gSTB.GetDeviceImageDesc(),\n                'X-SerialNumber': gSTB.GetDeviceSerialNumber(),\n                'X-MacAddress': gSTB.GetDeviceMacAddress(),\n                'X-ModelNameEx': gSTB.GetDeviceModelExt ? gSTB.GetDeviceModelExt() : gSTB.GetDeviceModel(),\n                'X-Language': window.core.environment.language || 'en',\n                'X-Portal1': window.core.environment.portal1 || '',\n                'X-Portal2': window.core.environment.portal2 || '',\n                'X-PortalUrl': location.href,\n                'X-Hash': gSTB.GetHashVersion1(hashData, '')\n            });\n        }\n    },\n    init: function ( config ) {\n        var updateListUrl, updateImageUrl, frequency,\n            env      = window.core.environment,\n            storage  = config.storage,\n            currDate = config.storage.getItem('currentDate');\n\n        function applyCurrentStorageData () {\n            Client.prototype.current.date = new Date(storage.getItem('currentDate'));\n            Client.prototype.current.version = storage.getItem('currentVersion');\n            Client.prototype.current.description = storage.getItem('currentDescription');\n\n            daemon.frequency = Number(storage.getItem('frequency'));\n            daemon.updateListUrl = storage.getItem('updateListUrl');\n            daemon.updateImageUrl = storage.getItem('updateImageUrl');\n            daemon.betaUpdate = storage.getItem('betaUpdate');\n        }\n\n        daemon.storage = storage;\n        // 1) migration from old to new portal\n        // 2) current firmware image was updated so now we need to update it's info in storage\n        if ( !currDate || ((tools.toDate(env.Image_Date)).getTime() !== (new Date(currDate)).getTime()) ) {\n            //console.log('env:' + (tools.toDate(env.Image_Date)).getTime() + ', storage:' + (new Date(currDate)).getTime());\n            // Start migration. Save data to new device storage\n            //console.log('Start migration. Save data to new device storage');\n            // save correct date string to storage\n            storage.setItem('currentDate', (tools.toDate(env.Image_Date)).toString());\n            storage.setItem('currentVersion', env.Image_Version);\n            storage.setItem('currentDescription', env.Image_Desc);\n            frequency = Number(env.autoupdate_cond) === 2 ? Client.prototype.constants.NEVER : Client.prototype.constants.MONTHLY;\n            storage.setItem('frequency', storage.getItem('frequency') || frequency);\n            storage.setItem('betaUpdate', storage.getItem('betaUpdate') || !!Number(env.betaupdate_cond));\n            // mode specific options\n            if ( daemon.stalkerMode ) {\n                // stalker portal update scheme\n                window.core.backend.once('ready', function () {\n                    updateListUrl = window.core.backend.settings.update_url || '';\n                    updateImageUrl = window.core.backend.settings.update_url || '';\n                    storage.setItem('updateListUrl', updateListUrl);\n                    storage.setItem('updateImageUrl', updateImageUrl);\n                    applyCurrentStorageData();\n                });\n            } else {\n                // embedded portal update scheme\n                updateListUrl = env.autoupdateURL || (config.options && config.options.url ? config.options.url : '');\n                updateImageUrl = env.update_url || gSTB.GetDefaultUpdateUrl();\n                storage.setItem('updateListUrl', updateListUrl);\n                storage.setItem('updateImageUrl', updateImageUrl);\n                applyCurrentStorageData();\n            }\n        } else {\n            applyCurrentStorageData();\n        }\n    },\n    /**\n     * check if we were called in separate window by stbUpdate.startAutoUpdate(imageUrl, checkVersion); function\n     *\n     * @return {boolean} result\n     */\n    isStandAlone: function () {\n        var keys = tools.parseUri(window.location).queryKey;\n\n        if ( (keys.CheckVersion === 'true' || keys.CheckVersion === 'false') && keys.url ) {\n            daemon.standAloneMode = {\n                check: keys.CheckVersion === 'true',\n                url: keys.url\n            };\n        }\n        //console.log('daemon.standAloneMode:' + JSON.stringify(daemon.standAloneMode));\n\n        return !!daemon.standAloneMode;\n    },\n    runStandAloneMode: function () {\n        var client;\n\n        if ( daemon.standAloneMode.check ) {\n            client = new Client();\n            client.check({uri: daemon.standAloneMode.url}, function ( error, data ) {\n                if ( error || !data || !data.date || (data.date || '').toString() === 'Invalid Date' ) {\n                    console.log('can\\'t check this image, close update window');\n                    window.stbWebWindow.messageSend(1, 'AutoUpdateWindow:closed', '');\n                    window.stbWebWindow.close();\n\n                    return;\n                }\n                data.date = tools.toDate(data.date);\n                if ( ((data.date.getTime() || 0) > (Client.prototype.current.date.getTime() || 0)) && data.type === 'release' ) {\n                    daemon.triggers.forEach(function ( listener ) {\n                        if ( typeof listener.onHardUpdate === 'function' ) {\n                            listener.onHardUpdate(data);\n                        }\n                    });\n                    window.stbWindowMgr.windowShow(window.stbWebWindow.windowId());\n                    window.stbWebWindow.messageSend(1, 'AutoUpdateWindow:opened', '');\n                } else {\n                    console.log('up to date, close update window');\n                    window.stbWebWindow.messageSend(1, 'AutoUpdateWindow:closed', '');\n                    window.stbWebWindow.close();\n                }\n            });\n        } else {\n            //console.log('send intent');\n            daemon.triggers.forEach(function ( listener ) {\n                if ( typeof listener.onHardUpdate === 'function' ) {\n                    listener.onHardUpdate({name: '', url: daemon.standAloneMode.url, type: '', date: '', descr: ''});\n                }\n            });\n            window.stbWindowMgr.windowShow(window.stbWebWindow.windowId());\n            window.stbWebWindow.messageSend(1, 'AutoUpdateWindow:opened', '');\n        }\n    }\n};\n\n\nmodule.exports = {\n    onInit: function ( config, callback ) {\n        gettextWrapper.load({\n            name: window.core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            var coreDaemon = new (require('cjs-emitter'))();\n\n            gettext = gettextWrapper.gettext;\n            // wait until system be ready\n            coreDaemon.addListener('system:start', function () {\n                if ( daemon.isStandAlone() ) {\n                    daemon.stalkerMode = false;\n                    daemon.init(config);\n                } else {\n                    // wait until core.backend plugin will be ready\n                    daemon.stalkerMode = !!window.MODE_STALKER;\n                    daemon.init(config);\n                    if ( !daemon.stalkerMode && daemon.frequency ) {\n                        clearInterval(daemon.checkTimerId);\n                        daemon.checkTimerId = window.setInterval(daemon.sync, daemon.frequency);\n                    }\n                }\n            });\n            callback(null, coreDaemon);\n        });\n    },\n    onAppInit: function ( config, callback ) {\n        //console.log('updater_onAppInit');\n        callback(null, new Client());\n        if ( daemon.standAloneMode ) {\n            daemon.runStandAloneMode();\n        } else {\n            daemon.sync();\n        }\n    },\n    onSettingsInit: function ( config, callback ) {\n        callback(null, {\n            options: [\n                {\n                    id: 'updateManager',\n                    name: gettext('Software Update'),\n                    description: gettext('Select the update method, enable/disable automatic updates, update to the beta version'),\n                    icon: 'theme-icon-update',\n                    events: {\n                        click: function () {\n                            //console.log('intent action: update');\n                            window.core.intent({\n                                action: 'update',\n                                data: {\n                                    closeCallback: config.api.actions.view.reset /*config.api.actions.resetView*/\n                                }\n                            }, function ( error ) {\n                                if ( error ) { console.log('error in update intent: ' + error); }\n                            });\n                        }\n                    },\n                    render: config.api.renders.listItem,\n                    parent: 'system'\n                }\n            ]\n        });\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n","/**\n * Junkyard\n *\n * @author <bas.jsdev@gmail.com>\n */\n\n\n'use strict';\n\n\nvar tools = {\n    /**\n     * global flag to prevent ajax queries\n     */\n    ajaxStop: false,\n    /**\n     * Ajax request\n     * @param {string} method \"post\", \"get\" or \"head\"\n     * @param {string} url address\n     * @param {function} callback on\n     * @param {Object} [headers] list of optional headers like \"charset\", \"Content-Type\" and so on\n     * @param {string} [type=text] data parsing mode: plain text (default), xml, json\n     * @param {boolean} [async=true] send asynchronous request\n     * @return {XMLHttpRequest} request object in case response headers are necessary\n     * @example\n     *   ajax('get', 'https://google.com/', function(data, status){console.info(data, status);}, {charset:'utf-8'})\n     */\n    ajax: function ( method, url, callback, headers, type, async ) {\n        var hname,\n            jdata   = null,\n            timeout = null,\n            xhr     = new XMLHttpRequest();\n\n        async = async !== false;\n        xhr.onreadystatechange = function () {\n            var respText;\n\n            if ( xhr.readyState === 4 ) {\n                clearTimeout(timeout);\n                if ( tools.ajaxStop ) {\n                    //echo(xhr.status, title);\n                    if ( typeof callback === 'function' ) { callback(null, null, null); }\n                } else {\n                    //echo('status:' + xhr.status + ', length:' + xhr.responseText.length, title);\n                    //echo(xhr.responseText, title);\n                    if ( type === 'json' && xhr.status === 200 ) {\n                        try {\n                            jdata = JSON.parse(xhr.responseText);\n                        } catch ( error ) {\n                            //echo(e, 'AJAX JSON.parse');\n                            jdata = null;\n                        }\n                    }\n                    if ( typeof callback === 'function' ) {\n                        if ( type === 'xml' ) {\n                            respText = xhr.responseXML;\n                        } else {\n                            respText = (type === 'json' ? jdata : xhr.responseText);\n                        }\n\n                        callback(respText, xhr.status, xhr);\n                    }\n                }\n            }\n        };\n        xhr.open(method, url, async);\n        // set headers if present\n        if ( headers ) {\n            for ( hname in headers ) {\n                if ( headers.hasOwnProperty(hname) ) {\n                    xhr.setRequestHeader(hname, headers[hname]);\n                }\n            }\n        }\n        xhr.send();\n        //echo('sent', title);\n        // abort after some time (60s)\n        timeout = setTimeout(function () {\n            xhr.abort();\n            //echo('ABORT on timeout', title);\n            if ( typeof callback === 'function' ) {\n                callback(null, 0);\n            }\n        }, 60000);\n\n        return xhr;\n    },\n    /**\n     * Parse date string and return date without time zone\n     * @param {string} dateStr date string in EST or UTC format\n     */\n    timeZoneOffsets: {\n        A: {index: -1, minutes: 60},\n        ACDT: {index: -1, minutes: 60},\n        ACST: {index: -1, minutes: 570},\n        ACT: {index: 1, minutes: 300},\n        ACWST: {index: -1, minutes: 525},\n        ADT: {index: 1, minutes: 180},\n        AEDT: {index: -1, minutes: 61},\n        AEST: {index: -1, minutes: 60},\n        AFT: {index: -1, minutes: 270},\n        AKDT: {index: 1, minutes: 480},\n        AKST: {index: 1, minutes: 540},\n        ALMT: {index: -1, minutes: 360},\n        AMST: {index: 1, minutes: 180},\n        AMT: {index: 1, minutes: 240},\n        ANAST: {index: -1, minutes: 62},\n        ANAT: {index: -1, minutes: 62},\n        AQTT: {index: -1, minutes: 300},\n        ART: {index: 1, minutes: 180},\n        AST: {index: 1, minutes: 240},\n        AWDT: {index: -1, minutes: 540},\n        AWST: {index: -1, minutes: 480},\n        AZOST: {index: 0, minutes: 0},\n        AZOT: {index: 1, minutes: 60},\n        AZST: {index: -1, minutes: 300},\n        AZT: {index: -1, minutes: 240},\n        B: {index: -1, minutes: 120},\n        BNT: {index: -1, minutes: 480},\n        BOT: {index: 1, minutes: 240},\n        BRST: {index: 1, minutes: 120},\n        BRT: {index: 1, minutes: 180},\n        BST: {index: -1, minutes: 60},\n        BTT: {index: -1, minutes: 360},\n        C: {index: -1, minutes: 180},\n        CAST: {index: -1, minutes: 480},\n        CAT: {index: -1, minutes: 120},\n        CCT: {index: -1, minutes: 390},\n        CDT: {index: 1, minutes: 300},\n        CEST: {index: -1, minutes: 120},\n        CET: {index: -1, minutes: 60},\n        CHADT: {index: -1, minutes: 63},\n        CHAST: {index: -1, minutes: 62},\n        CHOT: {index: -1, minutes: 480},\n        CHUT: {index: -1, minutes: 600},\n        CKT: {index: 1, minutes: 60},\n        CLST: {index: 1, minutes: 180},\n        CLT: {index: 1, minutes: 240},\n        COT: {index: 1, minutes: 300},\n        CST: {index: 1, minutes: 360},\n        CVT: {index: 1, minutes: 60},\n        CXT: {index: -1, minutes: 420},\n        ChST: {index: -1, minutes: 60},\n        D: {index: -1, minutes: 240},\n        DAVT: {index: -1, minutes: 420},\n        E: {index: -1, minutes: 300},\n        EASST: {index: 1, minutes: 300},\n        EAST: {index: 1, minutes: 360},\n        EAT: {index: -1, minutes: 180},\n        ECT: {index: 1, minutes: 300},\n        EDT: {index: -1, minutes: 61},\n        EEST: {index: -1, minutes: 180},\n        EET: {index: -1, minutes: 120},\n        EGST: {index: 0, minutes: 0},\n        EGT: {index: 1, minutes: 60},\n        EST: {index: 1, minutes: 300},\n        ET: {index: 1, minutes: 300},\n        F: {index: -1, minutes: 360},\n        FET: {index: -1, minutes: 180},\n        FJST: {index: -1, minutes: 63},\n        FJT: {index: -1, minutes: 62},\n        FKST: {index: 1, minutes: 180},\n        FKT: {index: 1, minutes: 240},\n        FNT: {index: 1, minutes: 120},\n        G: {index: -1, minutes: 420},\n        GALT: {index: 1, minutes: 360},\n        GAMT: {index: 1, minutes: 540},\n        GET: {index: -1, minutes: 240},\n        GFT: {index: 1, minutes: 180},\n        GILT: {index: -1, minutes: 62},\n        GMT: {index: 0, minutes: 0},\n        GST: {index: -1, minutes: 240},\n        GYT: {index: 1, minutes: 240},\n        H: {index: -1, minutes: 480},\n        HAA: {index: 1, minutes: 180},\n        HAC: {index: 1, minutes: 300},\n        HADT: {index: 1, minutes: 540},\n        HAE: {index: 1, minutes: 240},\n        HAP: {index: 1, minutes: 420},\n        HAR: {index: 1, minutes: 360},\n        HAST: {index: 1, minutes: 60},\n        HAT: {index: 1, minutes: 150},\n        HAY: {index: 1, minutes: 480},\n        HKT: {index: -1, minutes: 480},\n        HLV: {index: 1, minutes: 270},\n        HNA: {index: 1, minutes: 240},\n        HNC: {index: 1, minutes: 360},\n        HNE: {index: 1, minutes: 300},\n        HNP: {index: 1, minutes: 480},\n        HNR: {index: 1, minutes: 420},\n        HNT: {index: 1, minutes: 210},\n        HNY: {index: 1, minutes: 540},\n        HOVT: {index: -1, minutes: 420},\n        I: {index: -1, minutes: 540},\n        ICT: {index: -1, minutes: 420},\n        IDT: {index: -1, minutes: 180},\n        IOT: {index: -1, minutes: 360},\n        IRDT: {index: -1, minutes: 270},\n        IRKST: {index: -1, minutes: 540},\n        IRKT: {index: -1, minutes: 540},\n        IRST: {index: -1, minutes: 210},\n        IST: {index: -1, minutes: 60},\n        JST: {index: -1, minutes: 540},\n        K: {index: -1, minutes: 60},\n        KGT: {index: -1, minutes: 360},\n        KOST: {index: -1, minutes: 660},\n        KRAST: {index: -1, minutes: 480},\n        KRAT: {index: -1, minutes: 480},\n        KST: {index: -1, minutes: 540},\n        KUYT: {index: -1, minutes: 240},\n        L: {index: -1, minutes: 61},\n        LHDT: {index: -1, minutes: 61},\n        LHST: {index: -1, minutes: 60},\n        LINT: {index: -1, minutes: 64},\n        M: {index: -1, minutes: 62},\n        MAGST: {index: -1, minutes: 62},\n        MAGT: {index: -1, minutes: 62},\n        MART: {index: 1, minutes: 570},\n        MAWT: {index: -1, minutes: 300},\n        MDT: {index: 1, minutes: 360},\n        MESZ: {index: -1, minutes: 120},\n        MEZ: {index: -1, minutes: 60},\n        MHT: {index: -1, minutes: 62},\n        MMT: {index: -1, minutes: 390},\n        MSD: {index: -1, minutes: 240},\n        MSK: {index: -1, minutes: 240},\n        MST: {index: 1, minutes: 420},\n        MUT: {index: -1, minutes: 240},\n        MVT: {index: -1, minutes: 300},\n        MYT: {index: -1, minutes: 480},\n        N: {index: 1, minutes: 60},\n        NCT: {index: -1, minutes: 61},\n        NDT: {index: 1, minutes: 150},\n        NFT: {index: -1, minutes: 61},\n        NOVST: {index: -1, minutes: 420},\n        NOVT: {index: -1, minutes: 360},\n        NPT: {index: -1, minutes: 345},\n        NRT: {index: -1, minutes: 720},\n        NST: {index: 1, minutes: 210},\n        NUT: {index: 1, minutes: 61},\n        NZDT: {index: -1, minutes: 63},\n        NZST: {index: -1, minutes: 62},\n        O: {index: 1, minutes: 120},\n        OMSST: {index: -1, minutes: 420},\n        OMST: {index: -1, minutes: 420},\n        ORAT: {index: -1, minutes: 300},\n        P: {index: 1, minutes: 180},\n        PDT: {index: 1, minutes: 420},\n        PET: {index: 1, minutes: 300},\n        PETST: {index: -1, minutes: 62},\n        PETT: {index: -1, minutes: 62},\n        PGT: {index: -1, minutes: 60},\n        PHOT: {index: -1, minutes: 63},\n        PHT: {index: -1, minutes: 480},\n        PKT: {index: -1, minutes: 300},\n        PMDT: {index: 1, minutes: 120},\n        PMST: {index: 1, minutes: 180},\n        PONT: {index: -1, minutes: 61},\n        PST: {index: 1, minutes: 480},\n        PT: {index: 1, minutes: 480},\n        PWT: {index: -1, minutes: 540},\n        PYST: {index: 1, minutes: 180},\n        PYT: {index: 1, minutes: 240},\n        Q: {index: 1, minutes: 240},\n        QYZT: {index: 1, minutes: 360},\n        R: {index: 1, minutes: 300},\n        RET: {index: -1, minutes: 240},\n        S: {index: 1, minutes: 360},\n        SAKT: {index: 1, minutes: 600},\n        SAMT: {index: -1, minutes: 240},\n        SAST: {index: -1, minutes: 120},\n        SBT: {index: -1, minutes: 61},\n        SCT: {index: -1, minutes: 240},\n        SGT: {index: -1, minutes: 480},\n        SRET: {index: -1, minutes: 660},\n        SRT: {index: 1, minutes: 180},\n        SST: {index: 1, minutes: 61},\n        T: {index: 1, minutes: 420},\n        TAHT: {index: 1, minutes: 60},\n        TFT: {index: -1, minutes: 300},\n        TJT: {index: -1, minutes: 300},\n        TKT: {index: -1, minutes: 63},\n        TLT: {index: -1, minutes: 540},\n        TMT: {index: -1, minutes: 300},\n        TOT: {index: -1, minutes: 780},\n        TVT: {index: -1, minutes: 62},\n        U: {index: 1, minutes: 480},\n        ULAT: {index: -1, minutes: 480},\n        UTC: {index: 0, minutes: 0},\n        UYST: {index: 1, minutes: 120},\n        UYT: {index: 1, minutes: 180},\n        UZT: {index: -1, minutes: 300},\n        V: {index: 1, minutes: 540},\n        VET: {index: 1, minutes: 270},\n        VLAST: {index: -1, minutes: 61},\n        VLAT: {index: -1, minutes: 61},\n        VUT: {index: -1, minutes: 61},\n        W: {index: 1, minutes: 60},\n        WARST: {index: 1, minutes: 180},\n        WAST: {index: -1, minutes: 120},\n        WAT: {index: -1, minutes: 60},\n        WEST: {index: -1, minutes: 60},\n        WESZ: {index: -1, minutes: 60},\n        WET: {index: 0, minutes: 0},\n        WEZ: {index: 0, minutes: 0},\n        WFT: {index: -1, minutes: 62},\n        WGST: {index: 1, minutes: 120},\n        WGT: {index: 1, minutes: 180},\n        WIB: {index: -1, minutes: 420},\n        WIT: {index: -1, minutes: 540},\n        WITA: {index: -1, minutes: 480},\n        WST: {index: -1, minutes: 63},\n        WT: {index: 0, minutes: 0},\n        X: {index: 1, minutes: 61},\n        Y: {index: 1, minutes: 62},\n        YAKST: {index: -1, minutes: 60},\n        YAKT: {index: -1, minutes: 60},\n        YAPT: {index: -1, minutes: 60},\n        YEKST: {index: -1, minutes: 360},\n        YEKT: {index: -1, minutes: 360},\n        Z: {index: 0, minutes: 0}\n    },\n    /**\n     * Parse date string. Use it to convert from gstb image custom date format to js Date object.\n     *\n     * @param {string} date normal string date or image string date (Mon Feb 27 16:50:14 EET 2017)\n     *\n     * @return {Date} date object\n     */\n    toDate: function ( date ) {\n        var result, timeZone, offset;\n\n        if ( date ) {\n            // normal date format\n            result = new Date('' + date);\n            // image date format\n            if ( isNaN(result.getTime()) ) {\n                try {\n                    result = new Date(date.match(/\\w{3}\\s\\w{3}\\s\\d{1,2}\\s\\d{1,2}:\\d{1,2}:\\d{1,2}/) + ' ' + date.match(/\\d{4}/));\n                    timeZone = date.match(/(\\w{1,4})\\s+\\d{4}/)[1];\n                    offset = tools.timeZoneOffsets[timeZone];\n\n                    if ( offset.index !== 0 ) {\n                        result.setMinutes(result.getMinutes() + ((offset.minutes || 0) * offset.index) - result.getTimezoneOffset());\n                    }\n                } catch ( error ) {\n                    console.log('can\\'t parse firmware image date: ' + date);\n                    result = new Date(NaN);\n                }\n            }\n        } else {\n            result = new Date(NaN);\n        }\n\n        return result;\n    },\n    /**\n     * URL parsing tool\n     * (c) Steven Levithan <stevenlevithan.com>\n     * MIT License\n     *\n     * @param {string} str url to parse\n     *\n     * @return {{}} parsed structure\n     */\n    parseUri: function ( str ) {\n        var opts = tools.parseUri.options,\n            mode = opts.parser[opts.strictMode ? 'strict' : 'loose'].exec(str),\n            uri  = {},\n            indx = 14;\n\n        while ( indx-- ) { uri[opts.key[indx]] = mode[indx] || ''; }\n\n        uri[opts.q.name] = {};\n        uri[opts.key[12]].replace(opts.q.parser, function ( $0, $1, $2 ) {\n            if ( $1 ) { uri[opts.q.name][$1] = $2; }\n        });\n\n        return uri;\n    }\n};\n\ntools.parseUri.options = {\n    strictMode: false,\n    key: [\n        'source',\n        'protocol',\n        'authority',\n        'userInfo',\n        'user',\n        'password',\n        'host',\n        'port',\n        'relative',\n        'path',\n        'directory',\n        'file',\n        'query',\n        'anchor'\n    ],\n    q: {\n        name: 'queryKey',\n        parser: /(?:^|&)([^&=]*)=?([^&]*)/g\n    },\n    parser: {\n        /* eslint-disable */\n        strict: /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        loose: /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/\n        /* eslint-enable */\n    }\n};\n\n// public\nmodule.exports = tools;\n"],"sourceRoot":""}