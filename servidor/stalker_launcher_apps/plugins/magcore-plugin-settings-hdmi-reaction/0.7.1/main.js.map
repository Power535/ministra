{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","this","events","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","emit","index","event","Array","slice","constructor","currInterval","standByTimer","wakeUpSources","gettext","gettextWrapper","daemon","triggers","hdmiOn","forEach","item","hdmiOff","updateWakeUpSourcesList","gSTB","GetWakeUpSources","SupportedWakeUpSources","indexOf","splice","SetWakeUpSources","Client","trigger","error","destroy","onInit","config","load","window","core","environment","language","path","Number","storage","getItem","JSON","parse","GetEnv","stringify","varList","result","hdmi_event_delay","setItem","stbEvent","data","code","system","clearTimeout","GetStandByStatus","action","scr","setTimeout","init","onAppInit","onSettingsInit","timeToLabel","0","5","300","600","content","id","parent","type","description","label","icon","timeValue","saveImmediate","render","api","renders","popupSelect","prepareForRender","selected","prepareForSave","actions","setInfo","build","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","jsonParseError","json","responseText","onerror","ontimeout","open","send","meta","msgId","context","plural","evalResult","eval"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * Created by bas.\n */\n\n'use strict';\n\nvar Emitter        = require('cjs-emitter'),\n    gettextWrapper = require('mag-gettext'),\n    daemon         = {\n        triggers: [],\n        hdmiOn: function () {\n            this.triggers.forEach(function ( item ) {\n                if ( typeof item.hdmiOn === 'function' ) {\n                    item.hdmiOn();\n                }\n            });\n        },\n        hdmiOff: function () {\n            this.triggers.forEach(function ( item ) {\n                if ( typeof item.hdmiOff === 'function' ) {\n                    item.hdmiOff();\n                }\n            });\n        }\n    },\n    currInterval, standByTimer, wakeUpSources, gettext;\n\n\n/**\n *  Update list of WakeUp sources which will be used to return STB from standby.\n */\nfunction updateWakeUpSourcesList () {\n    // Correct wake up sources to fix hdmi wake up reaction in deep standby mode\n    if ( typeof gSTB.GetWakeUpSources === 'function' && (gSTB.SupportedWakeUpSources || []).indexOf(2) !== -1 ) {\n        wakeUpSources = gSTB.GetWakeUpSources() || [];\n        if ( currInterval === 0 && wakeUpSources.indexOf(2) !== -1 ) {\n            wakeUpSources.splice(wakeUpSources.indexOf(2), 1);\n            // hdmi reaction turned off so it's not a wake up src anymore\n            gSTB.SetWakeUpSources(wakeUpSources);\n        } else if ( currInterval !== 0 && wakeUpSources.indexOf(2) === -1 ) {\n            wakeUpSources.push(2);\n            // hdmi reaction turned on so add it as wake up src\n            gSTB.SetWakeUpSources(wakeUpSources);\n        }\n    }\n}\n\n\nfunction init ( config ) {\n    // apply user interval settings\n    currInterval = Number(config.storage.getItem('timeValue'));\n    if ( !currInterval && currInterval !== 0 ) {\n        // migration\n        currInterval = Number(JSON.parse(gSTB.GetEnv(JSON.stringify({varList: ['hdmi_event_delay']}))).result.hdmi_event_delay);\n        // set default time (5 minutes)\n        if ( !currInterval && currInterval !== 0 ) {\n            currInterval = 300;\n            config.storage.setItem('timeValue', currInterval);\n        }\n    }\n\n    updateWakeUpSourcesList();\n\n    // add listener for hdmi events\n    window.stbEvent.addListener('media', function ( data ) {\n        if ( data && data.code === 32 ) {\n            // reset video mode and player resolution data\n            window.system.emit('resetVideoMode');\n            if ( currInterval ) {\n                clearTimeout(standByTimer);\n                if ( gSTB.GetStandByStatus() ) {\n                    window.system.emit('standby', {action: 'off', scr: 'hdmi-reaction'});\n                }\n            }\n        }\n        if ( data && data.code === 33 && currInterval ) {\n            clearTimeout(standByTimer);\n            standByTimer = setTimeout(function () {\n                if ( !gSTB.GetStandByStatus() ) {\n                    window.system.emit('standby', {action: 'on', scr: 'hdmi-reaction'});\n                }\n            }, currInterval * 1000);\n        }\n    });\n}\n\n\nfunction build ( config ) {\n    // default delay = 5 sec\n    var timeToLabel = {\n            0: gettext('Disabled'),\n            5: gettext('Enabled'),\n            300: gettext('5 minutes delay'),\n            600: gettext('10 minutes delay')\n        },\n        result      = {\n            content: [\n                {\n                    id: 'hdmiReaction',\n                    parent: 'userInterface',\n                    type: 'option',\n                    name: gettext('HDMI event reaction'),\n                    description: [\n                        {\n                            label: gettext('Interval') + ':',\n                            value: timeToLabel[currInterval] || ''\n                        }, {\n                            label: '',\n                            value: gettext('Device response to HDMI cable disconnections.')\n                        }\n                    ],\n                    icon: 'theme-icon-hdmi',\n                    data: {timeValue: 5},\n                    saveImmediate: true,\n                    render: config.api.renders.popupSelect,\n                    prepareForRender: function ( data, callback ) {\n                        callback([\n                            {value: 0, name: gettext('Disabled'), selected: currInterval === 0},\n                            {value: 5, name: gettext('Enabled'), selected: currInterval === 5},\n                            {value: 300, name: gettext('5 minutes delay'), selected: currInterval === 300},\n                            {value: 600, name: gettext('10 minutes delay'), selected: currInterval === 600}\n                        ]);\n                    },\n                    prepareForSave: function ( value, callback ) {\n                        //console.log('hdmi-reaction:was ' + config.storage.getItem('timeValue') + ' set to ' + value);\n                        currInterval = value;\n                        this.data.timeValue = currInterval;\n                        updateWakeUpSourcesList();\n                        callback(null, function () {\n                            //console.log('call setInfo ' + typeof config.api.actions.setInfo);\n                            config.api.actions.setInfo({\n                                description: [\n                                    {\n                                        label: gettext('Interval') + ':',\n                                        value: timeToLabel[currInterval] || ''\n                                    }, {\n                                        label: '',\n                                        value: gettext('Device response to HDMI cable disconnections.')\n                                    }\n                                ]\n                            });\n                            if ( result && result.content && result.content[0] && result.content[0].description ) {\n                                result.content[0].description[0].value = timeToLabel[currInterval] || '';\n                            }\n                        });\n                    }\n                }\n            ]\n        };\n\n    return result;\n}\n\n\nfunction Client () {\n    var self    = this,\n        trigger = {};\n\n    Emitter.call(this);\n\n    trigger.hdmiOn = function () {\n        if ( self.events['hdmiOn'] ) {\n            try {\n                self.emit('hdmiOn');\n            } catch ( error ) {\n                console.log('hdmi reaction plugin: error in one of hdmiOn listeners. ' + error);\n            }\n        }\n    };\n    trigger.hdmiOff = function () {\n        if ( self.events['hdmiOff'] ) {\n            try {\n                self.emit('hdmiOff');\n            } catch ( error ) {\n                console.log('hdmi reaction plugin: error in one of hdmiOff listeners. ' + error);\n            }\n        }\n    };\n\n    daemon.triggers.push(trigger);\n\n    /**\n     * Stop this client and remove all it listeners. Use it for cleanup before application exit.\n     */\n    this.destroy = function () {\n        daemon.triggers.splice(daemon.triggers.indexOf(trigger), 1);\n        this.events = {};\n    };\n}\n\n\nClient.prototype = Object.create(Emitter.prototype);\nClient.prototype.constructor = Client;\n\n\nmodule.exports = {\n    onInit: function ( config, callback ) {\n        gettextWrapper.load({\n            name: window.core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            gettext = gettextWrapper.gettext;\n            init(config);\n            callback();\n        });\n    },\n    onAppInit: function ( config, callback ) {\n        callback(null, new Client());\n    },\n    onSettingsInit: function ( config, callback ) {\n        callback(null, build(config));\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n"],"sourceRoot":""}