{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/main.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./node_modules/cjs-gettext/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","currInterval","gettext","gettextWrapper","onInit","config","callback","load","window","core","environment","language","path","notify","oldPortalValue","pathToFile","Number","storage","getItem","JSON","parse","gSTB","GetEnv","stringify","varList","result","autoPowerDownTime","SetEnv","setItem","stbEvent","addListener","data","timeLeft","text1","text2","countDownTimer","message","setTimeout","stbWebWindow","messageSend","windowId","title","icon","buttons","click","clearTimeout","system","emit","action","src","countDown","update","close","SetAutoPowerDownTime","SetAutoPowerDownInitAttr","url","backgroundColor","init","onAppInit","onSettingsInit","timeToLabel","0","1200","3600","7200","14400","28800","content","id","parent","type","description","label","timeValue","saveImmediate","render","api","renders","popupSelect","prepareForRender","selected","prepareForSave","this","actions","setInfo","build","Emitter","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","xhr","ext","XMLHttpRequest","onload","jsonParseError","json","responseText","error","onerror","events","ontimeout","open","send","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","index","event","Array","slice","constructor","meta","msgId","context","plural","evalResult","eval"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * Created by bas.\n */\n\n'use strict';\n\nvar gettextWrapper = require('mag-gettext'),\n    currInterval, gettext;\n\nfunction init ( config ) {\n    var pathToFile = config.path,\n        notify, oldPortalValue;\n\n    // apply interval settings\n    currInterval = Number(config.storage.getItem('timeValue'));\n    if ( !currInterval && currInterval !== 0 ) {\n        // migration\n        oldPortalValue = Number(JSON.parse(gSTB.GetEnv(JSON.stringify({varList: ['autoPowerDownTime']}))).result.autoPowerDownTime);\n        if ( !oldPortalValue && oldPortalValue !== 0 ) {\n            // turned off by default\n            currInterval = 0;\n        } else {\n            currInterval = oldPortalValue;\n        }\n        gSTB.SetEnv(JSON.stringify({autoPowerDownTime: currInterval}));\n        config.storage.setItem('timeValue', currInterval);\n    }\n\n    stbEvent.addListener('message', function ( data ) {\n        var timeLeft, text1, text2, countDownTimer;\n\n        if ( data.message === 'autoPowerDown' ) {\n            text1 = gettext('Device will be shut down in');\n            text2 = gettext('seconds.');\n            timeLeft = 30;\n\n            setTimeout(function () {\n                stbWebWindow.messageSend(data.windowId, 'pluginMode', '');\n\n                notify = window.core.notify({\n                    title: text1 + ' ' + timeLeft + ' ' + text2,\n                    icon: 'info',\n                    buttons: [\n                        {\n                            value: gettext('Cancel'),\n                            click: function () {\n                                clearTimeout(countDownTimer);\n                            }\n                        }, {\n                            value: gettext('Ok'),\n                            click: function () {\n                                clearTimeout(countDownTimer);\n                                window.system.emit('standby', {action: 'on', src: 'apd'});\n                            }\n                        }\n                    ]\n                });\n\n                (function countDown () {\n                    timeLeft--;\n                    notify.update({title: text1 + ' ' + timeLeft + ' ' + text2});\n                    if ( timeLeft > 0 ) {\n                        countDownTimer = setTimeout(countDown, 1000);\n                    } else {\n                        if ( notify ) {\n                            notify.close();\n                            notify = null;\n                        }\n                        window.system.emit('standby', {action: 'on', src: 'apd'});\n                    }\n                })();\n            }, 1000);\n        }\n    });\n\n    // set time\n    gSTB.SetAutoPowerDownTime(currInterval);\n    // set view\n    gSTB.SetAutoPowerDownInitAttr(JSON.stringify({\n        url: pathToFile,\n        backgroundColor: 'transparent'\n    }));\n}\n\n\nfunction build ( config ) {\n    var timeToLabel = {\n            0: gettext('Disabled'),\n            1200: gettext('20 minutes'),\n            3600: gettext('1 hour'),\n            7200: gettext('2 hours'),\n            14400: gettext('4 hours'),\n            28800: gettext('8 hours')\n        },\n        result      = {\n            content: [\n                {\n                    id: 'apd',\n                    parent: 'userInterface',\n                    type: 'option',\n                    name: gettext('Auto power down'),\n                    description: [\n                        {\n                            label: gettext('Interval') + ':',\n                            value: timeToLabel[currInterval] || ''\n                        }, {\n                            label: '',\n                            value: gettext('The duration of the device inactivity, upon which it will be turned off')\n                        }\n                    ],\n                    icon: 'theme-icon-standby',\n                    data: {timeValue: 0},\n                    saveImmediate: true,\n                    render: config.api.renders.popupSelect,\n                    prepareForRender: function ( data, callback ) {\n                        callback([\n                            {value: 0, name: gettext('Disabled'), selected: currInterval === 0},\n                            {value: 1200, name: gettext('20 minutes'), selected: currInterval === 1200},\n                            {value: 3600, name: gettext('1 hour'), selected: currInterval === 3600},\n                            {value: 7200, name: gettext('2 hours'), selected: currInterval === 7200},\n                            {value: 14400, name: gettext('4 hours'), selected: currInterval === 14400},\n                            {value: 28800, name: gettext('8 hours'), selected: currInterval === 28800}\n                        ]);\n                    },\n                    prepareForSave: function ( value, callback ) {\n                        //  console.log('apd:was ' + config.storage.getItem('timeValue') + ' set to ' + value);\n                        currInterval = value;\n                        this.data.timeValue = currInterval;\n                        gSTB.SetAutoPowerDownTime(currInterval);\n                        callback(null, function () {\n                            //console.log('call setInfo ' + typeof config.api.actions.setInfo);\n                            config.api.actions.setInfo({\n                                description: [\n                                    {\n                                        label: gettext('Interval') + ':',\n                                        value: timeToLabel[currInterval] || ''\n                                    }, {\n                                        label: '',\n                                        value: gettext('The duration of the device inactivity, upon which it will be turned off')\n                                    }\n                                ]\n                            });\n                            if ( result && result.content && result.content[0] && result.content[0].description ) {\n                                result.content[0].description[0].value = timeToLabel[currInterval] || '';\n                            }\n                        });\n                    }\n                }\n            ]\n        };\n\n    return result;\n}\n\n\nmodule.exports = {\n    onInit: function ( config, callback ) {\n        gettextWrapper.load({\n            name: window.core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            gettext = gettextWrapper.gettext;\n            init(config);\n            callback();\n        });\n    },\n    onAppInit: function ( config, callback ) {\n        callback(null, {});\n    },\n    onSettingsInit: function ( config, callback ) {\n        callback(null, build(config));\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n"],"sourceRoot":""}