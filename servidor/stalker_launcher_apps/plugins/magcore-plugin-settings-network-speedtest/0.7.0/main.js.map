{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/cjs-emitter/index.js","webpack:///./src/js/main.js","webpack:///./node_modules/mag-gettext/index.js","webpack:///./node_modules/cjs-gettext/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Emitter","this","events","addListener","callback","push","once","self","onceWrapper","removeListener","apply","arguments","addListeners","callbacks","filter","fn","length","undefined","emit","index","event","Array","slice","constructor","speedTest","gettext","gettextWrapper","tools","ids","base","test","ajaxStop","ajax","method","url","headers","type","async","hname","respText","jdata","timeout","xhr","XMLHttpRequest","onreadystatechange","readyState","clearTimeout","status","JSON","parse","responseText","error","responseXML","open","setRequestHeader","send","setTimeout","abort","getHumanReadableSpeed","result","postfix","divider","speed","sizeDone","timeWasted","toFixed","calculateTheDistance","latA","longA","latB","longB","lat1","Math","PI","lat2","long1","long2","cosLat1","cos","cosLat2","sinLat1","sin","sinLat2","delta","cosDelta","sinDelta","coordX","coordY","sqrt","pow","ad","atan2","ceil","SpeedTest","server","destroy","buildSpeedTest","config","id","parent","description","icon","title","focusable","click","data","setData","items","gSTB","GetLanLinkStatus","GetWifiLinkStatus","text","start","prepareForRender","render","api","renders","popupLayoutList","init","user","servers","lat","long","code","Number","storage","getItem","lon","ind","setItem","distance","sort","one","two","timerId","taskStates","STOPPED","WAITING","RUNNING","FINISHED","TEMPORARY_ERROR","PERMANENT_ERROR","startNewTest","stbDownloadManager","AddMeasureJob","window","setInterval","info","GetMeasureInfo","state","clearInterval","DeleteJob","round","progressPct","forEach","item","onInit","load","core","environment","language","path","coreDaemon","MODE_STALKER","backend","settings","speedtest_url","onAppInit","onSettingsInit","content","Gettext","loader","prepare","_","pgettext","ngettext","defaultLanguage","ext","onload","jsonParseError","json","onerror","ontimeout","meta","msgId","context","plural","evalResult","eval"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Base Events Emitter implementation.\n *\n * @see http://nodejs.org/api/events.html\n * @constructor\n *\n * @example\n * var emitter = new Emitter();\n */\nfunction Emitter () {\n    console.assert(typeof this === 'object', 'must be constructed via new');\n\n    // if ( DEVELOP ) {\n    //     if ( typeof this !== 'object' ) { throw new Error(__filename + ': must be constructed via new'); }\n    // }\n\n    /**\n     * Inner hash table for event names and linked callbacks.\n     * Manual editing should be avoided.\n     *\n     * @member {Object.<string, function[]>}\n     *\n     * @example\n     * {\n     *     click: [\n     *         function click1 () { ... },\n     *         function click2 () { ... }\n     *     ],\n     *     keydown: [\n     *         function () { ... }\n     *     ]\n     * }\n     **/\n    this.events = {};\n}\n\n\nEmitter.prototype = {\n    /**\n     * Bind an event to the given callback function.\n     * The same callback function can be added multiple times for the same event name.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.addListener('click', function ( data ) { ... });\n     * // one more click handler\n     * emitter.addListener('click', function ( data ) { ... });\n     */\n    addListener: function ( name, callback ) {\n        console.assert(arguments.length === 2, 'wrong arguments number');\n        console.assert(typeof name === 'string', 'wrong name type');\n        console.assert(name.length > 0, 'empty name');\n        console.assert(typeof callback === 'function', 'callback should be a function');\n\n        // if ( DEVELOP ) {\n        //     if ( arguments.length !== 2 ) { throw new Error(__filename + ': wrong arguments number'); }\n        //     if ( typeof name !== 'string' || name.length === 0 ) { throw new Error(__filename + ': wrong or empty name'); }\n        //     if ( typeof callback !== 'function' ) { throw new Error(__filename + ': wrong callback type'); }\n        // }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(callback);\n    },\n\n\n    /**\n     * Add a one time listener for the event.\n     * This listener is invoked only the next time the event is fired, after which it is removed.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to call on this event\n     *\n     * @example\n     * emitter.once('click', function ( data ) { ... });\n     */\n    once: function ( name, callback ) {\n        // current execution context\n        var self = this;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n        }\n\n        // initialization may be required\n        this.events[name] = this.events[name] || [];\n        // append this new event to the list\n        this.events[name].push(function onceWrapper () {\n            self.removeListener(name, onceWrapper);\n            callback.apply(self, arguments);\n        });\n    },\n\n\n    /**\n     * Apply multiple listeners at once.\n     *\n     * @param {Object} callbacks event names with callbacks\n     *\n     * @example\n     * emitter.addListeners({\n     *     click: function ( data ) {},\n     *     close: function ( data ) {}\n     * });\n     */\n    addListeners: function ( callbacks ) {\n        var name;\n\n        if ( DEVELOP ) {\n            if ( arguments.length !== 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof callbacks !== 'object' ) {\n                throw new Error(__filename + ': wrong callbacks type');\n            }\n            if ( Object.keys(callbacks).length === 0 ) {\n                throw new Error(__filename + ': no callbacks given');\n            }\n        }\n\n        for ( name in callbacks ) {\n            if ( callbacks.hasOwnProperty(name) ) {\n                this.addListener(name, callbacks[name]);\n            }\n        }\n    },\n\n\n    /**\n     * Remove all instances of the given callback.\n     *\n     * @param {string} name event identifier\n     * @param {function} callback function to remove\n     *\n     * @example\n     * emitter.removeListener('click', func1);\n     */\n    removeListener: function ( name, callback ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 2 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n            if ( typeof callback !== 'function' ) {\n                throw new Error(__filename + ': wrong callback type');\n            }\n            if ( this.events[name] && !Array.isArray(this.events[name]) ) {\n                throw new Error(__filename + ': corrupted inner data');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( this.events[name] ) {\n            // rework the callback list to exclude the given one\n            this.events[name] = this.events[name].filter(function callbacksFilter ( fn ) { return fn !== callback; });\n            // event has no more callbacks so clean it\n            if ( this.events[name].length === 0 ) {\n                // as if there were no listeners at all\n                this.events[name] = undefined;\n            }\n        }\n    },\n\n\n    /**\n     * Remove all callbacks for the given event name.\n     * Without event name clears all events.\n     *\n     * @param {string} [name] event identifier\n     *\n     * @example\n     * emitter.removeAllListeners('click');\n     * emitter.removeAllListeners();\n     *\n     * @deprecated\n     */\n    /*removeAllListeners: function ( name ) {\n        if ( DEVELOP ) {\n            if ( arguments.length !== 0 && (typeof name !== 'string' || name.length === 0) ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // check input\n        if ( arguments.length === 0 ) {\n            // no arguments so remove everything\n            this.events = {};\n        } else if ( name ) {\n            if ( DEVELOP ) {\n                if ( this.events[name] ) { throw new Error(__filename + ': event is not removed'); }\n            }\n\n            // only name is given so remove all callbacks for the given event\n            // but object structure modification should be avoided\n            this.events[name] = undefined;\n        }\n    },*/\n\n\n    /**\n     * Execute each of the listeners in the given order with the supplied arguments.\n     *\n     * @param {string} name event identifier\n     *\n     * @example\n     * emitter.emit('init');\n     * emitter.emit('click', {src: panel1, dst: panel2});\n     * emitter.emit('load', error, data);\n     *\n     * // it's a good idea to emit event only when there are some listeners\n     * if ( this.events['click'] ) {\n     *     this.emit('click', {event: event});\n     * }\n     */\n    emit: function ( name ) {\n        var event = this.events[name],\n            index;\n\n        if ( DEVELOP ) {\n            if ( arguments.length < 1 ) {\n                throw new Error(__filename + ': wrong arguments number');\n            }\n            if ( typeof name !== 'string' || name.length === 0 ) {\n                throw new Error(__filename + ': wrong or empty name');\n            }\n        }\n\n        // the event exists and should have some callbacks\n        if ( event ) {\n            if ( DEVELOP ) {\n                if ( !Array.isArray(event) ) {\n                    throw new Error(__filename + ': wrong event type');\n                }\n            }\n\n            for ( index = 0; index < event.length; index++ ) {\n                if ( DEVELOP ) {\n                    if ( typeof event[index] !== 'function' ) {\n                        throw new Error(__filename + ': wrong event callback type');\n                    }\n                }\n\n                // invoke the callback with parameters\n                event[index].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n        }\n    }\n};\n\n\n// correct constructor name\nEmitter.prototype.constructor = Emitter;\n\n\n// public\nmodule.exports = Emitter;\n","/**\n * Created by bas.\n */\n\n'use strict';\n\nvar gettextWrapper = require('mag-gettext'),\n    Emitter        = require('cjs-emitter'),\n    tools          = {\n        ids: {\n            base: 'network',\n            test: 'speed-test'\n        },\n        /**\n         * global flag to prevent ajax queries\n         */\n        ajaxStop: false,\n        /**\n         * Ajax request\n         * @param {string} method \"post\", \"get\" or \"head\"\n         * @param {string} url address\n         * @param {function} callback on\n         * @param {Object} [headers] list of optional headers like \"charset\", \"Content-Type\" and so on\n         * @param {string} [type=text] data parsing mode: plain text (default), xml, json\n         * @param {boolean} [async=true] send asynchronous request\n         * @return {XMLHttpRequest} request object in case response headers are necessary\n         * @example\n         *   ajax('get', 'https://google.com/', function(data, status){console.info(data, status);}, {charset:'utf-8'})\n         */\n        ajax: function ( method, url, callback, headers, type, async ) {\n            var jdata   = null,\n                timeout = null,\n                xhr     = new XMLHttpRequest(),\n                hname, respText;\n\n            async = async !== false;\n\n            xhr.onreadystatechange = function () {\n                if ( xhr.readyState === 4 ) {\n                    clearTimeout(timeout);\n                    if ( tools.ajaxStop ) {\n                        //echo(xhr.status, 'AJAX ' + method.toUpperCase() + ' ' + url);\n                        if ( typeof callback === 'function' ) { callback(null, null, null); }\n                    } else {\n                        //echo('status:' + xhr.status + ', length:' + xhr.responseText.length, title);\n                        //echo(xhr.responseText, title);\n                        if ( type === 'json' && xhr.status === 200 ) {\n                            try {\n                                jdata = JSON.parse(xhr.responseText);\n                            } catch ( error ) {\n                                //echo(error, 'AJAX JSON.parse');\n                                jdata = null;\n                            }\n                        }\n                        if ( typeof callback === 'function' ) {\n                            if ( type === 'xml' ) {\n                                respText = xhr.responseXML;\n                            } else {\n                                respText = (type === 'json' ? jdata : xhr.responseText);\n                            }\n                            callback(respText, xhr.status, xhr);\n                        }\n                    }\n                }\n            };\n            xhr.open(method, url, async);\n            // set headers if present\n            if ( headers ) {\n                for ( hname in headers ) {\n                    if ( headers.hasOwnProperty(hname) ) {\n                        xhr.setRequestHeader(hname, headers[hname]);\n                    }\n                }\n            }\n            xhr.send();\n            //echo('sent', title);\n            // abort after some time (60s)\n            timeout = setTimeout(function () {\n                xhr.abort();\n                //echo('ABORT on timeout', title);\n                if ( typeof callback === 'function' ) {\n                    callback(null, 0);\n                }\n            }, 60000);\n\n            return xhr;\n        },\n        getHumanReadableSpeed: function ( result ) {\n            var speed = ((result.sizeDone * 1000) / result.timeWasted) * 8,\n                postfix, divider;\n\n            if ( speed >= 1048576 ) {\n                postfix = 'Mbps';\n                divider = 1048576;\n            } else if ( speed >= 1024 ) {\n                postfix = 'Kbps';\n                divider = 1024;\n            } else {\n                postfix = 'bps';\n                divider = 1;\n            }\n\n            return (speed / divider).toFixed(2) + ' ' + postfix;\n        },\n        /**\n         * Get distance between two places.\n         *\n         * @param {number} latA location A latitude\n         * @param {number} longA location A longitude\n         * @param {number} latB  location B latitude\n         * @param {number} longB  location B longitude\n         *\n         * @return {number} distance\n         */\n        calculateTheDistance: function ( latA, longA, latB, longB ) {\n            var earthRadius = 6372795,\n\n                lat1        = latA * Math.PI / 180,\n                lat2        = latB * Math.PI / 180,\n                long1       = longA * Math.PI / 180,\n                long2       = longB * Math.PI / 180,\n\n                cosLat1     = Math.cos(lat1),\n                cosLat2     = Math.cos(lat2),\n                sinLat1     = Math.sin(lat1),\n                sinLat2     = Math.sin(lat2),\n\n                delta       = long2 - long1,\n                cosDelta    = Math.cos(delta),\n                sinDelta    = Math.sin(delta),\n\n                coordX      = (sinLat1 * sinLat2) + (cosLat1 * cosLat2 * cosDelta),\n                coordY      = Math.sqrt(Math.pow(cosLat2 * sinDelta, 2) + Math.pow((cosLat1 * sinLat2) - (sinLat1 * cosLat2 * cosDelta), 2)),\n\n                ad          = Math.atan2(coordY, coordX);\n\n            return Math.ceil(ad * earthRadius);\n        }\n    },\n    speedTest, gettext;\n\n\n/**\n * Update manager. Listening daemon for records changes and emitting corresponding events to application.\n * Can emit events: progress, state, add, remove.\n *\n * @constructor\n * @extends Emitter\n */\nfunction SpeedTest () {\n    Emitter.call(this);\n    // nearest server with test file\n    this.server = '';\n    /**\n     * Stop this client and remove all it listeners. Use it for cleanup before application exit.\n     */\n    this.destroy = function () { this.events = {}; };\n}\n\nSpeedTest.prototype = Object.create(Emitter.prototype);\nSpeedTest.prototype.constructor = SpeedTest;\n\n\n/**\n * Find closest server for tests.\n *\n * @param {Object} config config\n * @param {Object} config.storage data storage\n */\nSpeedTest.prototype.init = function ( config ) {\n    var servers             = [\n            {name: 'San Jose', lat: 37.3393900, long: -121.8949600, code: 'us'},\n            {name: 'Washington D.C', lat: 38.8951100, long: -77.0363700, code: 'us'},\n            {name: 'Amsterdam', lat: 52.3740300, long: 4.8896900, code: 'nl'},\n            {name: 'Frankfurt', lat: 50.1166700, long: 8.6833300, code: 'de'}\n        ],\n        getMyLocationServer = 'http://weather.infomir.com.ua/getGeo.php',\n        testBaseURL         = '.leaseweb.net/speedtest/10mb.bin',\n        self                = this,\n        user;\n\n    // user old coordinates\n    user = {\n        lat: Number(config.storage.getItem('userLat')),\n        lon: Number(config.storage.getItem('userLon'))\n    };\n    // get current coordinates\n    tools.ajax('get', getMyLocationServer, function ( data ) {\n        var ind;\n\n        try {\n            data = JSON.parse(data).data;\n        } catch ( error ) {\n            console.log(error, 'can\\'t parse coordinates data from server');\n            data = {lat: 0, lon: 0};\n        }\n\n        // if coordinates was changed update location data\n        if ( (data.lat && data.lat !== user.lat) || (data.lon && data.lon !== user.lon) ) {\n            config.storage.setItem('userLat', user.lat);\n            config.storage.setItem('userLon', user.lon);\n            user.lat = data.lat;\n            user.lon = data.lon;\n            // get closest to user server\n            for ( ind = 0; ind < servers.length; ind++ ) {\n                servers[ind].distance = tools.calculateTheDistance(user.lat, user.lon, servers[ind].lat, servers[ind].long);\n            }\n            servers.sort(function ( one, two ) {\n                return one.distance - two.distance;\n            });\n            self.server = 'http://mirror.' + servers[0].code + testBaseURL;\n            config.storage.setItem('server', self.server);\n        } else {\n            self.server = config.storage.getItem('server');\n        }\n    });\n};\n\n/**\n * Start test.\n *\n * @param {Object} config config\n * @param {Object} config.storage data storage\n */\nSpeedTest.prototype.start = function ( config ) {\n    var self = this,\n        taskStates = {\n            STOPPED: 0,\n            WAITING: 1,\n            RUNNING: 2,\n            FINISHED: 3,\n            TEMPORARY_ERROR: 4,\n            PERMANENT_ERROR: 5\n        },\n        timerId, data;\n\n    // start new test\n    function startNewTest () {\n        stbDownloadManager.AddMeasureJob(self.server || config.storage.getItem('server'));\n        // watch for progress\n        timerId = window.setInterval(function () {\n            var info = JSON.parse(stbDownloadManager.GetMeasureInfo())[0],\n                text;\n\n            if ( info.state === taskStates.TEMPORARY_ERROR || info.state === taskStates.PERMANENT_ERROR ) {\n                window.clearInterval(timerId);\n                text = gettext('Error');\n                stbDownloadManager.DeleteJob(info.id, false);\n            } else if ( info.state === taskStates.WAITING || info.state === taskStates.RUNNING ) {\n                text = gettext('Measure progress') + ' ' + Math.round(info.progressPct || 0) + '%';\n            } else if ( info.state === taskStates.FINISHED ) {\n                window.clearInterval(timerId);\n                text = tools.getHumanReadableSpeed(info);\n                stbDownloadManager.DeleteJob(info.id, false);\n            }\n\n            self.emit('progress', {code: info.state, text: text});\n        }, 2000);\n    }\n\n    // find previous test data\n    data = JSON.parse(stbDownloadManager.GetMeasureInfo());\n    if ( data.length ) {\n        data.forEach(function ( item ) {\n            stbDownloadManager.DeleteJob(item.id, false);\n        });\n        // need some time to remove old data\n        setTimeout(startNewTest, 100);\n    } else {\n        startNewTest();\n    }\n};\n\n\nfunction buildSpeedTest ( config ) {\n    return {\n        id: 'networkSpeed',\n        name: gettext('Network speed'),\n        parent: tools.ids.base,\n        type: 'option',\n        description: gettext('Network speed'),\n        icon: 'theme-icon-settings',\n        title: gettext('Network speed'),\n        config: {focusable: false},\n        events: {\n            click: function () {\n                var self = this;\n\n                speedTest.events['progress'] = undefined;\n                speedTest.addListener('progress', function ( data ) {\n                    self.setData({\n                        data: [\n                            {items: ['LAN: ' + (gSTB.GetLanLinkStatus() ? gettext('Available') : gettext('Not available'))]},\n                            {items: ['WiFi: ' + (gSTB.GetWifiLinkStatus() ? gettext('Available') : gettext('Not available'))]},\n                            {items: [gettext('Speed:') + ' ' + data.text]}\n                        ]\n                    });\n                });\n                speedTest.start(config);\n            }\n        },\n        prepareForRender: function ( data, callback ) {\n            callback([\n                {items: ['LAN: ' + (gSTB.GetLanLinkStatus() ? gettext('Available') : gettext('Not available'))]},\n                {items: ['WiFi: ' + (gSTB.GetWifiLinkStatus() ? gettext('Available') : gettext('Not available'))]},\n                {items: [gettext('Speed:') + ' ' + gettext('Waiting')]}\n            ]);\n        },\n        render: config.api.renders.popupLayoutList,\n        data: {}\n    };\n}\n\nspeedTest = new SpeedTest();\n\nmodule.exports = {\n    onInit: function ( config, callback ) {\n        gettextWrapper.load({\n            name: window.core.environment.language,\n            path: config.path + 'lang'\n        }, function () {\n            var coreDaemon = new (require('cjs-emitter'))();\n\n            gettext = gettextWrapper.gettext;\n            // wait until core.backend plugin will be ready for mode check\n            coreDaemon.addListener('system:start', function () {\n                if ( window.MODE_STALKER ) {\n                    // stalker mode\n                    window.core.backend.once('ready', function () {\n                        speedTest.server = window.core.backend.settings.speedtest_url || '';\n                        if ( config.storage.getItem('server') !== speedTest.server ) {\n                            // test server url was changed so update it\n                            config.storage.setItem('server', speedTest.server);\n                        }\n                    });\n                } else {\n                    // portal mode\n                    speedTest.init(config);\n                }\n            });\n            callback(null, coreDaemon);\n        });\n    },\n    onAppInit: function ( config, callback ) {\n        callback(null, {});\n    },\n    onSettingsInit: function ( config, callback ) {\n        callback(null, {content: [buildSpeedTest(config)]});\n    }\n};\n","/**\n * @license The MIT License (MIT)\n * @copyright Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\nvar Emitter = require('cjs-emitter'),\n    Gettext = require('cjs-gettext'),\n    loader  = new Emitter();\n\n\nif ( DEVELOP ) {\n    loader._ = loader.gettext = loader.pgettext = loader.ngettext = function () {\n        throw new Error(__filename + ': you cannot use this function before mag-gettext not yet loaded');\n    };\n}\n\n/**\n * Wrap the given data with gettext instance\n * and export methods to the global scope.\n *\n * @param {Object} [data] localization data\n */\nfunction prepare ( data ) {\n    var gettext = new Gettext(data);\n\n    loader._ = loader.gettext = gettext.gettext;\n    loader.pgettext = gettext.pgettext;\n    loader.ngettext = gettext.ngettext;\n}\n\n\n/**\n * Main application language\n */\nloader.defaultLanguage = 'en';\n\n\n/**\n * Simple gettext implementation.\n *\n * @param {Object} config options\n * @param {string} [config.path=lang] relative path to project root\n * @param {string} config.name language name\n * @param {string} [config.ext=json] language file extension\n * @param {function} callback hook on ready\n */\nloader.load = function ( config, callback ) {\n    var xhr;\n\n    if ( DEVELOP ) {\n        if ( !config.name || typeof config.name !== 'string' ) {\n            throw new Error(__filename + ': config.name must be a nonempty string');\n        }\n        if ( callback && typeof callback !== 'function' ) {\n            throw new Error(__filename + ': wrong callback type');\n        }\n    }\n\n    // defaults\n\n    callback = callback || null;\n    config.ext  = config.ext  || 'json';\n    config.path = config.path || 'lang';\n\n    // is it necessary to request a localization file?\n    if ( config.name === loader.defaultLanguage ) {\n        // no\n        prepare();\n        if ( callback !== null ) {\n            callback(null);\n        }\n    } else {\n        xhr = new XMLHttpRequest();\n\n        xhr.onload = function () {\n            var jsonParseError, json;\n\n            try {\n                json = JSON.parse(xhr.responseText);\n            } catch ( error ) {\n                jsonParseError = error;\n            }\n\n            if ( jsonParseError ) {\n                xhr.onerror(jsonParseError);\n            } else {\n                prepare(json);\n                if ( callback !== null ) {\n                    callback(null);\n                }\n\n                // there are some listeners\n                if ( loader.events['load'] ) {\n                    // notify listeners\n                    loader.emit('load');\n                }\n            }\n        };\n\n        xhr.ontimeout = xhr.onerror = function ( error ) {\n            prepare();\n\n            if ( callback !== null ) {\n                callback(null);\n            }\n\n            // there are some listeners\n            if ( loader.events['error'] ) {\n                // notify listeners\n                loader.emit('error', error);\n            }\n        };\n\n        xhr.open('GET', config.path + '/' + config.name + '.' + config.ext, true);\n        xhr.send(null);\n    }\n};\n\n\n// public\nmodule.exports = loader;\n","/**\n * @license The MIT License (MIT)\n * @author Stanislav Kalashnik <darkpark.main@gmail.com>\n */\n\n/* eslint no-path-concat: 0 */\n\n'use strict';\n\n\n/**\n * Translations handler.\n *\n * @constructor\n *\n * @param {Object} config init parameters\n */\nfunction Gettext ( config ) {\n    var data, meta;\n\n    // sanitize\n    config   = config || {};\n    data     = config.data || {};\n    data[''] = data[''] || {};\n\n    // shortcut\n    meta = config.meta;\n\n    /**\n     * Display the native language translation of a textual message.\n     *\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.gettext = function ( msgId ) {\n        return data[''][msgId] || msgId;\n    };\n\n\n    /**\n     * The \"p\" in \"pgettext\" stands for \"particular\": fetches a particular translation of the textual message.\n     *\n     * @param {string} context message context\n     * @param {string} msgId textual message\n     *\n     * @return {string} translated text\n     */\n    this.pgettext = function ( context, msgId ) {\n        return data[context] && data[context][msgId] || msgId;\n    };\n\n\n    /**\n     * Display the native language translation of a textual message whose grammatical form depends on a number.\n     *\n     * @param {string} msgId textual message in a singular form\n     * @param {string} plural textual message in a plural form\n     * @param {number} value message number\n     *\n     * @return {string} translated text\n     */\n    this.ngettext = function ( msgId, plural, value ) {\n        /* eslint no-unused-vars: 0 */\n        /* eslint no-eval: 0 */\n        /* eslint id-length: 0 */\n        var n, evalResult;\n\n        if ( DEVELOP ) {\n            if ( Number(value) !== value ) {\n                throw new Error(__filename + ': value must be a number');\n            }\n        }\n\n        if ( data && meta && data[''][msgId] ) {\n            evalResult = eval('n = ' + value + '; ' + meta.plural);\n\n            if ( typeof evalResult === 'boolean' ) {\n                evalResult = +evalResult;\n            }\n\n            // translation\n            return data[''][msgId][evalResult];\n        }\n\n        // english\n        return value === 1 ? msgId : plural;\n    };\n}\n\n\n// correct constructor name\nGettext.prototype.constructor = Gettext;\n\n\n// public\nmodule.exports = Gettext;\n"],"sourceRoot":""}